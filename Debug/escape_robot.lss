
escape_robot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001744  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000003d  00802000  00802000  000017b8  2**0
                  ALLOC
  2 .comment      0000005f  00000000  00000000  000017b8  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000001f8  00000000  00000000  00001817  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00001c3f  00000000  00000000  00001a0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000082c  00000000  00000000  0000364e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00001517  00000000  00000000  00003e7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000798  00000000  00000000  00005394  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000e72  00000000  00000000  00005b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00001228  00000000  00000000  0000699e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000188  00000000  00000000  00007bc6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	f9 c0       	rjmp	.+498    	; 0x1f4 <__ctors_end>
       2:	00 00       	nop
       4:	0e c1       	rjmp	.+540    	; 0x222 <__bad_interrupt>
       6:	00 00       	nop
       8:	0c c1       	rjmp	.+536    	; 0x222 <__bad_interrupt>
       a:	00 00       	nop
       c:	0a c1       	rjmp	.+532    	; 0x222 <__bad_interrupt>
       e:	00 00       	nop
      10:	08 c1       	rjmp	.+528    	; 0x222 <__bad_interrupt>
      12:	00 00       	nop
      14:	06 c1       	rjmp	.+524    	; 0x222 <__bad_interrupt>
      16:	00 00       	nop
      18:	04 c1       	rjmp	.+520    	; 0x222 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	02 c1       	rjmp	.+516    	; 0x222 <__bad_interrupt>
      1e:	00 00       	nop
      20:	00 c1       	rjmp	.+512    	; 0x222 <__bad_interrupt>
      22:	00 00       	nop
      24:	fe c0       	rjmp	.+508    	; 0x222 <__bad_interrupt>
      26:	00 00       	nop
      28:	fc c0       	rjmp	.+504    	; 0x222 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	fa c0       	rjmp	.+500    	; 0x222 <__bad_interrupt>
      2e:	00 00       	nop
      30:	f8 c0       	rjmp	.+496    	; 0x222 <__bad_interrupt>
      32:	00 00       	nop
      34:	f6 c0       	rjmp	.+492    	; 0x222 <__bad_interrupt>
      36:	00 00       	nop
      38:	f4 c0       	rjmp	.+488    	; 0x222 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	f2 c0       	rjmp	.+484    	; 0x222 <__bad_interrupt>
      3e:	00 00       	nop
      40:	f0 c0       	rjmp	.+480    	; 0x222 <__bad_interrupt>
      42:	00 00       	nop
      44:	ee c0       	rjmp	.+476    	; 0x222 <__bad_interrupt>
      46:	00 00       	nop
      48:	ec c0       	rjmp	.+472    	; 0x222 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	ea c0       	rjmp	.+468    	; 0x222 <__bad_interrupt>
      4e:	00 00       	nop
      50:	e8 c0       	rjmp	.+464    	; 0x222 <__bad_interrupt>
      52:	00 00       	nop
      54:	e6 c0       	rjmp	.+460    	; 0x222 <__bad_interrupt>
      56:	00 00       	nop
      58:	e4 c0       	rjmp	.+456    	; 0x222 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	e2 c0       	rjmp	.+452    	; 0x222 <__bad_interrupt>
      5e:	00 00       	nop
      60:	e0 c0       	rjmp	.+448    	; 0x222 <__bad_interrupt>
      62:	00 00       	nop
      64:	de c0       	rjmp	.+444    	; 0x222 <__bad_interrupt>
      66:	00 00       	nop
      68:	dc c0       	rjmp	.+440    	; 0x222 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	da c0       	rjmp	.+436    	; 0x222 <__bad_interrupt>
      6e:	00 00       	nop
      70:	d8 c0       	rjmp	.+432    	; 0x222 <__bad_interrupt>
      72:	00 00       	nop
      74:	d6 c0       	rjmp	.+428    	; 0x222 <__bad_interrupt>
      76:	00 00       	nop
      78:	d4 c0       	rjmp	.+424    	; 0x222 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	d2 c0       	rjmp	.+420    	; 0x222 <__bad_interrupt>
      7e:	00 00       	nop
      80:	d0 c0       	rjmp	.+416    	; 0x222 <__bad_interrupt>
      82:	00 00       	nop
      84:	ce c0       	rjmp	.+412    	; 0x222 <__bad_interrupt>
      86:	00 00       	nop
      88:	cc c0       	rjmp	.+408    	; 0x222 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	ca c0       	rjmp	.+404    	; 0x222 <__bad_interrupt>
      8e:	00 00       	nop
      90:	c8 c0       	rjmp	.+400    	; 0x222 <__bad_interrupt>
      92:	00 00       	nop
      94:	c6 c0       	rjmp	.+396    	; 0x222 <__bad_interrupt>
      96:	00 00       	nop
      98:	c4 c0       	rjmp	.+392    	; 0x222 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	17 c1       	rjmp	.+558    	; 0x2cc <__vector_39>
      9e:	00 00       	nop
      a0:	6a c1       	rjmp	.+724    	; 0x376 <__vector_40>
      a2:	00 00       	nop
      a4:	be c1       	rjmp	.+892    	; 0x422 <__vector_41>
      a6:	00 00       	nop
      a8:	12 c2       	rjmp	.+1060   	; 0x4ce <__vector_42>
      aa:	00 00       	nop
      ac:	ba c0       	rjmp	.+372    	; 0x222 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	b8 c0       	rjmp	.+368    	; 0x222 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	b6 c0       	rjmp	.+364    	; 0x222 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	b4 c0       	rjmp	.+360    	; 0x222 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	b2 c0       	rjmp	.+356    	; 0x222 <__bad_interrupt>
      be:	00 00       	nop
      c0:	b0 c0       	rjmp	.+352    	; 0x222 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	ae c0       	rjmp	.+348    	; 0x222 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	ac c0       	rjmp	.+344    	; 0x222 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	aa c0       	rjmp	.+340    	; 0x222 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	a8 c0       	rjmp	.+336    	; 0x222 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	e0 c3       	rjmp	.+1984   	; 0x896 <__vector_53>
      d6:	00 00       	nop
      d8:	a4 c0       	rjmp	.+328    	; 0x222 <__bad_interrupt>
      da:	00 00       	nop
      dc:	a2 c0       	rjmp	.+324    	; 0x222 <__bad_interrupt>
      de:	00 00       	nop
      e0:	a0 c0       	rjmp	.+320    	; 0x222 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	9e c0       	rjmp	.+316    	; 0x222 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	9c c0       	rjmp	.+312    	; 0x222 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	9a c0       	rjmp	.+308    	; 0x222 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	98 c0       	rjmp	.+304    	; 0x222 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	96 c0       	rjmp	.+300    	; 0x222 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	94 c0       	rjmp	.+296    	; 0x222 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	92 c0       	rjmp	.+292    	; 0x222 <__bad_interrupt>
      fe:	00 00       	nop
     100:	90 c0       	rjmp	.+288    	; 0x222 <__bad_interrupt>
     102:	00 00       	nop
     104:	8e c0       	rjmp	.+284    	; 0x222 <__bad_interrupt>
     106:	00 00       	nop
     108:	8c c0       	rjmp	.+280    	; 0x222 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	8a c0       	rjmp	.+276    	; 0x222 <__bad_interrupt>
     10e:	00 00       	nop
     110:	88 c0       	rjmp	.+272    	; 0x222 <__bad_interrupt>
     112:	00 00       	nop
     114:	86 c0       	rjmp	.+268    	; 0x222 <__bad_interrupt>
     116:	00 00       	nop
     118:	84 c0       	rjmp	.+264    	; 0x222 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	82 c0       	rjmp	.+260    	; 0x222 <__bad_interrupt>
     11e:	00 00       	nop
     120:	80 c0       	rjmp	.+256    	; 0x222 <__bad_interrupt>
     122:	00 00       	nop
     124:	7e c0       	rjmp	.+252    	; 0x222 <__bad_interrupt>
     126:	00 00       	nop
     128:	7c c0       	rjmp	.+248    	; 0x222 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	7a c0       	rjmp	.+244    	; 0x222 <__bad_interrupt>
     12e:	00 00       	nop
     130:	78 c0       	rjmp	.+240    	; 0x222 <__bad_interrupt>
     132:	00 00       	nop
     134:	6c c7       	rjmp	.+3800   	; 0x100e <__vector_77>
     136:	00 00       	nop
     138:	74 c0       	rjmp	.+232    	; 0x222 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	a7 c7       	rjmp	.+3918   	; 0x108c <__vector_79>
     13e:	00 00       	nop
     140:	e4 c7       	rjmp	.+4040   	; 0x110a <__vector_80>
     142:	00 00       	nop
     144:	0c 94 c4 08 	jmp	0x1188	; 0x1188 <__vector_81>
     148:	0c 94 03 09 	jmp	0x1206	; 0x1206 <__vector_82>
     14c:	0a c7       	rjmp	.+3604   	; 0xf62 <__vector_83>
     14e:	00 00       	nop
     150:	68 c0       	rjmp	.+208    	; 0x222 <__bad_interrupt>
     152:	00 00       	nop
     154:	66 c0       	rjmp	.+204    	; 0x222 <__bad_interrupt>
     156:	00 00       	nop
     158:	64 c0       	rjmp	.+200    	; 0x222 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	62 c0       	rjmp	.+196    	; 0x222 <__bad_interrupt>
     15e:	00 00       	nop
     160:	60 c0       	rjmp	.+192    	; 0x222 <__bad_interrupt>
     162:	00 00       	nop
     164:	5e c0       	rjmp	.+188    	; 0x222 <__bad_interrupt>
     166:	00 00       	nop
     168:	5c c0       	rjmp	.+184    	; 0x222 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	5a c0       	rjmp	.+180    	; 0x222 <__bad_interrupt>
     16e:	00 00       	nop
     170:	58 c0       	rjmp	.+176    	; 0x222 <__bad_interrupt>
     172:	00 00       	nop
     174:	56 c0       	rjmp	.+172    	; 0x222 <__bad_interrupt>
     176:	00 00       	nop
     178:	54 c0       	rjmp	.+168    	; 0x222 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	52 c0       	rjmp	.+164    	; 0x222 <__bad_interrupt>
     17e:	00 00       	nop
     180:	50 c0       	rjmp	.+160    	; 0x222 <__bad_interrupt>
     182:	00 00       	nop
     184:	4e c0       	rjmp	.+156    	; 0x222 <__bad_interrupt>
     186:	00 00       	nop
     188:	53 c2       	rjmp	.+1190   	; 0x630 <__vector_98>
     18a:	00 00       	nop
     18c:	4a c0       	rjmp	.+148    	; 0x222 <__bad_interrupt>
     18e:	00 00       	nop
     190:	48 c0       	rjmp	.+144    	; 0x222 <__bad_interrupt>
     192:	00 00       	nop
     194:	46 c0       	rjmp	.+140    	; 0x222 <__bad_interrupt>
     196:	00 00       	nop
     198:	44 c0       	rjmp	.+136    	; 0x222 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	42 c0       	rjmp	.+132    	; 0x222 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	40 c0       	rjmp	.+128    	; 0x222 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	3e c0       	rjmp	.+124    	; 0x222 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	3c c0       	rjmp	.+120    	; 0x222 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	3a c0       	rjmp	.+116    	; 0x222 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	38 c0       	rjmp	.+112    	; 0x222 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	36 c0       	rjmp	.+108    	; 0x222 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	34 c0       	rjmp	.+104    	; 0x222 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	32 c0       	rjmp	.+100    	; 0x222 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	30 c0       	rjmp	.+96     	; 0x222 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	2e c0       	rjmp	.+92     	; 0x222 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	2c c0       	rjmp	.+88     	; 0x222 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	2a c0       	rjmp	.+84     	; 0x222 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	28 c0       	rjmp	.+80     	; 0x222 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	26 c0       	rjmp	.+76     	; 0x222 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	24 c0       	rjmp	.+72     	; 0x222 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	22 c0       	rjmp	.+68     	; 0x222 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	20 c0       	rjmp	.+64     	; 0x222 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	1e c0       	rjmp	.+60     	; 0x222 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	1c c0       	rjmp	.+56     	; 0x222 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	1a c0       	rjmp	.+52     	; 0x222 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	18 c0       	rjmp	.+48     	; 0x222 <__bad_interrupt>
	...

000001f4 <__ctors_end>:
     1f4:	11 24       	eor	r1, r1
     1f6:	1f be       	out	0x3f, r1	; 63
     1f8:	cf ef       	ldi	r28, 0xFF	; 255
     1fa:	cd bf       	out	0x3d, r28	; 61
     1fc:	df e3       	ldi	r29, 0x3F	; 63
     1fe:	de bf       	out	0x3e, r29	; 62
     200:	00 e0       	ldi	r16, 0x00	; 0
     202:	0c bf       	out	0x3c, r16	; 60
     204:	18 be       	out	0x38, r1	; 56
     206:	19 be       	out	0x39, r1	; 57
     208:	1a be       	out	0x3a, r1	; 58
     20a:	1b be       	out	0x3b, r1	; 59

0000020c <__do_clear_bss>:
     20c:	20 e2       	ldi	r18, 0x20	; 32
     20e:	a0 e0       	ldi	r26, 0x00	; 0
     210:	b0 e2       	ldi	r27, 0x20	; 32
     212:	01 c0       	rjmp	.+2      	; 0x216 <.do_clear_bss_start>

00000214 <.do_clear_bss_loop>:
     214:	1d 92       	st	X+, r1

00000216 <.do_clear_bss_start>:
     216:	ad 33       	cpi	r26, 0x3D	; 61
     218:	b2 07       	cpc	r27, r18
     21a:	e1 f7       	brne	.-8      	; 0x214 <.do_clear_bss_loop>
     21c:	37 d6       	rcall	.+3182   	; 0xe8c <main>
     21e:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <_exit>

00000222 <__bad_interrupt>:
     222:	ee ce       	rjmp	.-548    	; 0x0 <__vectors>

00000224 <setup_ADCB>:
extern struct semaphore_t semaphores;
extern uint16_t threat_distance[4];
extern struct infrResults_t infrResults;

void setup_ADCB()
{
     224:	cf 93       	push	r28
     226:	df 93       	push	r29
     228:	cd b7       	in	r28, 0x3d	; 61
     22a:	de b7       	in	r29, 0x3e	; 62
	//set ADCB for channels 0-3 and enable (0xC1)
	ADCB_CTRLA = 0x01;
     22c:	80 e4       	ldi	r24, 0x40	; 64
     22e:	92 e0       	ldi	r25, 0x02	; 2
     230:	21 e0       	ldi	r18, 0x01	; 1
     232:	fc 01       	movw	r30, r24
     234:	20 83       	st	Z, r18
	
	//set voltage reference to 2.5v (AREFA)
	ADCB_REFCTRL = 0x20;
     236:	82 e4       	ldi	r24, 0x42	; 66
     238:	92 e0       	ldi	r25, 0x02	; 2
     23a:	20 e2       	ldi	r18, 0x20	; 32
     23c:	fc 01       	movw	r30, r24
     23e:	20 83       	st	Z, r18
	
	//set resolution to 12 bits
	ADCB_CTRLB = ADC_RESOLUTION_12BIT_gc;
     240:	81 e4       	ldi	r24, 0x41	; 65
     242:	92 e0       	ldi	r25, 0x02	; 2
     244:	fc 01       	movw	r30, r24
     246:	10 82       	st	Z, r1
	
	//set interrupt for on complete and med level priority
	ADCB_CH0_INTCTRL = 0x02;
     248:	82 e6       	ldi	r24, 0x62	; 98
     24a:	92 e0       	ldi	r25, 0x02	; 2
     24c:	22 e0       	ldi	r18, 0x02	; 2
     24e:	fc 01       	movw	r30, r24
     250:	20 83       	st	Z, r18
	ADCB_CH1_INTCTRL = 0x02;
     252:	8a e6       	ldi	r24, 0x6A	; 106
     254:	92 e0       	ldi	r25, 0x02	; 2
     256:	22 e0       	ldi	r18, 0x02	; 2
     258:	fc 01       	movw	r30, r24
     25a:	20 83       	st	Z, r18
	ADCB_CH2_INTCTRL = 0x02;
     25c:	82 e7       	ldi	r24, 0x72	; 114
     25e:	92 e0       	ldi	r25, 0x02	; 2
     260:	22 e0       	ldi	r18, 0x02	; 2
     262:	fc 01       	movw	r30, r24
     264:	20 83       	st	Z, r18
	ADCB_CH3_INTCTRL = 0x02;
     266:	8a e7       	ldi	r24, 0x7A	; 122
     268:	92 e0       	ldi	r25, 0x02	; 2
     26a:	22 e0       	ldi	r18, 0x02	; 2
     26c:	fc 01       	movw	r30, r24
     26e:	20 83       	st	Z, r18
	
	//set pre-scaler to divide by 4 (this was 512 for previous exp but 4 provides sufficient time and accuracy)
	ADCB_PRESCALER = ADC_PRESCALER_DIV4_gc;
     270:	84 e4       	ldi	r24, 0x44	; 68
     272:	92 e0       	ldi	r25, 0x02	; 2
     274:	fc 01       	movw	r30, r24
     276:	10 82       	st	Z, r1
	
	//enable pins 0 to 3 for ADC conversion, set mux channels to those pins
	ADCB.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN0_gc;
     278:	80 e4       	ldi	r24, 0x40	; 64
     27a:	92 e0       	ldi	r25, 0x02	; 2
     27c:	fc 01       	movw	r30, r24
     27e:	11 a2       	std	Z+33, r1	; 0x21
	ADCB.CH1.MUXCTRL = ADC_CH_MUXPOS_PIN1_gc;
     280:	80 e4       	ldi	r24, 0x40	; 64
     282:	92 e0       	ldi	r25, 0x02	; 2
     284:	28 e0       	ldi	r18, 0x08	; 8
     286:	fc 01       	movw	r30, r24
     288:	21 a7       	std	Z+41, r18	; 0x29
	ADCB.CH2.MUXCTRL = ADC_CH_MUXPOS_PIN2_gc;
     28a:	80 e4       	ldi	r24, 0x40	; 64
     28c:	92 e0       	ldi	r25, 0x02	; 2
     28e:	20 e1       	ldi	r18, 0x10	; 16
     290:	fc 01       	movw	r30, r24
     292:	21 ab       	std	Z+49, r18	; 0x31
	ADCB.CH3.MUXCTRL = ADC_CH_MUXPOS_PIN3_gc;
     294:	80 e4       	ldi	r24, 0x40	; 64
     296:	92 e0       	ldi	r25, 0x02	; 2
     298:	28 e1       	ldi	r18, 0x18	; 24
     29a:	fc 01       	movw	r30, r24
     29c:	21 af       	std	Z+57, r18	; 0x39
	
	//set the input mode
	ADCB.CH0.CTRL = ADC_CH_INPUTMODE_SINGLEENDED_gc | ADC_CH_GAIN_1X_gc;
     29e:	80 e4       	ldi	r24, 0x40	; 64
     2a0:	92 e0       	ldi	r25, 0x02	; 2
     2a2:	21 e0       	ldi	r18, 0x01	; 1
     2a4:	fc 01       	movw	r30, r24
     2a6:	20 a3       	std	Z+32, r18	; 0x20
	ADCB.CH1.CTRL = ADC_CH_INPUTMODE_SINGLEENDED_gc | ADC_CH_GAIN_1X_gc;
     2a8:	80 e4       	ldi	r24, 0x40	; 64
     2aa:	92 e0       	ldi	r25, 0x02	; 2
     2ac:	21 e0       	ldi	r18, 0x01	; 1
     2ae:	fc 01       	movw	r30, r24
     2b0:	20 a7       	std	Z+40, r18	; 0x28
	ADCB.CH2.CTRL = ADC_CH_INPUTMODE_SINGLEENDED_gc | ADC_CH_GAIN_1X_gc;
     2b2:	80 e4       	ldi	r24, 0x40	; 64
     2b4:	92 e0       	ldi	r25, 0x02	; 2
     2b6:	21 e0       	ldi	r18, 0x01	; 1
     2b8:	fc 01       	movw	r30, r24
     2ba:	20 ab       	std	Z+48, r18	; 0x30
	ADCB.CH3.CTRL = ADC_CH_INPUTMODE_SINGLEENDED_gc | ADC_CH_GAIN_1X_gc;
     2bc:	80 e4       	ldi	r24, 0x40	; 64
     2be:	92 e0       	ldi	r25, 0x02	; 2
     2c0:	21 e0       	ldi	r18, 0x01	; 1
     2c2:	fc 01       	movw	r30, r24
     2c4:	20 af       	std	Z+56, r18	; 0x38

	//results are contained in: ADCA.CHx.RES
	
}
     2c6:	df 91       	pop	r29
     2c8:	cf 91       	pop	r28
     2ca:	08 95       	ret

000002cc <__vector_39>:

//////////	Interrupts for ADC conversion completion, see sensors.c for a timing diagram

ISR(ADCB_CH0_vect)
{
     2cc:	1f 92       	push	r1
     2ce:	0f 92       	push	r0
     2d0:	00 90 3f 00 	lds	r0, 0x003F
     2d4:	0f 92       	push	r0
     2d6:	11 24       	eor	r1, r1
     2d8:	00 90 38 00 	lds	r0, 0x0038
     2dc:	0f 92       	push	r0
     2de:	10 92 38 00 	sts	0x0038, r1
     2e2:	00 90 3a 00 	lds	r0, 0x003A
     2e6:	0f 92       	push	r0
     2e8:	10 92 3a 00 	sts	0x003A, r1
     2ec:	00 90 3b 00 	lds	r0, 0x003B
     2f0:	0f 92       	push	r0
     2f2:	10 92 3b 00 	sts	0x003B, r1
     2f6:	2f 93       	push	r18
     2f8:	3f 93       	push	r19
     2fa:	8f 93       	push	r24
     2fc:	9f 93       	push	r25
     2fe:	ef 93       	push	r30
     300:	ff 93       	push	r31
     302:	cf 93       	push	r28
     304:	df 93       	push	r29
     306:	cd b7       	in	r28, 0x3d	; 61
     308:	de b7       	in	r29, 0x3e	; 62
	if (infrResults.lCount < NUM_INF_SENS_MEAS)
     30a:	80 91 2a 20 	lds	r24, 0x202A
     30e:	84 30       	cpi	r24, 0x04	; 4
     310:	b0 f4       	brcc	.+44     	; 0x33e <__vector_39+0x72>
	{
		infrResults.left[infrResults.lCount] = ADCB_CH0_RES;
     312:	80 91 2a 20 	lds	r24, 0x202A
     316:	88 2f       	mov	r24, r24
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	24 e6       	ldi	r18, 0x64	; 100
     31c:	32 e0       	ldi	r19, 0x02	; 2
     31e:	f9 01       	movw	r30, r18
     320:	20 81       	ld	r18, Z
     322:	31 81       	ldd	r19, Z+1	; 0x01
     324:	88 0f       	add	r24, r24
     326:	99 1f       	adc	r25, r25
     328:	86 5f       	subi	r24, 0xF6	; 246
     32a:	9f 4d       	sbci	r25, 0xDF	; 223
     32c:	fc 01       	movw	r30, r24
     32e:	20 83       	st	Z, r18
     330:	31 83       	std	Z+1, r19	; 0x01
		infrResults.lCount++;
     332:	80 91 2a 20 	lds	r24, 0x202A
     336:	8f 5f       	subi	r24, 0xFF	; 255
     338:	80 93 2a 20 	sts	0x202A, r24
     33c:	05 c0       	rjmp	.+10     	; 0x348 <__vector_39+0x7c>
	}
	else
	{
		semaphores.left_meas_done = 1;
     33e:	80 91 2f 20 	lds	r24, 0x202F
     342:	82 60       	ori	r24, 0x02	; 2
     344:	80 93 2f 20 	sts	0x202F, r24
	}
	
	
}
     348:	df 91       	pop	r29
     34a:	cf 91       	pop	r28
     34c:	ff 91       	pop	r31
     34e:	ef 91       	pop	r30
     350:	9f 91       	pop	r25
     352:	8f 91       	pop	r24
     354:	3f 91       	pop	r19
     356:	2f 91       	pop	r18
     358:	0f 90       	pop	r0
     35a:	00 92 3b 00 	sts	0x003B, r0
     35e:	0f 90       	pop	r0
     360:	00 92 3a 00 	sts	0x003A, r0
     364:	0f 90       	pop	r0
     366:	00 92 38 00 	sts	0x0038, r0
     36a:	0f 90       	pop	r0
     36c:	00 92 3f 00 	sts	0x003F, r0
     370:	0f 90       	pop	r0
     372:	1f 90       	pop	r1
     374:	18 95       	reti

00000376 <__vector_40>:

ISR(ADCB_CH1_vect)
{
     376:	1f 92       	push	r1
     378:	0f 92       	push	r0
     37a:	00 90 3f 00 	lds	r0, 0x003F
     37e:	0f 92       	push	r0
     380:	11 24       	eor	r1, r1
     382:	00 90 38 00 	lds	r0, 0x0038
     386:	0f 92       	push	r0
     388:	10 92 38 00 	sts	0x0038, r1
     38c:	00 90 3a 00 	lds	r0, 0x003A
     390:	0f 92       	push	r0
     392:	10 92 3a 00 	sts	0x003A, r1
     396:	00 90 3b 00 	lds	r0, 0x003B
     39a:	0f 92       	push	r0
     39c:	10 92 3b 00 	sts	0x003B, r1
     3a0:	2f 93       	push	r18
     3a2:	3f 93       	push	r19
     3a4:	8f 93       	push	r24
     3a6:	9f 93       	push	r25
     3a8:	ef 93       	push	r30
     3aa:	ff 93       	push	r31
     3ac:	cf 93       	push	r28
     3ae:	df 93       	push	r29
     3b0:	cd b7       	in	r28, 0x3d	; 61
     3b2:	de b7       	in	r29, 0x3e	; 62
	if (infrResults.fCount < NUM_INF_SENS_MEAS)
     3b4:	80 91 2c 20 	lds	r24, 0x202C
     3b8:	84 30       	cpi	r24, 0x04	; 4
     3ba:	b8 f4       	brcc	.+46     	; 0x3ea <__vector_40+0x74>
	{
		infrResults.front[infrResults.fCount] = ADCB_CH1_RES;
     3bc:	80 91 2c 20 	lds	r24, 0x202C
     3c0:	88 2f       	mov	r24, r24
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	2c e6       	ldi	r18, 0x6C	; 108
     3c6:	32 e0       	ldi	r19, 0x02	; 2
     3c8:	f9 01       	movw	r30, r18
     3ca:	20 81       	ld	r18, Z
     3cc:	31 81       	ldd	r19, Z+1	; 0x01
     3ce:	08 96       	adiw	r24, 0x08	; 8
     3d0:	88 0f       	add	r24, r24
     3d2:	99 1f       	adc	r25, r25
     3d4:	86 5f       	subi	r24, 0xF6	; 246
     3d6:	9f 4d       	sbci	r25, 0xDF	; 223
     3d8:	fc 01       	movw	r30, r24
     3da:	20 83       	st	Z, r18
     3dc:	31 83       	std	Z+1, r19	; 0x01
		infrResults.fCount++;
     3de:	80 91 2c 20 	lds	r24, 0x202C
     3e2:	8f 5f       	subi	r24, 0xFF	; 255
     3e4:	80 93 2c 20 	sts	0x202C, r24
     3e8:	05 c0       	rjmp	.+10     	; 0x3f4 <__vector_40+0x7e>
	}
	else
	{
		semaphores.front_meas_done = 1;
     3ea:	80 91 2f 20 	lds	r24, 0x202F
     3ee:	88 60       	ori	r24, 0x08	; 8
     3f0:	80 93 2f 20 	sts	0x202F, r24
	}
	
}
     3f4:	df 91       	pop	r29
     3f6:	cf 91       	pop	r28
     3f8:	ff 91       	pop	r31
     3fa:	ef 91       	pop	r30
     3fc:	9f 91       	pop	r25
     3fe:	8f 91       	pop	r24
     400:	3f 91       	pop	r19
     402:	2f 91       	pop	r18
     404:	0f 90       	pop	r0
     406:	00 92 3b 00 	sts	0x003B, r0
     40a:	0f 90       	pop	r0
     40c:	00 92 3a 00 	sts	0x003A, r0
     410:	0f 90       	pop	r0
     412:	00 92 38 00 	sts	0x0038, r0
     416:	0f 90       	pop	r0
     418:	00 92 3f 00 	sts	0x003F, r0
     41c:	0f 90       	pop	r0
     41e:	1f 90       	pop	r1
     420:	18 95       	reti

00000422 <__vector_41>:

ISR(ADCB_CH2_vect)
{
     422:	1f 92       	push	r1
     424:	0f 92       	push	r0
     426:	00 90 3f 00 	lds	r0, 0x003F
     42a:	0f 92       	push	r0
     42c:	11 24       	eor	r1, r1
     42e:	00 90 38 00 	lds	r0, 0x0038
     432:	0f 92       	push	r0
     434:	10 92 38 00 	sts	0x0038, r1
     438:	00 90 3a 00 	lds	r0, 0x003A
     43c:	0f 92       	push	r0
     43e:	10 92 3a 00 	sts	0x003A, r1
     442:	00 90 3b 00 	lds	r0, 0x003B
     446:	0f 92       	push	r0
     448:	10 92 3b 00 	sts	0x003B, r1
     44c:	2f 93       	push	r18
     44e:	3f 93       	push	r19
     450:	8f 93       	push	r24
     452:	9f 93       	push	r25
     454:	ef 93       	push	r30
     456:	ff 93       	push	r31
     458:	cf 93       	push	r28
     45a:	df 93       	push	r29
     45c:	cd b7       	in	r28, 0x3d	; 61
     45e:	de b7       	in	r29, 0x3e	; 62
	//record results for back conversion
	if (infrResults.bCount < NUM_INF_SENS_MEAS)
     460:	80 91 2d 20 	lds	r24, 0x202D
     464:	84 30       	cpi	r24, 0x04	; 4
     466:	b8 f4       	brcc	.+46     	; 0x496 <__vector_41+0x74>
	{
		infrResults.back[infrResults.bCount] = ADCB_CH2_RES;
     468:	80 91 2d 20 	lds	r24, 0x202D
     46c:	88 2f       	mov	r24, r24
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	24 e7       	ldi	r18, 0x74	; 116
     472:	32 e0       	ldi	r19, 0x02	; 2
     474:	f9 01       	movw	r30, r18
     476:	20 81       	ld	r18, Z
     478:	31 81       	ldd	r19, Z+1	; 0x01
     47a:	0c 96       	adiw	r24, 0x0c	; 12
     47c:	88 0f       	add	r24, r24
     47e:	99 1f       	adc	r25, r25
     480:	86 5f       	subi	r24, 0xF6	; 246
     482:	9f 4d       	sbci	r25, 0xDF	; 223
     484:	fc 01       	movw	r30, r24
     486:	20 83       	st	Z, r18
     488:	31 83       	std	Z+1, r19	; 0x01
		infrResults.bCount++;
     48a:	80 91 2d 20 	lds	r24, 0x202D
     48e:	8f 5f       	subi	r24, 0xFF	; 255
     490:	80 93 2d 20 	sts	0x202D, r24
     494:	05 c0       	rjmp	.+10     	; 0x4a0 <__vector_41+0x7e>
	}
	else
	{
		semaphores.back_meas_done = 1;
     496:	80 91 2f 20 	lds	r24, 0x202F
     49a:	80 61       	ori	r24, 0x10	; 16
     49c:	80 93 2f 20 	sts	0x202F, r24
	}
		
}
     4a0:	df 91       	pop	r29
     4a2:	cf 91       	pop	r28
     4a4:	ff 91       	pop	r31
     4a6:	ef 91       	pop	r30
     4a8:	9f 91       	pop	r25
     4aa:	8f 91       	pop	r24
     4ac:	3f 91       	pop	r19
     4ae:	2f 91       	pop	r18
     4b0:	0f 90       	pop	r0
     4b2:	00 92 3b 00 	sts	0x003B, r0
     4b6:	0f 90       	pop	r0
     4b8:	00 92 3a 00 	sts	0x003A, r0
     4bc:	0f 90       	pop	r0
     4be:	00 92 38 00 	sts	0x0038, r0
     4c2:	0f 90       	pop	r0
     4c4:	00 92 3f 00 	sts	0x003F, r0
     4c8:	0f 90       	pop	r0
     4ca:	1f 90       	pop	r1
     4cc:	18 95       	reti

000004ce <__vector_42>:

ISR(ADCB_CH3_vect)
{
     4ce:	1f 92       	push	r1
     4d0:	0f 92       	push	r0
     4d2:	00 90 3f 00 	lds	r0, 0x003F
     4d6:	0f 92       	push	r0
     4d8:	11 24       	eor	r1, r1
     4da:	00 90 38 00 	lds	r0, 0x0038
     4de:	0f 92       	push	r0
     4e0:	10 92 38 00 	sts	0x0038, r1
     4e4:	00 90 3a 00 	lds	r0, 0x003A
     4e8:	0f 92       	push	r0
     4ea:	10 92 3a 00 	sts	0x003A, r1
     4ee:	00 90 3b 00 	lds	r0, 0x003B
     4f2:	0f 92       	push	r0
     4f4:	10 92 3b 00 	sts	0x003B, r1
     4f8:	2f 93       	push	r18
     4fa:	3f 93       	push	r19
     4fc:	8f 93       	push	r24
     4fe:	9f 93       	push	r25
     500:	ef 93       	push	r30
     502:	ff 93       	push	r31
     504:	cf 93       	push	r28
     506:	df 93       	push	r29
     508:	cd b7       	in	r28, 0x3d	; 61
     50a:	de b7       	in	r29, 0x3e	; 62
	if (infrResults.rCount < NUM_INF_SENS_MEAS)
     50c:	80 91 2b 20 	lds	r24, 0x202B
     510:	84 30       	cpi	r24, 0x04	; 4
     512:	b8 f4       	brcc	.+46     	; 0x542 <__vector_42+0x74>
	{
		infrResults.right[infrResults.rCount] = ADCB_CH3_RES;
     514:	80 91 2b 20 	lds	r24, 0x202B
     518:	88 2f       	mov	r24, r24
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	2c e7       	ldi	r18, 0x7C	; 124
     51e:	32 e0       	ldi	r19, 0x02	; 2
     520:	f9 01       	movw	r30, r18
     522:	20 81       	ld	r18, Z
     524:	31 81       	ldd	r19, Z+1	; 0x01
     526:	04 96       	adiw	r24, 0x04	; 4
     528:	88 0f       	add	r24, r24
     52a:	99 1f       	adc	r25, r25
     52c:	86 5f       	subi	r24, 0xF6	; 246
     52e:	9f 4d       	sbci	r25, 0xDF	; 223
     530:	fc 01       	movw	r30, r24
     532:	20 83       	st	Z, r18
     534:	31 83       	std	Z+1, r19	; 0x01
		infrResults.rCount++;
     536:	80 91 2b 20 	lds	r24, 0x202B
     53a:	8f 5f       	subi	r24, 0xFF	; 255
     53c:	80 93 2b 20 	sts	0x202B, r24
     540:	05 c0       	rjmp	.+10     	; 0x54c <__vector_42+0x7e>
	}
	else
	{
		semaphores.right_meas_done = 1;
     542:	80 91 2f 20 	lds	r24, 0x202F
     546:	84 60       	ori	r24, 0x04	; 4
     548:	80 93 2f 20 	sts	0x202F, r24
	}
	
     54c:	df 91       	pop	r29
     54e:	cf 91       	pop	r28
     550:	ff 91       	pop	r31
     552:	ef 91       	pop	r30
     554:	9f 91       	pop	r25
     556:	8f 91       	pop	r24
     558:	3f 91       	pop	r19
     55a:	2f 91       	pop	r18
     55c:	0f 90       	pop	r0
     55e:	00 92 3b 00 	sts	0x003B, r0
     562:	0f 90       	pop	r0
     564:	00 92 3a 00 	sts	0x003A, r0
     568:	0f 90       	pop	r0
     56a:	00 92 38 00 	sts	0x0038, r0
     56e:	0f 90       	pop	r0
     570:	00 92 3f 00 	sts	0x003F, r0
     574:	0f 90       	pop	r0
     576:	1f 90       	pop	r1
     578:	18 95       	reti

0000057a <setup_gpio>:

extern struct semaphore_t semaphores;
extern struct motorControl_t motorControl;

void setup_gpio()
{
     57a:	cf 93       	push	r28
     57c:	df 93       	push	r29
     57e:	cd b7       	in	r28, 0x3d	; 61
     580:	de b7       	in	r29, 0x3e	; 62
	//setup port B for input so infrared sensors can send their reaadings for ADC conversion
	PORTB_DIR = 0x00;
     582:	80 e2       	ldi	r24, 0x20	; 32
     584:	96 e0       	ldi	r25, 0x06	; 6
     586:	fc 01       	movw	r30, r24
     588:	10 82       	st	Z, r1
	
	//setup LEDs for debugging
	LED_PORT.DIR = 0xff;
     58a:	80 ee       	ldi	r24, 0xE0	; 224
     58c:	96 e0       	ldi	r25, 0x06	; 6
     58e:	2f ef       	ldi	r18, 0xFF	; 255
     590:	fc 01       	movw	r30, r24
     592:	20 83       	st	Z, r18
	LED_PORT.OUT = 0x00;
     594:	80 ee       	ldi	r24, 0xE0	; 224
     596:	96 e0       	ldi	r25, 0x06	; 6
     598:	fc 01       	movw	r30, r24
     59a:	14 82       	std	Z+4, r1	; 0x04
	
	//port D is going to be used to control 
	//the motors' direction (hook up to phase pins on H-Bridge)
	PORTD_DIR = 0x0f;
     59c:	80 e6       	ldi	r24, 0x60	; 96
     59e:	96 e0       	ldi	r25, 0x06	; 6
     5a0:	2f e0       	ldi	r18, 0x0F	; 15
     5a2:	fc 01       	movw	r30, r24
     5a4:	20 83       	st	Z, r18
	
	//turn on port E is used for PWM motor speed control, hook up to enable pins on H-bridge
	PORTE_DIR = 0xff;
     5a6:	80 e8       	ldi	r24, 0x80	; 128
     5a8:	96 e0       	ldi	r25, 0x06	; 6
     5aa:	2f ef       	ldi	r18, 0xFF	; 255
     5ac:	fc 01       	movw	r30, r24
     5ae:	20 83       	st	Z, r18
	
}
     5b0:	df 91       	pop	r29
     5b2:	cf 91       	pop	r28
     5b4:	08 95       	ret

000005b6 <setup_btn_interrupt>:

void setup_btn_interrupt()
{
     5b6:	cf 93       	push	r28
     5b8:	df 93       	push	r29
     5ba:	cd b7       	in	r28, 0x3d	; 61
     5bc:	de b7       	in	r29, 0x3e	; 62
	//set port j for input from the buttons
	PORTJ_DIRSET = 0x00;
     5be:	81 e0       	ldi	r24, 0x01	; 1
     5c0:	97 e0       	ldi	r25, 0x07	; 7
     5c2:	fc 01       	movw	r30, r24
     5c4:	10 82       	st	Z, r1
	
	//set interrupt for buttons 1 to 8
	PORTJ_INT0MASK = BUTTON_1 | BUTTON_2 | BUTTON_3 | BUTTON_4 | BUTTON_5 | BUTTON_6 | BUTTON_7 | BUTTON_8;
     5c6:	8a e0       	ldi	r24, 0x0A	; 10
     5c8:	97 e0       	ldi	r25, 0x07	; 7
     5ca:	2f ef       	ldi	r18, 0xFF	; 255
     5cc:	fc 01       	movw	r30, r24
     5ce:	20 83       	st	Z, r18
	
	//set buttons as a medium level interrupt
	PORTJ_INTCTRL = PMIC_MEDLVLEX_bm;
     5d0:	89 e0       	ldi	r24, 0x09	; 9
     5d2:	97 e0       	ldi	r25, 0x07	; 7
     5d4:	22 e0       	ldi	r18, 0x02	; 2
     5d6:	fc 01       	movw	r30, r24
     5d8:	20 83       	st	Z, r18
	
	//setup interrupt to fire on rising edge of button push
	PORTJ_PIN0CTRL = 0x01;
     5da:	80 e1       	ldi	r24, 0x10	; 16
     5dc:	97 e0       	ldi	r25, 0x07	; 7
     5de:	21 e0       	ldi	r18, 0x01	; 1
     5e0:	fc 01       	movw	r30, r24
     5e2:	20 83       	st	Z, r18
	PORTJ_PIN1CTRL = 0x01;
     5e4:	81 e1       	ldi	r24, 0x11	; 17
     5e6:	97 e0       	ldi	r25, 0x07	; 7
     5e8:	21 e0       	ldi	r18, 0x01	; 1
     5ea:	fc 01       	movw	r30, r24
     5ec:	20 83       	st	Z, r18
	PORTJ_PIN2CTRL = 0x01;
     5ee:	82 e1       	ldi	r24, 0x12	; 18
     5f0:	97 e0       	ldi	r25, 0x07	; 7
     5f2:	21 e0       	ldi	r18, 0x01	; 1
     5f4:	fc 01       	movw	r30, r24
     5f6:	20 83       	st	Z, r18
	PORTJ_PIN3CTRL = 0x01;
     5f8:	83 e1       	ldi	r24, 0x13	; 19
     5fa:	97 e0       	ldi	r25, 0x07	; 7
     5fc:	21 e0       	ldi	r18, 0x01	; 1
     5fe:	fc 01       	movw	r30, r24
     600:	20 83       	st	Z, r18
	PORTJ_PIN4CTRL = 0x01;
     602:	84 e1       	ldi	r24, 0x14	; 20
     604:	97 e0       	ldi	r25, 0x07	; 7
     606:	21 e0       	ldi	r18, 0x01	; 1
     608:	fc 01       	movw	r30, r24
     60a:	20 83       	st	Z, r18
	PORTJ_PIN5CTRL = 0x01;
     60c:	85 e1       	ldi	r24, 0x15	; 21
     60e:	97 e0       	ldi	r25, 0x07	; 7
     610:	21 e0       	ldi	r18, 0x01	; 1
     612:	fc 01       	movw	r30, r24
     614:	20 83       	st	Z, r18
	PORTJ_PIN6CTRL = 0x01;
     616:	86 e1       	ldi	r24, 0x16	; 22
     618:	97 e0       	ldi	r25, 0x07	; 7
     61a:	21 e0       	ldi	r18, 0x01	; 1
     61c:	fc 01       	movw	r30, r24
     61e:	20 83       	st	Z, r18
	PORTJ_PIN7CTRL = 0x01;
     620:	87 e1       	ldi	r24, 0x17	; 23
     622:	97 e0       	ldi	r25, 0x07	; 7
     624:	21 e0       	ldi	r18, 0x01	; 1
     626:	fc 01       	movw	r30, r24
     628:	20 83       	st	Z, r18
	
}
     62a:	df 91       	pop	r29
     62c:	cf 91       	pop	r28
     62e:	08 95       	ret

00000630 <__vector_98>:

//interrupt for handling button presses
ISR(PORTJ_INT0_vect)
{
     630:	1f 92       	push	r1
     632:	0f 92       	push	r0
     634:	00 90 3f 00 	lds	r0, 0x003F
     638:	0f 92       	push	r0
     63a:	11 24       	eor	r1, r1
     63c:	00 90 38 00 	lds	r0, 0x0038
     640:	0f 92       	push	r0
     642:	10 92 38 00 	sts	0x0038, r1
     646:	00 90 3a 00 	lds	r0, 0x003A
     64a:	0f 92       	push	r0
     64c:	10 92 3a 00 	sts	0x003A, r1
     650:	00 90 3b 00 	lds	r0, 0x003B
     654:	0f 92       	push	r0
     656:	10 92 3b 00 	sts	0x003B, r1
     65a:	2f 93       	push	r18
     65c:	3f 93       	push	r19
     65e:	8f 93       	push	r24
     660:	9f 93       	push	r25
     662:	ef 93       	push	r30
     664:	ff 93       	push	r31
     666:	cf 93       	push	r28
     668:	df 93       	push	r29
     66a:	cd b7       	in	r28, 0x3d	; 61
     66c:	de b7       	in	r29, 0x3e	; 62
	LED_PORT.OUT ^= 0x80;	//toggle msb for debugging
     66e:	80 ee       	ldi	r24, 0xE0	; 224
     670:	96 e0       	ldi	r25, 0x06	; 6
     672:	20 ee       	ldi	r18, 0xE0	; 224
     674:	36 e0       	ldi	r19, 0x06	; 6
     676:	f9 01       	movw	r30, r18
     678:	34 81       	ldd	r19, Z+4	; 0x04
     67a:	20 e8       	ldi	r18, 0x80	; 128
     67c:	23 27       	eor	r18, r19
     67e:	fc 01       	movw	r30, r24
     680:	24 83       	std	Z+4, r18	; 0x04
	
	//use portj's input (i.e. which button is pressed) to figure out what to do
	switch(PORTJ_IN)
     682:	88 e0       	ldi	r24, 0x08	; 8
     684:	97 e0       	ldi	r25, 0x07	; 7
     686:	fc 01       	movw	r30, r24
     688:	80 81       	ld	r24, Z
     68a:	88 2f       	mov	r24, r24
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	88 30       	cpi	r24, 0x08	; 8
     690:	91 05       	cpc	r25, r1
     692:	09 f4       	brne	.+2      	; 0x696 <__vector_98+0x66>
     694:	43 c0       	rjmp	.+134    	; 0x71c <__vector_98+0xec>
     696:	89 30       	cpi	r24, 0x09	; 9
     698:	91 05       	cpc	r25, r1
     69a:	54 f4       	brge	.+20     	; 0x6b0 <__vector_98+0x80>
     69c:	82 30       	cpi	r24, 0x02	; 2
     69e:	91 05       	cpc	r25, r1
     6a0:	29 f1       	breq	.+74     	; 0x6ec <__vector_98+0xbc>
     6a2:	84 30       	cpi	r24, 0x04	; 4
     6a4:	91 05       	cpc	r25, r1
     6a6:	71 f1       	breq	.+92     	; 0x704 <__vector_98+0xd4>
     6a8:	81 30       	cpi	r24, 0x01	; 1
     6aa:	91 05       	cpc	r25, r1
     6ac:	a9 f0       	breq	.+42     	; 0x6d8 <__vector_98+0xa8>
		
		
		break;
		default:
		//no valid button pressed do nothing
		break;
     6ae:	65 c0       	rjmp	.+202    	; 0x77a <__vector_98+0x14a>
ISR(PORTJ_INT0_vect)
{
	LED_PORT.OUT ^= 0x80;	//toggle msb for debugging
	
	//use portj's input (i.e. which button is pressed) to figure out what to do
	switch(PORTJ_IN)
     6b0:	80 32       	cpi	r24, 0x20	; 32
     6b2:	91 05       	cpc	r25, r1
     6b4:	09 f4       	brne	.+2      	; 0x6b8 <__vector_98+0x88>
     6b6:	49 c0       	rjmp	.+146    	; 0x74a <__vector_98+0x11a>
     6b8:	81 32       	cpi	r24, 0x21	; 33
     6ba:	91 05       	cpc	r25, r1
     6bc:	24 f4       	brge	.+8      	; 0x6c6 <__vector_98+0x96>
     6be:	80 31       	cpi	r24, 0x10	; 16
     6c0:	91 05       	cpc	r25, r1
     6c2:	b9 f1       	breq	.+110    	; 0x732 <__vector_98+0x102>
		
		
		break;
		default:
		//no valid button pressed do nothing
		break;
     6c4:	5a c0       	rjmp	.+180    	; 0x77a <__vector_98+0x14a>
ISR(PORTJ_INT0_vect)
{
	LED_PORT.OUT ^= 0x80;	//toggle msb for debugging
	
	//use portj's input (i.e. which button is pressed) to figure out what to do
	switch(PORTJ_IN)
     6c6:	80 34       	cpi	r24, 0x40	; 64
     6c8:	91 05       	cpc	r25, r1
     6ca:	09 f4       	brne	.+2      	; 0x6ce <__vector_98+0x9e>
     6cc:	4a c0       	rjmp	.+148    	; 0x762 <__vector_98+0x132>
     6ce:	80 38       	cpi	r24, 0x80	; 128
     6d0:	91 05       	cpc	r25, r1
     6d2:	09 f4       	brne	.+2      	; 0x6d6 <__vector_98+0xa6>
     6d4:	51 c0       	rjmp	.+162    	; 0x778 <__vector_98+0x148>
		
		
		break;
		default:
		//no valid button pressed do nothing
		break;
     6d6:	51 c0       	rjmp	.+162    	; 0x77a <__vector_98+0x14a>
	//use portj's input (i.e. which button is pressed) to figure out what to do
	switch(PORTJ_IN)
	{
		case (BUTTON_1):
		//set speed to 0
		motorControl.target_speed_ticks = 0;
     6d8:	10 92 32 20 	sts	0x2032, r1
     6dc:	10 92 33 20 	sts	0x2033, r1
		semaphores.change_speed = 1;
     6e0:	80 91 2f 20 	lds	r24, 0x202F
     6e4:	80 62       	ori	r24, 0x20	; 32
     6e6:	80 93 2f 20 	sts	0x202F, r24
		
		break;
     6ea:	47 c0       	rjmp	.+142    	; 0x77a <__vector_98+0x14a>
		
		case (BUTTON_2):
		//change speed to medium
		motorControl.target_speed_ticks = MOTOR_MEDIUM_TICKS;
     6ec:	88 e8       	ldi	r24, 0x88	; 136
     6ee:	93 e1       	ldi	r25, 0x13	; 19
     6f0:	80 93 32 20 	sts	0x2032, r24
     6f4:	90 93 33 20 	sts	0x2033, r25
		semaphores.change_speed = 1;
     6f8:	80 91 2f 20 	lds	r24, 0x202F
     6fc:	80 62       	ori	r24, 0x20	; 32
     6fe:	80 93 2f 20 	sts	0x202F, r24
		
		break;
     702:	3b c0       	rjmp	.+118    	; 0x77a <__vector_98+0x14a>
		
		case (BUTTON_3):
		//change speed to fast
		motorControl.target_speed_ticks = MOTOR_FAST_TICKS;
     704:	80 e4       	ldi	r24, 0x40	; 64
     706:	9f e1       	ldi	r25, 0x1F	; 31
     708:	80 93 32 20 	sts	0x2032, r24
     70c:	90 93 33 20 	sts	0x2033, r25
		semaphores.change_speed = 1;
     710:	80 91 2f 20 	lds	r24, 0x202F
     714:	80 62       	ori	r24, 0x20	; 32
     716:	80 93 2f 20 	sts	0x202F, r24
		
		break;
     71a:	2f c0       	rjmp	.+94     	; 0x77a <__vector_98+0x14a>
		
		case (BUTTON_4):
		//change motor to left
		motorControl.direction = LEFT;
     71c:	80 91 34 20 	lds	r24, 0x2034
     720:	8f 7c       	andi	r24, 0xCF	; 207
     722:	80 93 34 20 	sts	0x2034, r24
		semaphores.change_direction = 1;
     726:	80 91 2f 20 	lds	r24, 0x202F
     72a:	80 64       	ori	r24, 0x40	; 64
     72c:	80 93 2f 20 	sts	0x202F, r24
		
		break;
     730:	24 c0       	rjmp	.+72     	; 0x77a <__vector_98+0x14a>
		
		case(BUTTON_5):
		//change motor to forward
		motorControl.direction = FORWARD;
     732:	80 91 34 20 	lds	r24, 0x2034
     736:	8f 7c       	andi	r24, 0xCF	; 207
     738:	80 61       	ori	r24, 0x10	; 16
     73a:	80 93 34 20 	sts	0x2034, r24
		semaphores.change_direction = 1;
     73e:	80 91 2f 20 	lds	r24, 0x202F
     742:	80 64       	ori	r24, 0x40	; 64
     744:	80 93 2f 20 	sts	0x202F, r24
		
		break;
     748:	18 c0       	rjmp	.+48     	; 0x77a <__vector_98+0x14a>
		
		case(BUTTON_6):
		//change motor to backwards
		motorControl.direction = BACKWARD;
     74a:	80 91 34 20 	lds	r24, 0x2034
     74e:	8f 7c       	andi	r24, 0xCF	; 207
     750:	80 62       	ori	r24, 0x20	; 32
     752:	80 93 34 20 	sts	0x2034, r24
		semaphores.change_direction = 1;
     756:	80 91 2f 20 	lds	r24, 0x202F
     75a:	80 64       	ori	r24, 0x40	; 64
     75c:	80 93 2f 20 	sts	0x202F, r24
		
		break;
     760:	0c c0       	rjmp	.+24     	; 0x77a <__vector_98+0x14a>
		
		case(BUTTON_7):
		//change motor to right
		motorControl.direction = RIGHT;
     762:	80 91 34 20 	lds	r24, 0x2034
     766:	80 63       	ori	r24, 0x30	; 48
     768:	80 93 34 20 	sts	0x2034, r24
		semaphores.change_direction = 1;
     76c:	80 91 2f 20 	lds	r24, 0x202F
     770:	80 64       	ori	r24, 0x40	; 64
     772:	80 93 2f 20 	sts	0x202F, r24
		
		break;
     776:	01 c0       	rjmp	.+2      	; 0x77a <__vector_98+0x14a>
		
		case(BUTTON_8):
		
		
		break;
     778:	00 00       	nop
		break;
		
	}
	
	
}
     77a:	df 91       	pop	r29
     77c:	cf 91       	pop	r28
     77e:	ff 91       	pop	r31
     780:	ef 91       	pop	r30
     782:	9f 91       	pop	r25
     784:	8f 91       	pop	r24
     786:	3f 91       	pop	r19
     788:	2f 91       	pop	r18
     78a:	0f 90       	pop	r0
     78c:	00 92 3b 00 	sts	0x003B, r0
     790:	0f 90       	pop	r0
     792:	00 92 3a 00 	sts	0x003A, r0
     796:	0f 90       	pop	r0
     798:	00 92 38 00 	sts	0x0038, r0
     79c:	0f 90       	pop	r0
     79e:	00 92 3f 00 	sts	0x003F, r0
     7a2:	0f 90       	pop	r0
     7a4:	1f 90       	pop	r1
     7a6:	18 95       	reti

000007a8 <initialize_motorControl>:
		TCE0_CCB = motorControl.speed_ticks;
		TCE0_CCC = motorControl.speed_ticks;
		TCE0_CCD = motorControl.speed_ticks;
	}
	
}
     7a8:	cf 93       	push	r28
     7aa:	df 93       	push	r29
     7ac:	cd b7       	in	r28, 0x3d	; 61
     7ae:	de b7       	in	r29, 0x3e	; 62
     7b0:	10 92 30 20 	sts	0x2030, r1
     7b4:	10 92 31 20 	sts	0x2031, r1
     7b8:	10 92 32 20 	sts	0x2032, r1
     7bc:	10 92 33 20 	sts	0x2033, r1
     7c0:	80 91 34 20 	lds	r24, 0x2034
     7c4:	8e 7f       	andi	r24, 0xFE	; 254
     7c6:	80 93 34 20 	sts	0x2034, r24
     7ca:	80 91 34 20 	lds	r24, 0x2034
     7ce:	8d 7f       	andi	r24, 0xFD	; 253
     7d0:	80 93 34 20 	sts	0x2034, r24
     7d4:	80 91 34 20 	lds	r24, 0x2034
     7d8:	8b 7f       	andi	r24, 0xFB	; 251
     7da:	80 93 34 20 	sts	0x2034, r24
     7de:	80 91 34 20 	lds	r24, 0x2034
     7e2:	87 7f       	andi	r24, 0xF7	; 247
     7e4:	80 93 34 20 	sts	0x2034, r24
     7e8:	80 91 34 20 	lds	r24, 0x2034
     7ec:	8f 7c       	andi	r24, 0xCF	; 207
     7ee:	80 61       	ori	r24, 0x10	; 16
     7f0:	80 93 34 20 	sts	0x2034, r24
     7f4:	84 e6       	ldi	r24, 0x64	; 100
     7f6:	96 e0       	ldi	r25, 0x06	; 6
     7f8:	2f e0       	ldi	r18, 0x0F	; 15
     7fa:	fc 01       	movw	r30, r24
     7fc:	20 83       	st	Z, r18
     7fe:	df 91       	pop	r29
     800:	cf 91       	pop	r28
     802:	08 95       	ret

00000804 <setup_E0_motorControl>:
     804:	cf 93       	push	r28
     806:	df 93       	push	r29
     808:	cd b7       	in	r28, 0x3d	; 61
     80a:	de b7       	in	r29, 0x3e	; 62
     80c:	86 e2       	ldi	r24, 0x26	; 38
     80e:	9a e0       	ldi	r25, 0x0A	; 10
     810:	20 e1       	ldi	r18, 0x10	; 16
     812:	37 e2       	ldi	r19, 0x27	; 39
     814:	fc 01       	movw	r30, r24
     816:	20 83       	st	Z, r18
     818:	31 83       	std	Z+1, r19	; 0x01
     81a:	80 e0       	ldi	r24, 0x00	; 0
     81c:	9a e0       	ldi	r25, 0x0A	; 10
     81e:	25 e0       	ldi	r18, 0x05	; 5
     820:	fc 01       	movw	r30, r24
     822:	20 83       	st	Z, r18
     824:	81 e0       	ldi	r24, 0x01	; 1
     826:	9a e0       	ldi	r25, 0x0A	; 10
     828:	23 ef       	ldi	r18, 0xF3	; 243
     82a:	fc 01       	movw	r30, r24
     82c:	20 83       	st	Z, r18
     82e:	88 e2       	ldi	r24, 0x28	; 40
     830:	9a e0       	ldi	r25, 0x0A	; 10
     832:	fc 01       	movw	r30, r24
     834:	10 82       	st	Z, r1
     836:	11 82       	std	Z+1, r1	; 0x01
     838:	8a e2       	ldi	r24, 0x2A	; 42
     83a:	9a e0       	ldi	r25, 0x0A	; 10
     83c:	fc 01       	movw	r30, r24
     83e:	10 82       	st	Z, r1
     840:	11 82       	std	Z+1, r1	; 0x01
     842:	8c e2       	ldi	r24, 0x2C	; 44
     844:	9a e0       	ldi	r25, 0x0A	; 10
     846:	fc 01       	movw	r30, r24
     848:	10 82       	st	Z, r1
     84a:	11 82       	std	Z+1, r1	; 0x01
     84c:	8e e2       	ldi	r24, 0x2E	; 46
     84e:	9a e0       	ldi	r25, 0x0A	; 10
     850:	fc 01       	movw	r30, r24
     852:	10 82       	st	Z, r1
     854:	11 82       	std	Z+1, r1	; 0x01
     856:	82 e0       	ldi	r24, 0x02	; 2
     858:	9a e0       	ldi	r25, 0x0A	; 10
     85a:	2f e0       	ldi	r18, 0x0F	; 15
     85c:	fc 01       	movw	r30, r24
     85e:	20 83       	st	Z, r18
     860:	df 91       	pop	r29
     862:	cf 91       	pop	r28
     864:	08 95       	ret

00000866 <setup_E1_motorRamp>:
     866:	cf 93       	push	r28
     868:	df 93       	push	r29
     86a:	cd b7       	in	r28, 0x3d	; 61
     86c:	de b7       	in	r29, 0x3e	; 62
     86e:	86 e6       	ldi	r24, 0x66	; 102
     870:	9a e0       	ldi	r25, 0x0A	; 10
     872:	20 e2       	ldi	r18, 0x20	; 32
     874:	3e e4       	ldi	r19, 0x4E	; 78
     876:	fc 01       	movw	r30, r24
     878:	20 83       	st	Z, r18
     87a:	31 83       	std	Z+1, r19	; 0x01
     87c:	80 e4       	ldi	r24, 0x40	; 64
     87e:	9a e0       	ldi	r25, 0x0A	; 10
     880:	25 e0       	ldi	r18, 0x05	; 5
     882:	fc 01       	movw	r30, r24
     884:	20 83       	st	Z, r18
     886:	86 e4       	ldi	r24, 0x46	; 70
     888:	9a e0       	ldi	r25, 0x0A	; 10
     88a:	21 e0       	ldi	r18, 0x01	; 1
     88c:	fc 01       	movw	r30, r24
     88e:	20 83       	st	Z, r18
     890:	df 91       	pop	r29
     892:	cf 91       	pop	r28
     894:	08 95       	ret

00000896 <__vector_53>:
     896:	1f 92       	push	r1
     898:	0f 92       	push	r0
     89a:	00 90 3f 00 	lds	r0, 0x003F
     89e:	0f 92       	push	r0
     8a0:	11 24       	eor	r1, r1
     8a2:	00 90 38 00 	lds	r0, 0x0038
     8a6:	0f 92       	push	r0
     8a8:	10 92 38 00 	sts	0x0038, r1
     8ac:	00 90 3a 00 	lds	r0, 0x003A
     8b0:	0f 92       	push	r0
     8b2:	10 92 3a 00 	sts	0x003A, r1
     8b6:	8f 93       	push	r24
     8b8:	cf 93       	push	r28
     8ba:	df 93       	push	r29
     8bc:	cd b7       	in	r28, 0x3d	; 61
     8be:	de b7       	in	r29, 0x3e	; 62
     8c0:	80 91 34 20 	lds	r24, 0x2034
     8c4:	80 64       	ori	r24, 0x40	; 64
     8c6:	80 93 34 20 	sts	0x2034, r24
     8ca:	df 91       	pop	r29
     8cc:	cf 91       	pop	r28
     8ce:	8f 91       	pop	r24
     8d0:	0f 90       	pop	r0
     8d2:	00 92 3a 00 	sts	0x003A, r0
     8d6:	0f 90       	pop	r0
     8d8:	00 92 38 00 	sts	0x0038, r0
     8dc:	0f 90       	pop	r0
     8de:	00 92 3f 00 	sts	0x003F, r0
     8e2:	0f 90       	pop	r0
     8e4:	1f 90       	pop	r1
     8e6:	18 95       	reti

000008e8 <set_direction>:


void set_direction(uint8_t direction)
{
     8e8:	cf 93       	push	r28
     8ea:	df 93       	push	r29
     8ec:	1f 92       	push	r1
     8ee:	cd b7       	in	r28, 0x3d	; 61
     8f0:	de b7       	in	r29, 0x3e	; 62
     8f2:	89 83       	std	Y+1, r24	; 0x01
	//save the current speed
	motorControl.target_speed_ticks = motorControl.speed_ticks;
     8f4:	80 91 30 20 	lds	r24, 0x2030
     8f8:	90 91 31 20 	lds	r25, 0x2031
     8fc:	80 93 32 20 	sts	0x2032, r24
     900:	90 93 33 20 	sts	0x2033, r25
	
	//ramp down to 0
	set_speed_with_ramp(0);
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	49 d0       	rcall	.+146    	; 0x99c <set_speed_with_ramp>
	
	//set the new direction
	switch(direction)
     90a:	89 81       	ldd	r24, Y+1	; 0x01
     90c:	88 2f       	mov	r24, r24
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	81 30       	cpi	r24, 0x01	; 1
     912:	91 05       	cpc	r25, r1
     914:	c1 f0       	breq	.+48     	; 0x946 <set_direction+0x5e>
     916:	82 30       	cpi	r24, 0x02	; 2
     918:	91 05       	cpc	r25, r1
     91a:	1c f4       	brge	.+6      	; 0x922 <set_direction+0x3a>
     91c:	00 97       	sbiw	r24, 0x00	; 0
     91e:	41 f0       	breq	.+16     	; 0x930 <set_direction+0x48>
     920:	34 c0       	rjmp	.+104    	; 0x98a <set_direction+0xa2>
     922:	82 30       	cpi	r24, 0x02	; 2
     924:	91 05       	cpc	r25, r1
     926:	d9 f0       	breq	.+54     	; 0x95e <set_direction+0x76>
     928:	83 30       	cpi	r24, 0x03	; 3
     92a:	91 05       	cpc	r25, r1
     92c:	19 f1       	breq	.+70     	; 0x974 <set_direction+0x8c>
     92e:	2d c0       	rjmp	.+90     	; 0x98a <set_direction+0xa2>
	{
		case(LEFT):	
			PORTD_OUT = BOT_LEFT;
     930:	84 e6       	ldi	r24, 0x64	; 100
     932:	96 e0       	ldi	r25, 0x06	; 6
     934:	2a e0       	ldi	r18, 0x0A	; 10
     936:	fc 01       	movw	r30, r24
     938:	20 83       	st	Z, r18
			motorControl.direction = LEFT;
     93a:	80 91 34 20 	lds	r24, 0x2034
     93e:	8f 7c       	andi	r24, 0xCF	; 207
     940:	80 93 34 20 	sts	0x2034, r24
		
			break;
     944:	22 c0       	rjmp	.+68     	; 0x98a <set_direction+0xa2>
		case(FORWARD):
			PORTD_OUT = BOT_FORWARD;
     946:	84 e6       	ldi	r24, 0x64	; 100
     948:	96 e0       	ldi	r25, 0x06	; 6
     94a:	2f e0       	ldi	r18, 0x0F	; 15
     94c:	fc 01       	movw	r30, r24
     94e:	20 83       	st	Z, r18
			motorControl.direction = FORWARD;
     950:	80 91 34 20 	lds	r24, 0x2034
     954:	8f 7c       	andi	r24, 0xCF	; 207
     956:	80 61       	ori	r24, 0x10	; 16
     958:	80 93 34 20 	sts	0x2034, r24
		
			break;
     95c:	16 c0       	rjmp	.+44     	; 0x98a <set_direction+0xa2>
		case(BACKWARD):
			PORTD_OUT = BOT_BACK;
     95e:	84 e6       	ldi	r24, 0x64	; 100
     960:	96 e0       	ldi	r25, 0x06	; 6
     962:	fc 01       	movw	r30, r24
     964:	10 82       	st	Z, r1
			motorControl.direction = BACKWARD;
     966:	80 91 34 20 	lds	r24, 0x2034
     96a:	8f 7c       	andi	r24, 0xCF	; 207
     96c:	80 62       	ori	r24, 0x20	; 32
     96e:	80 93 34 20 	sts	0x2034, r24
		
			break;
     972:	0b c0       	rjmp	.+22     	; 0x98a <set_direction+0xa2>
		case(RIGHT):
			PORTD_OUT = BOT_RIGHT;
     974:	84 e6       	ldi	r24, 0x64	; 100
     976:	96 e0       	ldi	r25, 0x06	; 6
     978:	25 e0       	ldi	r18, 0x05	; 5
     97a:	fc 01       	movw	r30, r24
     97c:	20 83       	st	Z, r18
			motorControl.direction = RIGHT;
     97e:	80 91 34 20 	lds	r24, 0x2034
     982:	80 63       	ori	r24, 0x30	; 48
     984:	80 93 34 20 	sts	0x2034, r24
		
			break;
     988:	00 00       	nop
			
	}
	
	//ramp back up to previous speed
	set_speed_with_ramp(motorControl.target_speed_ticks);
     98a:	80 91 32 20 	lds	r24, 0x2032
     98e:	90 91 33 20 	lds	r25, 0x2033
     992:	04 d0       	rcall	.+8      	; 0x99c <set_speed_with_ramp>
		
}
     994:	0f 90       	pop	r0
     996:	df 91       	pop	r29
     998:	cf 91       	pop	r28
     99a:	08 95       	ret

0000099c <set_speed_with_ramp>:


void set_speed_with_ramp(uint16_t desired_speed)
{
     99c:	cf 93       	push	r28
     99e:	df 93       	push	r29
     9a0:	00 d0       	rcall	.+0      	; 0x9a2 <set_speed_with_ramp+0x6>
     9a2:	1f 92       	push	r1
     9a4:	cd b7       	in	r28, 0x3d	; 61
     9a6:	de b7       	in	r29, 0x3e	; 62
     9a8:	8b 83       	std	Y+3, r24	; 0x03
     9aa:	9c 83       	std	Y+4, r25	; 0x04
	//ramp down
	if(desired_speed < motorControl.speed_ticks)
     9ac:	20 91 30 20 	lds	r18, 0x2030
     9b0:	30 91 31 20 	lds	r19, 0x2031
     9b4:	8b 81       	ldd	r24, Y+3	; 0x03
     9b6:	9c 81       	ldd	r25, Y+4	; 0x04
     9b8:	82 17       	cp	r24, r18
     9ba:	93 07       	cpc	r25, r19
     9bc:	08 f0       	brcs	.+2      	; 0x9c0 <set_speed_with_ramp+0x24>
     9be:	75 c0       	rjmp	.+234    	; 0xaaa <set_speed_with_ramp+0x10e>
	{
		while(motorControl.speed_ticks > desired_speed)
     9c0:	38 c0       	rjmp	.+112    	; 0xa32 <set_speed_with_ramp+0x96>
		{
			if(motorControl.ramp_semaphore)
     9c2:	80 91 34 20 	lds	r24, 0x2034
     9c6:	80 74       	andi	r24, 0x40	; 64
     9c8:	88 23       	and	r24, r24
     9ca:	99 f1       	breq	.+102    	; 0xa32 <set_speed_with_ramp+0x96>
			{
				motorControl.speed_ticks -= TICK_DELTA_MOTOR;
     9cc:	80 91 30 20 	lds	r24, 0x2030
     9d0:	90 91 31 20 	lds	r25, 0x2031
     9d4:	84 5f       	subi	r24, 0xF4	; 244
     9d6:	91 40       	sbci	r25, 0x01	; 1
     9d8:	80 93 30 20 	sts	0x2030, r24
     9dc:	90 93 31 20 	sts	0x2031, r25
				TCE0_CCA = motorControl.speed_ticks;
     9e0:	88 e2       	ldi	r24, 0x28	; 40
     9e2:	9a e0       	ldi	r25, 0x0A	; 10
     9e4:	20 91 30 20 	lds	r18, 0x2030
     9e8:	30 91 31 20 	lds	r19, 0x2031
     9ec:	fc 01       	movw	r30, r24
     9ee:	20 83       	st	Z, r18
     9f0:	31 83       	std	Z+1, r19	; 0x01
				TCE0_CCB = motorControl.speed_ticks;
     9f2:	8a e2       	ldi	r24, 0x2A	; 42
     9f4:	9a e0       	ldi	r25, 0x0A	; 10
     9f6:	20 91 30 20 	lds	r18, 0x2030
     9fa:	30 91 31 20 	lds	r19, 0x2031
     9fe:	fc 01       	movw	r30, r24
     a00:	20 83       	st	Z, r18
     a02:	31 83       	std	Z+1, r19	; 0x01
				TCE0_CCC = motorControl.speed_ticks;
     a04:	8c e2       	ldi	r24, 0x2C	; 44
     a06:	9a e0       	ldi	r25, 0x0A	; 10
     a08:	20 91 30 20 	lds	r18, 0x2030
     a0c:	30 91 31 20 	lds	r19, 0x2031
     a10:	fc 01       	movw	r30, r24
     a12:	20 83       	st	Z, r18
     a14:	31 83       	std	Z+1, r19	; 0x01
				TCE0_CCD = motorControl.speed_ticks;
     a16:	8e e2       	ldi	r24, 0x2E	; 46
     a18:	9a e0       	ldi	r25, 0x0A	; 10
     a1a:	20 91 30 20 	lds	r18, 0x2030
     a1e:	30 91 31 20 	lds	r19, 0x2031
     a22:	fc 01       	movw	r30, r24
     a24:	20 83       	st	Z, r18
     a26:	31 83       	std	Z+1, r19	; 0x01
				motorControl.ramp_semaphore = 0;
     a28:	80 91 34 20 	lds	r24, 0x2034
     a2c:	8f 7b       	andi	r24, 0xBF	; 191
     a2e:	80 93 34 20 	sts	0x2034, r24
void set_speed_with_ramp(uint16_t desired_speed)
{
	//ramp down
	if(desired_speed < motorControl.speed_ticks)
	{
		while(motorControl.speed_ticks > desired_speed)
     a32:	20 91 30 20 	lds	r18, 0x2030
     a36:	30 91 31 20 	lds	r19, 0x2031
     a3a:	8b 81       	ldd	r24, Y+3	; 0x03
     a3c:	9c 81       	ldd	r25, Y+4	; 0x04
     a3e:	82 17       	cp	r24, r18
     a40:	93 07       	cpc	r25, r19
     a42:	08 f4       	brcc	.+2      	; 0xa46 <set_speed_with_ramp+0xaa>
     a44:	be cf       	rjmp	.-132    	; 0x9c2 <set_speed_with_ramp+0x26>
				motorControl.ramp_semaphore = 0;
			}
			
		}
		//check to make sure we aren't going to go negative
		if(motorControl.speed_ticks < TICK_DELTA_MOTOR)
     a46:	80 91 30 20 	lds	r24, 0x2030
     a4a:	90 91 31 20 	lds	r25, 0x2031
     a4e:	84 3f       	cpi	r24, 0xF4	; 244
     a50:	f1 e0       	ldi	r31, 0x01	; 1
     a52:	9f 07       	cpc	r25, r31
     a54:	08 f0       	brcs	.+2      	; 0xa58 <set_speed_with_ramp+0xbc>
     a56:	1b c1       	rjmp	.+566    	; 0xc8e <set_speed_with_ramp+0x2f2>
		{
			motorControl.speed_ticks = 0;
     a58:	10 92 30 20 	sts	0x2030, r1
     a5c:	10 92 31 20 	sts	0x2031, r1
			TCE0_CCA = motorControl.speed_ticks;
     a60:	88 e2       	ldi	r24, 0x28	; 40
     a62:	9a e0       	ldi	r25, 0x0A	; 10
     a64:	20 91 30 20 	lds	r18, 0x2030
     a68:	30 91 31 20 	lds	r19, 0x2031
     a6c:	fc 01       	movw	r30, r24
     a6e:	20 83       	st	Z, r18
     a70:	31 83       	std	Z+1, r19	; 0x01
			TCE0_CCB = motorControl.speed_ticks;
     a72:	8a e2       	ldi	r24, 0x2A	; 42
     a74:	9a e0       	ldi	r25, 0x0A	; 10
     a76:	20 91 30 20 	lds	r18, 0x2030
     a7a:	30 91 31 20 	lds	r19, 0x2031
     a7e:	fc 01       	movw	r30, r24
     a80:	20 83       	st	Z, r18
     a82:	31 83       	std	Z+1, r19	; 0x01
			TCE0_CCC = motorControl.speed_ticks;
     a84:	8c e2       	ldi	r24, 0x2C	; 44
     a86:	9a e0       	ldi	r25, 0x0A	; 10
     a88:	20 91 30 20 	lds	r18, 0x2030
     a8c:	30 91 31 20 	lds	r19, 0x2031
     a90:	fc 01       	movw	r30, r24
     a92:	20 83       	st	Z, r18
     a94:	31 83       	std	Z+1, r19	; 0x01
			TCE0_CCD = motorControl.speed_ticks;
     a96:	8e e2       	ldi	r24, 0x2E	; 46
     a98:	9a e0       	ldi	r25, 0x0A	; 10
     a9a:	20 91 30 20 	lds	r18, 0x2030
     a9e:	30 91 31 20 	lds	r19, 0x2031
     aa2:	fc 01       	movw	r30, r24
     aa4:	20 83       	st	Z, r18
     aa6:	31 83       	std	Z+1, r19	; 0x01
     aa8:	f2 c0       	rjmp	.+484    	; 0xc8e <set_speed_with_ramp+0x2f2>
	}
	
	//ramp up but do 2 motors at a time, 1 from each H-bridge
	else
	{
		uint16_t speedHolder = motorControl.speed_ticks;
     aaa:	80 91 30 20 	lds	r24, 0x2030
     aae:	90 91 31 20 	lds	r25, 0x2031
     ab2:	89 83       	std	Y+1, r24	; 0x01
     ab4:	9a 83       	std	Y+2, r25	; 0x02
		
		//ramp up LF (CCA) and RR (CCC) first
		while(motorControl.speed_ticks < desired_speed)
     ab6:	47 c0       	rjmp	.+142    	; 0xb46 <set_speed_with_ramp+0x1aa>
		{
			//ramp up to 70% before starting motor to avoid drawing too much current at low speeds
			if(motorControl.speed_ticks < MIN_SPEED_LIMIT_TICKS)
     ab8:	80 91 30 20 	lds	r24, 0x2030
     abc:	90 91 31 20 	lds	r25, 0x2031
     ac0:	88 35       	cpi	r24, 0x58	; 88
     ac2:	fb e1       	ldi	r31, 0x1B	; 27
     ac4:	9f 07       	cpc	r25, r31
     ac6:	c8 f4       	brcc	.+50     	; 0xafa <set_speed_with_ramp+0x15e>
			{
				motorControl.speed_ticks = MIN_SPEED_LIMIT_TICKS;
     ac8:	88 e5       	ldi	r24, 0x58	; 88
     aca:	9b e1       	ldi	r25, 0x1B	; 27
     acc:	80 93 30 20 	sts	0x2030, r24
     ad0:	90 93 31 20 	sts	0x2031, r25
				TCE0_CCA = motorControl.speed_ticks;
     ad4:	88 e2       	ldi	r24, 0x28	; 40
     ad6:	9a e0       	ldi	r25, 0x0A	; 10
     ad8:	20 91 30 20 	lds	r18, 0x2030
     adc:	30 91 31 20 	lds	r19, 0x2031
     ae0:	fc 01       	movw	r30, r24
     ae2:	20 83       	st	Z, r18
     ae4:	31 83       	std	Z+1, r19	; 0x01
				TCE0_CCC = motorControl.speed_ticks;
     ae6:	8c e2       	ldi	r24, 0x2C	; 44
     ae8:	9a e0       	ldi	r25, 0x0A	; 10
     aea:	20 91 30 20 	lds	r18, 0x2030
     aee:	30 91 31 20 	lds	r19, 0x2031
     af2:	fc 01       	movw	r30, r24
     af4:	20 83       	st	Z, r18
     af6:	31 83       	std	Z+1, r19	; 0x01
     af8:	26 c0       	rjmp	.+76     	; 0xb46 <set_speed_with_ramp+0x1aa>
			}
			
			else if(motorControl.ramp_semaphore)
     afa:	80 91 34 20 	lds	r24, 0x2034
     afe:	80 74       	andi	r24, 0x40	; 64
     b00:	88 23       	and	r24, r24
     b02:	09 f1       	breq	.+66     	; 0xb46 <set_speed_with_ramp+0x1aa>
			{
				motorControl.speed_ticks += TICK_DELTA_MOTOR;
     b04:	80 91 30 20 	lds	r24, 0x2030
     b08:	90 91 31 20 	lds	r25, 0x2031
     b0c:	8c 50       	subi	r24, 0x0C	; 12
     b0e:	9e 4f       	sbci	r25, 0xFE	; 254
     b10:	80 93 30 20 	sts	0x2030, r24
     b14:	90 93 31 20 	sts	0x2031, r25
				TCE0_CCA = motorControl.speed_ticks;
     b18:	88 e2       	ldi	r24, 0x28	; 40
     b1a:	9a e0       	ldi	r25, 0x0A	; 10
     b1c:	20 91 30 20 	lds	r18, 0x2030
     b20:	30 91 31 20 	lds	r19, 0x2031
     b24:	fc 01       	movw	r30, r24
     b26:	20 83       	st	Z, r18
     b28:	31 83       	std	Z+1, r19	; 0x01
				TCE0_CCC = motorControl.speed_ticks;
     b2a:	8c e2       	ldi	r24, 0x2C	; 44
     b2c:	9a e0       	ldi	r25, 0x0A	; 10
     b2e:	20 91 30 20 	lds	r18, 0x2030
     b32:	30 91 31 20 	lds	r19, 0x2031
     b36:	fc 01       	movw	r30, r24
     b38:	20 83       	st	Z, r18
     b3a:	31 83       	std	Z+1, r19	; 0x01
				motorControl.ramp_semaphore = 0;
     b3c:	80 91 34 20 	lds	r24, 0x2034
     b40:	8f 7b       	andi	r24, 0xBF	; 191
     b42:	80 93 34 20 	sts	0x2034, r24
	else
	{
		uint16_t speedHolder = motorControl.speed_ticks;
		
		//ramp up LF (CCA) and RR (CCC) first
		while(motorControl.speed_ticks < desired_speed)
     b46:	20 91 30 20 	lds	r18, 0x2030
     b4a:	30 91 31 20 	lds	r19, 0x2031
     b4e:	8b 81       	ldd	r24, Y+3	; 0x03
     b50:	9c 81       	ldd	r25, Y+4	; 0x04
     b52:	28 17       	cp	r18, r24
     b54:	39 07       	cpc	r19, r25
     b56:	08 f4       	brcc	.+2      	; 0xb5a <set_speed_with_ramp+0x1be>
     b58:	af cf       	rjmp	.-162    	; 0xab8 <set_speed_with_ramp+0x11c>
				motorControl.ramp_semaphore = 0;
			}
			
		}
		//check to make sure we didn't go past the limit
		if(motorControl.speed_ticks > desired_speed)
     b5a:	20 91 30 20 	lds	r18, 0x2030
     b5e:	30 91 31 20 	lds	r19, 0x2031
     b62:	8b 81       	ldd	r24, Y+3	; 0x03
     b64:	9c 81       	ldd	r25, Y+4	; 0x04
     b66:	82 17       	cp	r24, r18
     b68:	93 07       	cpc	r25, r19
     b6a:	c0 f4       	brcc	.+48     	; 0xb9c <set_speed_with_ramp+0x200>
		{
			motorControl.speed_ticks = desired_speed;
     b6c:	8b 81       	ldd	r24, Y+3	; 0x03
     b6e:	9c 81       	ldd	r25, Y+4	; 0x04
     b70:	80 93 30 20 	sts	0x2030, r24
     b74:	90 93 31 20 	sts	0x2031, r25
			TCE0_CCA = motorControl.speed_ticks;
     b78:	88 e2       	ldi	r24, 0x28	; 40
     b7a:	9a e0       	ldi	r25, 0x0A	; 10
     b7c:	20 91 30 20 	lds	r18, 0x2030
     b80:	30 91 31 20 	lds	r19, 0x2031
     b84:	fc 01       	movw	r30, r24
     b86:	20 83       	st	Z, r18
     b88:	31 83       	std	Z+1, r19	; 0x01
			TCE0_CCC = motorControl.speed_ticks;
     b8a:	8c e2       	ldi	r24, 0x2C	; 44
     b8c:	9a e0       	ldi	r25, 0x0A	; 10
     b8e:	20 91 30 20 	lds	r18, 0x2030
     b92:	30 91 31 20 	lds	r19, 0x2031
     b96:	fc 01       	movw	r30, r24
     b98:	20 83       	st	Z, r18
     b9a:	31 83       	std	Z+1, r19	; 0x01
		}		
		
		//reset motorControl
		motorControl.speed_ticks = speedHolder;
     b9c:	89 81       	ldd	r24, Y+1	; 0x01
     b9e:	9a 81       	ldd	r25, Y+2	; 0x02
     ba0:	80 93 30 20 	sts	0x2030, r24
     ba4:	90 93 31 20 	sts	0x2031, r25
		
		//ramp up RF (CCD) and LR (CCB) second
		while(motorControl.speed_ticks < desired_speed)
     ba8:	47 c0       	rjmp	.+142    	; 0xc38 <set_speed_with_ramp+0x29c>
		{
			//ramp up to 70% before starting motor to avoid drawing too much current
			if(motorControl.speed_ticks < MIN_SPEED_LIMIT_TICKS)
     baa:	80 91 30 20 	lds	r24, 0x2030
     bae:	90 91 31 20 	lds	r25, 0x2031
     bb2:	88 35       	cpi	r24, 0x58	; 88
     bb4:	fb e1       	ldi	r31, 0x1B	; 27
     bb6:	9f 07       	cpc	r25, r31
     bb8:	c8 f4       	brcc	.+50     	; 0xbec <set_speed_with_ramp+0x250>
			{
				motorControl.speed_ticks = MIN_SPEED_LIMIT_TICKS;
     bba:	88 e5       	ldi	r24, 0x58	; 88
     bbc:	9b e1       	ldi	r25, 0x1B	; 27
     bbe:	80 93 30 20 	sts	0x2030, r24
     bc2:	90 93 31 20 	sts	0x2031, r25
				TCE0_CCB = motorControl.speed_ticks;
     bc6:	8a e2       	ldi	r24, 0x2A	; 42
     bc8:	9a e0       	ldi	r25, 0x0A	; 10
     bca:	20 91 30 20 	lds	r18, 0x2030
     bce:	30 91 31 20 	lds	r19, 0x2031
     bd2:	fc 01       	movw	r30, r24
     bd4:	20 83       	st	Z, r18
     bd6:	31 83       	std	Z+1, r19	; 0x01
				TCE0_CCD = motorControl.speed_ticks;
     bd8:	8e e2       	ldi	r24, 0x2E	; 46
     bda:	9a e0       	ldi	r25, 0x0A	; 10
     bdc:	20 91 30 20 	lds	r18, 0x2030
     be0:	30 91 31 20 	lds	r19, 0x2031
     be4:	fc 01       	movw	r30, r24
     be6:	20 83       	st	Z, r18
     be8:	31 83       	std	Z+1, r19	; 0x01
     bea:	26 c0       	rjmp	.+76     	; 0xc38 <set_speed_with_ramp+0x29c>
			}
			
			else if(motorControl.ramp_semaphore)
     bec:	80 91 34 20 	lds	r24, 0x2034
     bf0:	80 74       	andi	r24, 0x40	; 64
     bf2:	88 23       	and	r24, r24
     bf4:	09 f1       	breq	.+66     	; 0xc38 <set_speed_with_ramp+0x29c>
			{
				motorControl.speed_ticks += TICK_DELTA_MOTOR;
     bf6:	80 91 30 20 	lds	r24, 0x2030
     bfa:	90 91 31 20 	lds	r25, 0x2031
     bfe:	8c 50       	subi	r24, 0x0C	; 12
     c00:	9e 4f       	sbci	r25, 0xFE	; 254
     c02:	80 93 30 20 	sts	0x2030, r24
     c06:	90 93 31 20 	sts	0x2031, r25
				TCE0_CCB = motorControl.speed_ticks;
     c0a:	8a e2       	ldi	r24, 0x2A	; 42
     c0c:	9a e0       	ldi	r25, 0x0A	; 10
     c0e:	20 91 30 20 	lds	r18, 0x2030
     c12:	30 91 31 20 	lds	r19, 0x2031
     c16:	fc 01       	movw	r30, r24
     c18:	20 83       	st	Z, r18
     c1a:	31 83       	std	Z+1, r19	; 0x01
				TCE0_CCD = motorControl.speed_ticks;
     c1c:	8e e2       	ldi	r24, 0x2E	; 46
     c1e:	9a e0       	ldi	r25, 0x0A	; 10
     c20:	20 91 30 20 	lds	r18, 0x2030
     c24:	30 91 31 20 	lds	r19, 0x2031
     c28:	fc 01       	movw	r30, r24
     c2a:	20 83       	st	Z, r18
     c2c:	31 83       	std	Z+1, r19	; 0x01
				motorControl.ramp_semaphore = 0;
     c2e:	80 91 34 20 	lds	r24, 0x2034
     c32:	8f 7b       	andi	r24, 0xBF	; 191
     c34:	80 93 34 20 	sts	0x2034, r24
		
		//reset motorControl
		motorControl.speed_ticks = speedHolder;
		
		//ramp up RF (CCD) and LR (CCB) second
		while(motorControl.speed_ticks < desired_speed)
     c38:	20 91 30 20 	lds	r18, 0x2030
     c3c:	30 91 31 20 	lds	r19, 0x2031
     c40:	8b 81       	ldd	r24, Y+3	; 0x03
     c42:	9c 81       	ldd	r25, Y+4	; 0x04
     c44:	28 17       	cp	r18, r24
     c46:	39 07       	cpc	r19, r25
     c48:	08 f4       	brcc	.+2      	; 0xc4c <set_speed_with_ramp+0x2b0>
     c4a:	af cf       	rjmp	.-162    	; 0xbaa <set_speed_with_ramp+0x20e>
			}
			
		}
		
		//check to make sure we didn't go past the limit
		if(motorControl.speed_ticks > desired_speed)
     c4c:	20 91 30 20 	lds	r18, 0x2030
     c50:	30 91 31 20 	lds	r19, 0x2031
     c54:	8b 81       	ldd	r24, Y+3	; 0x03
     c56:	9c 81       	ldd	r25, Y+4	; 0x04
     c58:	82 17       	cp	r24, r18
     c5a:	93 07       	cpc	r25, r19
     c5c:	c0 f4       	brcc	.+48     	; 0xc8e <set_speed_with_ramp+0x2f2>
		{
			motorControl.speed_ticks = desired_speed;
     c5e:	8b 81       	ldd	r24, Y+3	; 0x03
     c60:	9c 81       	ldd	r25, Y+4	; 0x04
     c62:	80 93 30 20 	sts	0x2030, r24
     c66:	90 93 31 20 	sts	0x2031, r25
			TCE0_CCB = motorControl.speed_ticks;
     c6a:	8a e2       	ldi	r24, 0x2A	; 42
     c6c:	9a e0       	ldi	r25, 0x0A	; 10
     c6e:	20 91 30 20 	lds	r18, 0x2030
     c72:	30 91 31 20 	lds	r19, 0x2031
     c76:	fc 01       	movw	r30, r24
     c78:	20 83       	st	Z, r18
     c7a:	31 83       	std	Z+1, r19	; 0x01
			TCE0_CCD = motorControl.speed_ticks;
     c7c:	8e e2       	ldi	r24, 0x2E	; 46
     c7e:	9a e0       	ldi	r25, 0x0A	; 10
     c80:	20 91 30 20 	lds	r18, 0x2030
     c84:	30 91 31 20 	lds	r19, 0x2031
     c88:	fc 01       	movw	r30, r24
     c8a:	20 83       	st	Z, r18
     c8c:	31 83       	std	Z+1, r19	; 0x01
		}
		
	}
	
}
     c8e:	24 96       	adiw	r28, 0x04	; 4
     c90:	cd bf       	out	0x3d, r28	; 61
     c92:	de bf       	out	0x3e, r29	; 62
     c94:	df 91       	pop	r29
     c96:	cf 91       	pop	r28
     c98:	08 95       	ret

00000c9a <initialize_semaphores>:

struct semaphore_t;
extern struct semaphore_t semaphores;

void initialize_semaphores()
{
     c9a:	cf 93       	push	r28
     c9c:	df 93       	push	r29
     c9e:	cd b7       	in	r28, 0x3d	; 61
     ca0:	de b7       	in	r29, 0x3e	; 62
	semaphores.left_meas_done = 0;
     ca2:	80 91 2f 20 	lds	r24, 0x202F
     ca6:	8d 7f       	andi	r24, 0xFD	; 253
     ca8:	80 93 2f 20 	sts	0x202F, r24
	semaphores.right_meas_done = 0;
     cac:	80 91 2f 20 	lds	r24, 0x202F
     cb0:	8b 7f       	andi	r24, 0xFB	; 251
     cb2:	80 93 2f 20 	sts	0x202F, r24
	semaphores.front_meas_done = 0;
     cb6:	80 91 2f 20 	lds	r24, 0x202F
     cba:	87 7f       	andi	r24, 0xF7	; 247
     cbc:	80 93 2f 20 	sts	0x202F, r24
	semaphores.back_meas_done = 0;
     cc0:	80 91 2f 20 	lds	r24, 0x202F
     cc4:	8f 7e       	andi	r24, 0xEF	; 239
     cc6:	80 93 2f 20 	sts	0x202F, r24
	
	semaphores.change_speed = 0;
     cca:	80 91 2f 20 	lds	r24, 0x202F
     cce:	8f 7d       	andi	r24, 0xDF	; 223
     cd0:	80 93 2f 20 	sts	0x202F, r24
	semaphores.change_direction = 0;
     cd4:	80 91 2f 20 	lds	r24, 0x202F
     cd8:	8f 7b       	andi	r24, 0xBF	; 191
     cda:	80 93 2f 20 	sts	0x202F, r24
	
}
     cde:	df 91       	pop	r29
     ce0:	cf 91       	pop	r28
     ce2:	08 95       	ret

00000ce4 <clear_meas_sems>:

void clear_meas_sems()
{
     ce4:	cf 93       	push	r28
     ce6:	df 93       	push	r29
     ce8:	cd b7       	in	r28, 0x3d	; 61
     cea:	de b7       	in	r29, 0x3e	; 62
	semaphores.left_meas_done = 0;
     cec:	80 91 2f 20 	lds	r24, 0x202F
     cf0:	8d 7f       	andi	r24, 0xFD	; 253
     cf2:	80 93 2f 20 	sts	0x202F, r24
	semaphores.right_meas_done = 0;
     cf6:	80 91 2f 20 	lds	r24, 0x202F
     cfa:	8b 7f       	andi	r24, 0xFB	; 251
     cfc:	80 93 2f 20 	sts	0x202F, r24
	semaphores.front_meas_done = 0;
     d00:	80 91 2f 20 	lds	r24, 0x202F
     d04:	87 7f       	andi	r24, 0xF7	; 247
     d06:	80 93 2f 20 	sts	0x202F, r24
	semaphores.back_meas_done = 0;
     d0a:	80 91 2f 20 	lds	r24, 0x202F
     d0e:	8f 7e       	andi	r24, 0xEF	; 239
     d10:	80 93 2f 20 	sts	0x202F, r24
	
	
}
     d14:	df 91       	pop	r29
     d16:	cf 91       	pop	r28
     d18:	08 95       	ret

00000d1a <set_Clock_32MHz>:
void determine_threat_order();
void move_away_from_threat();


void set_Clock_32MHz()
{
     d1a:	cf 93       	push	r28
     d1c:	df 93       	push	r29
     d1e:	cd b7       	in	r28, 0x3d	; 61
     d20:	de b7       	in	r29, 0x3e	; 62
	SetSystemClock(CLK_SCLKSEL_RC32M_gc, CLK_PSADIV_1_gc, CLK_PSBCDIV_1_1_gc);
     d22:	40 e0       	ldi	r20, 0x00	; 0
     d24:	50 e0       	ldi	r21, 0x00	; 0
     d26:	60 e0       	ldi	r22, 0x00	; 0
     d28:	70 e0       	ldi	r23, 0x00	; 0
     d2a:	81 e0       	ldi	r24, 0x01	; 1
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	a6 d3       	rcall	.+1868   	; 0x147c <SetSystemClock>
	GetSystemClocks(&sClk, &pClk);
     d30:	69 e3       	ldi	r22, 0x39	; 57
     d32:	70 e2       	ldi	r23, 0x20	; 32
     d34:	85 e3       	ldi	r24, 0x35	; 53
     d36:	90 e2       	ldi	r25, 0x20	; 32
     d38:	d6 d3       	rcall	.+1964   	; 0x14e6 <GetSystemClocks>
}
     d3a:	df 91       	pop	r29
     d3c:	cf 91       	pop	r28
     d3e:	08 95       	ret

00000d40 <determine_threat_order>:

void determine_threat_order()
{
     d40:	cf 93       	push	r28
     d42:	df 93       	push	r29
     d44:	00 d0       	rcall	.+0      	; 0xd46 <determine_threat_order+0x6>
     d46:	00 d0       	rcall	.+0      	; 0xd48 <determine_threat_order+0x8>
     d48:	cd b7       	in	r28, 0x3d	; 61
     d4a:	de b7       	in	r29, 0x3e	; 62
	uint16_t closestThreat_meas = 0;
     d4c:	19 82       	std	Y+1, r1	; 0x01
     d4e:	1a 82       	std	Y+2, r1	; 0x02
	uint16_t furthestThreat_meas = 0xFFFF;
     d50:	8f ef       	ldi	r24, 0xFF	; 255
     d52:	9f ef       	ldi	r25, 0xFF	; 255
     d54:	8b 83       	std	Y+3, r24	; 0x03
     d56:	9c 83       	std	Y+4, r25	; 0x04
	
	//check each direction to see which distance is closest or furthest
	//note that threat distance is the value returned by the ADC from infrared sensors, high = closer,  low = further away
	for(int i = LEFT; i <= RIGHT; i++)
     d58:	1d 82       	std	Y+5, r1	; 0x05
     d5a:	1e 82       	std	Y+6, r1	; 0x06
     d5c:	3d c0       	rjmp	.+122    	; 0xdd8 <determine_threat_order+0x98>
	{
		//closest threat is used to decide what to move away from
		if (threat_distance[i] > closestThreat_meas )
     d5e:	8d 81       	ldd	r24, Y+5	; 0x05
     d60:	9e 81       	ldd	r25, Y+6	; 0x06
     d62:	88 0f       	add	r24, r24
     d64:	99 1f       	adc	r25, r25
     d66:	80 50       	subi	r24, 0x00	; 0
     d68:	90 4e       	sbci	r25, 0xE0	; 224
     d6a:	fc 01       	movw	r30, r24
     d6c:	20 81       	ld	r18, Z
     d6e:	31 81       	ldd	r19, Z+1	; 0x01
     d70:	89 81       	ldd	r24, Y+1	; 0x01
     d72:	9a 81       	ldd	r25, Y+2	; 0x02
     d74:	82 17       	cp	r24, r18
     d76:	93 07       	cpc	r25, r19
     d78:	70 f4       	brcc	.+28     	; 0xd96 <determine_threat_order+0x56>
		{
			closestThreat = (uint8_t)i;
     d7a:	8d 81       	ldd	r24, Y+5	; 0x05
     d7c:	80 93 08 20 	sts	0x2008, r24
			closestThreat_meas = threat_distance[i];
     d80:	8d 81       	ldd	r24, Y+5	; 0x05
     d82:	9e 81       	ldd	r25, Y+6	; 0x06
     d84:	88 0f       	add	r24, r24
     d86:	99 1f       	adc	r25, r25
     d88:	80 50       	subi	r24, 0x00	; 0
     d8a:	90 4e       	sbci	r25, 0xE0	; 224
     d8c:	fc 01       	movw	r30, r24
     d8e:	80 81       	ld	r24, Z
     d90:	91 81       	ldd	r25, Z+1	; 0x01
     d92:	89 83       	std	Y+1, r24	; 0x01
     d94:	9a 83       	std	Y+2, r25	; 0x02
		}
		
		//furthest threat used to decide which direction to go
		if (threat_distance[i] < furthestThreat_meas )
     d96:	8d 81       	ldd	r24, Y+5	; 0x05
     d98:	9e 81       	ldd	r25, Y+6	; 0x06
     d9a:	88 0f       	add	r24, r24
     d9c:	99 1f       	adc	r25, r25
     d9e:	80 50       	subi	r24, 0x00	; 0
     da0:	90 4e       	sbci	r25, 0xE0	; 224
     da2:	fc 01       	movw	r30, r24
     da4:	20 81       	ld	r18, Z
     da6:	31 81       	ldd	r19, Z+1	; 0x01
     da8:	8b 81       	ldd	r24, Y+3	; 0x03
     daa:	9c 81       	ldd	r25, Y+4	; 0x04
     dac:	28 17       	cp	r18, r24
     dae:	39 07       	cpc	r19, r25
     db0:	70 f4       	brcc	.+28     	; 0xdce <determine_threat_order+0x8e>
		{
			furthestThreat = (uint8_t)i;
     db2:	8d 81       	ldd	r24, Y+5	; 0x05
     db4:	80 93 09 20 	sts	0x2009, r24
			furthestThreat_meas = threat_distance[i];
     db8:	8d 81       	ldd	r24, Y+5	; 0x05
     dba:	9e 81       	ldd	r25, Y+6	; 0x06
     dbc:	88 0f       	add	r24, r24
     dbe:	99 1f       	adc	r25, r25
     dc0:	80 50       	subi	r24, 0x00	; 0
     dc2:	90 4e       	sbci	r25, 0xE0	; 224
     dc4:	fc 01       	movw	r30, r24
     dc6:	80 81       	ld	r24, Z
     dc8:	91 81       	ldd	r25, Z+1	; 0x01
     dca:	8b 83       	std	Y+3, r24	; 0x03
     dcc:	9c 83       	std	Y+4, r25	; 0x04
	uint16_t closestThreat_meas = 0;
	uint16_t furthestThreat_meas = 0xFFFF;
	
	//check each direction to see which distance is closest or furthest
	//note that threat distance is the value returned by the ADC from infrared sensors, high = closer,  low = further away
	for(int i = LEFT; i <= RIGHT; i++)
     dce:	8d 81       	ldd	r24, Y+5	; 0x05
     dd0:	9e 81       	ldd	r25, Y+6	; 0x06
     dd2:	01 96       	adiw	r24, 0x01	; 1
     dd4:	8d 83       	std	Y+5, r24	; 0x05
     dd6:	9e 83       	std	Y+6, r25	; 0x06
     dd8:	8d 81       	ldd	r24, Y+5	; 0x05
     dda:	9e 81       	ldd	r25, Y+6	; 0x06
     ddc:	84 30       	cpi	r24, 0x04	; 4
     dde:	91 05       	cpc	r25, r1
     de0:	0c f4       	brge	.+2      	; 0xde4 <determine_threat_order+0xa4>
     de2:	bd cf       	rjmp	.-134    	; 0xd5e <determine_threat_order+0x1e>
		}
		
	}
	
	//debug
	LED_PORT.OUT = closestThreat;
     de4:	80 ee       	ldi	r24, 0xE0	; 224
     de6:	96 e0       	ldi	r25, 0x06	; 6
     de8:	20 91 08 20 	lds	r18, 0x2008
     dec:	fc 01       	movw	r30, r24
     dee:	24 83       	std	Z+4, r18	; 0x04
		
}
     df0:	26 96       	adiw	r28, 0x06	; 6
     df2:	cd bf       	out	0x3d, r28	; 61
     df4:	de bf       	out	0x3e, r29	; 62
     df6:	df 91       	pop	r29
     df8:	cf 91       	pop	r28
     dfa:	08 95       	ret

00000dfc <move_away_from_threat>:

void move_away_from_threat()
{
     dfc:	cf 93       	push	r28
     dfe:	df 93       	push	r29
     e00:	1f 92       	push	r1
     e02:	1f 92       	push	r1
     e04:	cd b7       	in	r28, 0x3d	; 61
     e06:	de b7       	in	r29, 0x3e	; 62
	//check each direction to see which distance is furthest and move towards it
	for(int i = LEFT; i <= RIGHT; i++)
     e08:	19 82       	std	Y+1, r1	; 0x01
     e0a:	1a 82       	std	Y+2, r1	; 0x02
     e0c:	35 c0       	rjmp	.+106    	; 0xe78 <move_away_from_threat+0x7c>
	{
		if (i == furthestThreat)
     e0e:	80 91 09 20 	lds	r24, 0x2009
     e12:	28 2f       	mov	r18, r24
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	89 81       	ldd	r24, Y+1	; 0x01
     e18:	9a 81       	ldd	r25, Y+2	; 0x02
     e1a:	28 17       	cp	r18, r24
     e1c:	39 07       	cpc	r19, r25
     e1e:	39 f5       	brne	.+78     	; 0xe6e <move_away_from_threat+0x72>
		{
			//make sure bot is moving away from something close, otherwise just let it sit and wait
			if(threat_distance[closestThreat] > MIN_INFRARED_THREAT)
     e20:	80 91 08 20 	lds	r24, 0x2008
     e24:	88 2f       	mov	r24, r24
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	88 0f       	add	r24, r24
     e2a:	99 1f       	adc	r25, r25
     e2c:	80 50       	subi	r24, 0x00	; 0
     e2e:	90 4e       	sbci	r25, 0xE0	; 224
     e30:	fc 01       	movw	r30, r24
     e32:	80 81       	ld	r24, Z
     e34:	91 81       	ldd	r25, Z+1	; 0x01
     e36:	81 39       	cpi	r24, 0x91	; 145
     e38:	f1 e0       	ldi	r31, 0x01	; 1
     e3a:	9f 07       	cpc	r25, r31
     e3c:	a8 f0       	brcs	.+42     	; 0xe68 <move_away_from_threat+0x6c>
			{
				if (motorControl.direction != furthestThreat)
     e3e:	80 91 34 20 	lds	r24, 0x2034
     e42:	82 95       	swap	r24
     e44:	8f 70       	andi	r24, 0x0F	; 15
     e46:	83 70       	andi	r24, 0x03	; 3
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	80 91 09 20 	lds	r24, 0x2009
     e50:	88 2f       	mov	r24, r24
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	28 17       	cp	r18, r24
     e56:	39 07       	cpc	r19, r25
     e58:	51 f0       	breq	.+20     	; 0xe6e <move_away_from_threat+0x72>
				{
					set_direction(furthestThreat);
     e5a:	80 91 09 20 	lds	r24, 0x2009
     e5e:	44 dd       	rcall	.-1400   	; 0x8e8 <set_direction>
					set_speed_with_ramp(MOTOR_FAST_TICKS);
     e60:	80 e4       	ldi	r24, 0x40	; 64
     e62:	9f e1       	ldi	r25, 0x1F	; 31
     e64:	9b dd       	rcall	.-1226   	; 0x99c <set_speed_with_ramp>
     e66:	03 c0       	rjmp	.+6      	; 0xe6e <move_away_from_threat+0x72>
				
			}
			else
			{
				//there is no threat within minimum threshold so just let the robot sit and wait
				set_speed_with_ramp(0);
     e68:	80 e0       	ldi	r24, 0x00	; 0
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	97 dd       	rcall	.-1234   	; 0x99c <set_speed_with_ramp>
}

void move_away_from_threat()
{
	//check each direction to see which distance is furthest and move towards it
	for(int i = LEFT; i <= RIGHT; i++)
     e6e:	89 81       	ldd	r24, Y+1	; 0x01
     e70:	9a 81       	ldd	r25, Y+2	; 0x02
     e72:	01 96       	adiw	r24, 0x01	; 1
     e74:	89 83       	std	Y+1, r24	; 0x01
     e76:	9a 83       	std	Y+2, r25	; 0x02
     e78:	89 81       	ldd	r24, Y+1	; 0x01
     e7a:	9a 81       	ldd	r25, Y+2	; 0x02
     e7c:	84 30       	cpi	r24, 0x04	; 4
     e7e:	91 05       	cpc	r25, r1
     e80:	34 f2       	brlt	.-116    	; 0xe0e <move_away_from_threat+0x12>
			
		}
		
	}

}
     e82:	0f 90       	pop	r0
     e84:	0f 90       	pop	r0
     e86:	df 91       	pop	r29
     e88:	cf 91       	pop	r28
     e8a:	08 95       	ret

00000e8c <main>:


int main(void)
{
     e8c:	cf 93       	push	r28
     e8e:	df 93       	push	r29
     e90:	cd b7       	in	r28, 0x3d	; 61
     e92:	de b7       	in	r29, 0x3e	; 62
	
	set_Clock_32MHz();
     e94:	42 df       	rcall	.-380    	; 0xd1a <set_Clock_32MHz>
	initialize_semaphores();
     e96:	01 df       	rcall	.-510    	; 0xc9a <initialize_semaphores>
	initialize_motorControl();
     e98:	87 dc       	rcall	.-1778   	; 0x7a8 <initialize_motorControl>
	initialize_threat_distances();
     e9a:	a2 d0       	rcall	.+324    	; 0xfe0 <initialize_threat_distances>
	reset_infSens();
     e9c:	cb d2       	rcall	.+1430   	; 0x1434 <reset_infSens>
	
	//clear interrupts
	cli();
     e9e:	f8 94       	cli

	setup_timer_D1();			//D1 is used to control the timing for infrared sensor measurements
     ea0:	48 d0       	rcall	.+144    	; 0xf32 <setup_timer_D1>
	setup_gpio();				//declares polarity for gpio ports
     ea2:	6b db       	rcall	.-2346   	; 0x57a <setup_gpio>
	setup_ADCB();				//sets up pins 0-3 for use with infrared sensors
     ea4:	bf d9       	rcall	.-3202   	; 0x224 <setup_ADCB>
	setup_E0_motorControl();	//E0 is used as PWM for controlling the motors
     ea6:	ae dc       	rcall	.-1700   	; 0x804 <setup_E0_motorControl>
	setup_E1_motorRamp();		//E1 is the timer that is used for ramping up/down the pulse width in E0
     ea8:	de dc       	rcall	.-1604   	; 0x866 <setup_E1_motorRamp>
	setup_btn_interrupt();		//sets up interrupts for buttons
     eaa:	85 db       	rcall	.-2294   	; 0x5b6 <setup_btn_interrupt>

	
	//enable low, med, and high level interrupts
	PMIC_CTRL = PMIC_HILVLEN_bm |PMIC_MEDLVLEN_bm | PMIC_LOLVLEN_bm;
     eac:	82 ea       	ldi	r24, 0xA2	; 162
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	27 e0       	ldi	r18, 0x07	; 7
     eb2:	fc 01       	movw	r30, r24
     eb4:	20 83       	st	Z, r18
	
	//turn interrupts back on
	sei();
     eb6:	78 94       	sei
	
	//set motors to 0 ticks to start
	set_speed_with_ramp(0);
     eb8:	80 e0       	ldi	r24, 0x00	; 0
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	6f dd       	rcall	.-1314   	; 0x99c <set_speed_with_ramp>

	while(1)
	{
		//check to see if all measurements are done 
		if(semaphores.left_meas_done && semaphores.back_meas_done && semaphores.front_meas_done && semaphores.right_meas_done)
     ebe:	80 91 2f 20 	lds	r24, 0x202F
     ec2:	82 70       	andi	r24, 0x02	; 2
     ec4:	88 23       	and	r24, r24
     ec6:	a1 f0       	breq	.+40     	; 0xef0 <main+0x64>
     ec8:	80 91 2f 20 	lds	r24, 0x202F
     ecc:	80 71       	andi	r24, 0x10	; 16
     ece:	88 23       	and	r24, r24
     ed0:	79 f0       	breq	.+30     	; 0xef0 <main+0x64>
     ed2:	80 91 2f 20 	lds	r24, 0x202F
     ed6:	88 70       	andi	r24, 0x08	; 8
     ed8:	88 23       	and	r24, r24
     eda:	51 f0       	breq	.+20     	; 0xef0 <main+0x64>
     edc:	80 91 2f 20 	lds	r24, 0x202F
     ee0:	84 70       	andi	r24, 0x04	; 4
     ee2:	88 23       	and	r24, r24
     ee4:	29 f0       	breq	.+10     	; 0xef0 <main+0x64>
		{
			//toggle lowest bit on LED's so that we can see the measurement status
			//LED_PORT.OUT ^= 0x01;
			
			//calculate the average distance measured by each infrared sensor
			set_infrSens_avg_to_threatDist();
     ee6:	ce d1       	rcall	.+924    	; 0x1284 <set_infrSens_avg_to_threatDist>
			
			determine_threat_order();
     ee8:	2b df       	rcall	.-426    	; 0xd40 <determine_threat_order>
			
			move_away_from_threat();	
     eea:	88 df       	rcall	.-240    	; 0xdfc <move_away_from_threat>
			
			reset_infSens();
     eec:	a3 d2       	rcall	.+1350   	; 0x1434 <reset_infSens>
			
			clear_meas_sems();
     eee:	fa de       	rcall	.-524    	; 0xce4 <clear_meas_sems>
			
		}	
		
		//check to see if change direction semaphore has been thrown by button press
		if(semaphores.change_direction)
     ef0:	80 91 2f 20 	lds	r24, 0x202F
     ef4:	80 74       	andi	r24, 0x40	; 64
     ef6:	88 23       	and	r24, r24
     ef8:	59 f0       	breq	.+22     	; 0xf10 <main+0x84>
		{
			set_direction(motorControl.direction);
     efa:	80 91 34 20 	lds	r24, 0x2034
     efe:	82 95       	swap	r24
     f00:	8f 70       	andi	r24, 0x0F	; 15
     f02:	83 70       	andi	r24, 0x03	; 3
     f04:	f1 dc       	rcall	.-1566   	; 0x8e8 <set_direction>
			semaphores.change_direction = 0;	
     f06:	80 91 2f 20 	lds	r24, 0x202F
     f0a:	8f 7b       	andi	r24, 0xBF	; 191
     f0c:	80 93 2f 20 	sts	0x202F, r24
		}	
		
		//check to see if change speed semaphore has been thrown by button press
		if(semaphores.change_speed)
     f10:	80 91 2f 20 	lds	r24, 0x202F
     f14:	80 72       	andi	r24, 0x20	; 32
     f16:	88 23       	and	r24, r24
     f18:	59 f0       	breq	.+22     	; 0xf30 <main+0xa4>
		{
			set_speed_with_ramp(motorControl.target_speed_ticks);
     f1a:	80 91 32 20 	lds	r24, 0x2032
     f1e:	90 91 33 20 	lds	r25, 0x2033
     f22:	3c dd       	rcall	.-1416   	; 0x99c <set_speed_with_ramp>
			semaphores.change_speed = 0;
     f24:	80 91 2f 20 	lds	r24, 0x202F
     f28:	8f 7d       	andi	r24, 0xDF	; 223
     f2a:	80 93 2f 20 	sts	0x202F, r24
			
		}
		
	}
     f2e:	c7 cf       	rjmp	.-114    	; 0xebe <main+0x32>
     f30:	c6 cf       	rjmp	.-116    	; 0xebe <main+0x32>

00000f32 <setup_timer_D1>:
{
	TCD0_CCA = (uint16_t)(calculate_sigmoid(threat_distance[LEFT]) * MAX_TICKS_THREAT_LED * 500);
	TCD0_CCB = (uint16_t)(calculate_sigmoid(threat_distance[FRONT]) * MAX_TICKS_THREAT_LED * 500);
	TCD0_CCC = (uint16_t)(calculate_sigmoid(threat_distance[BACK]) * MAX_TICKS_THREAT_LED * 500);
	TCD0_CCD = (uint16_t)(calculate_sigmoid(threat_distance[RIGHT]) * MAX_TICKS_THREAT_LED *  500);
}
     f32:	cf 93       	push	r28
     f34:	df 93       	push	r29
     f36:	cd b7       	in	r28, 0x3d	; 61
     f38:	de b7       	in	r29, 0x3e	; 62
     f3a:	86 e6       	ldi	r24, 0x66	; 102
     f3c:	99 e0       	ldi	r25, 0x09	; 9
     f3e:	20 e5       	ldi	r18, 0x50	; 80
     f40:	33 ec       	ldi	r19, 0xC3	; 195
     f42:	fc 01       	movw	r30, r24
     f44:	20 83       	st	Z, r18
     f46:	31 83       	std	Z+1, r19	; 0x01
     f48:	86 e4       	ldi	r24, 0x46	; 70
     f4a:	99 e0       	ldi	r25, 0x09	; 9
     f4c:	22 e0       	ldi	r18, 0x02	; 2
     f4e:	fc 01       	movw	r30, r24
     f50:	20 83       	st	Z, r18
     f52:	80 e4       	ldi	r24, 0x40	; 64
     f54:	99 e0       	ldi	r25, 0x09	; 9
     f56:	25 e0       	ldi	r18, 0x05	; 5
     f58:	fc 01       	movw	r30, r24
     f5a:	20 83       	st	Z, r18
     f5c:	df 91       	pop	r29
     f5e:	cf 91       	pop	r28
     f60:	08 95       	ret

00000f62 <__vector_83>:
     f62:	1f 92       	push	r1
     f64:	0f 92       	push	r0
     f66:	00 90 3f 00 	lds	r0, 0x003F
     f6a:	0f 92       	push	r0
     f6c:	11 24       	eor	r1, r1
     f6e:	00 90 38 00 	lds	r0, 0x0038
     f72:	0f 92       	push	r0
     f74:	10 92 38 00 	sts	0x0038, r1
     f78:	00 90 3a 00 	lds	r0, 0x003A
     f7c:	0f 92       	push	r0
     f7e:	10 92 3a 00 	sts	0x003A, r1
     f82:	00 90 3b 00 	lds	r0, 0x003B
     f86:	0f 92       	push	r0
     f88:	10 92 3b 00 	sts	0x003B, r1
     f8c:	2f 93       	push	r18
     f8e:	3f 93       	push	r19
     f90:	8f 93       	push	r24
     f92:	9f 93       	push	r25
     f94:	ef 93       	push	r30
     f96:	ff 93       	push	r31
     f98:	cf 93       	push	r28
     f9a:	df 93       	push	r29
     f9c:	cd b7       	in	r28, 0x3d	; 61
     f9e:	de b7       	in	r29, 0x3e	; 62
     fa0:	80 e4       	ldi	r24, 0x40	; 64
     fa2:	92 e0       	ldi	r25, 0x02	; 2
     fa4:	20 e4       	ldi	r18, 0x40	; 64
     fa6:	32 e0       	ldi	r19, 0x02	; 2
     fa8:	f9 01       	movw	r30, r18
     faa:	20 81       	ld	r18, Z
     fac:	2c 63       	ori	r18, 0x3C	; 60
     fae:	fc 01       	movw	r30, r24
     fb0:	20 83       	st	Z, r18
     fb2:	df 91       	pop	r29
     fb4:	cf 91       	pop	r28
     fb6:	ff 91       	pop	r31
     fb8:	ef 91       	pop	r30
     fba:	9f 91       	pop	r25
     fbc:	8f 91       	pop	r24
     fbe:	3f 91       	pop	r19
     fc0:	2f 91       	pop	r18
     fc2:	0f 90       	pop	r0
     fc4:	00 92 3b 00 	sts	0x003B, r0
     fc8:	0f 90       	pop	r0
     fca:	00 92 3a 00 	sts	0x003A, r0
     fce:	0f 90       	pop	r0
     fd0:	00 92 38 00 	sts	0x0038, r0
     fd4:	0f 90       	pop	r0
     fd6:	00 92 3f 00 	sts	0x003F, r0
     fda:	0f 90       	pop	r0
     fdc:	1f 90       	pop	r1
     fde:	18 95       	reti

00000fe0 <initialize_threat_distances>:
     fe0:	cf 93       	push	r28
     fe2:	df 93       	push	r29
     fe4:	cd b7       	in	r28, 0x3d	; 61
     fe6:	de b7       	in	r29, 0x3e	; 62
     fe8:	10 92 00 20 	sts	0x2000, r1
     fec:	10 92 01 20 	sts	0x2001, r1
     ff0:	10 92 06 20 	sts	0x2006, r1
     ff4:	10 92 07 20 	sts	0x2007, r1
     ff8:	10 92 02 20 	sts	0x2002, r1
     ffc:	10 92 03 20 	sts	0x2003, r1
    1000:	10 92 04 20 	sts	0x2004, r1
    1004:	10 92 05 20 	sts	0x2005, r1
    1008:	df 91       	pop	r29
    100a:	cf 91       	pop	r28
    100c:	08 95       	ret

0000100e <__vector_77>:

//Interrupts used for setting threat measurements from infrared sensors to lower nibble of LED port

//D0 used to control threat level LEDs (4 lsb)
ISR(TCD0_OVF_vect)
{
    100e:	1f 92       	push	r1
    1010:	0f 92       	push	r0
    1012:	00 90 3f 00 	lds	r0, 0x003F
    1016:	0f 92       	push	r0
    1018:	11 24       	eor	r1, r1
    101a:	00 90 38 00 	lds	r0, 0x0038
    101e:	0f 92       	push	r0
    1020:	10 92 38 00 	sts	0x0038, r1
    1024:	00 90 3a 00 	lds	r0, 0x003A
    1028:	0f 92       	push	r0
    102a:	10 92 3a 00 	sts	0x003A, r1
    102e:	00 90 3b 00 	lds	r0, 0x003B
    1032:	0f 92       	push	r0
    1034:	10 92 3b 00 	sts	0x003B, r1
    1038:	2f 93       	push	r18
    103a:	3f 93       	push	r19
    103c:	8f 93       	push	r24
    103e:	9f 93       	push	r25
    1040:	ef 93       	push	r30
    1042:	ff 93       	push	r31
    1044:	cf 93       	push	r28
    1046:	df 93       	push	r29
    1048:	cd b7       	in	r28, 0x3d	; 61
    104a:	de b7       	in	r29, 0x3e	; 62
	//turn on all of the LEDs used on so that CCA, CCB, CCC, CCD can turn them off
	LED_PORT.OUT |= 0x0F;
    104c:	80 ee       	ldi	r24, 0xE0	; 224
    104e:	96 e0       	ldi	r25, 0x06	; 6
    1050:	20 ee       	ldi	r18, 0xE0	; 224
    1052:	36 e0       	ldi	r19, 0x06	; 6
    1054:	f9 01       	movw	r30, r18
    1056:	24 81       	ldd	r18, Z+4	; 0x04
    1058:	2f 60       	ori	r18, 0x0F	; 15
    105a:	fc 01       	movw	r30, r24
    105c:	24 83       	std	Z+4, r18	; 0x04
}
    105e:	df 91       	pop	r29
    1060:	cf 91       	pop	r28
    1062:	ff 91       	pop	r31
    1064:	ef 91       	pop	r30
    1066:	9f 91       	pop	r25
    1068:	8f 91       	pop	r24
    106a:	3f 91       	pop	r19
    106c:	2f 91       	pop	r18
    106e:	0f 90       	pop	r0
    1070:	00 92 3b 00 	sts	0x003B, r0
    1074:	0f 90       	pop	r0
    1076:	00 92 3a 00 	sts	0x003A, r0
    107a:	0f 90       	pop	r0
    107c:	00 92 38 00 	sts	0x0038, r0
    1080:	0f 90       	pop	r0
    1082:	00 92 3f 00 	sts	0x003F, r0
    1086:	0f 90       	pop	r0
    1088:	1f 90       	pop	r1
    108a:	18 95       	reti

0000108c <__vector_79>:

ISR(TCD0_CCA_vect)
{
    108c:	1f 92       	push	r1
    108e:	0f 92       	push	r0
    1090:	00 90 3f 00 	lds	r0, 0x003F
    1094:	0f 92       	push	r0
    1096:	11 24       	eor	r1, r1
    1098:	00 90 38 00 	lds	r0, 0x0038
    109c:	0f 92       	push	r0
    109e:	10 92 38 00 	sts	0x0038, r1
    10a2:	00 90 3a 00 	lds	r0, 0x003A
    10a6:	0f 92       	push	r0
    10a8:	10 92 3a 00 	sts	0x003A, r1
    10ac:	00 90 3b 00 	lds	r0, 0x003B
    10b0:	0f 92       	push	r0
    10b2:	10 92 3b 00 	sts	0x003B, r1
    10b6:	2f 93       	push	r18
    10b8:	3f 93       	push	r19
    10ba:	8f 93       	push	r24
    10bc:	9f 93       	push	r25
    10be:	ef 93       	push	r30
    10c0:	ff 93       	push	r31
    10c2:	cf 93       	push	r28
    10c4:	df 93       	push	r29
    10c6:	cd b7       	in	r28, 0x3d	; 61
    10c8:	de b7       	in	r29, 0x3e	; 62
	//turn off left moving LED
	LED_PORT.OUT &= (~LED_THREAT_LEFT);
    10ca:	80 ee       	ldi	r24, 0xE0	; 224
    10cc:	96 e0       	ldi	r25, 0x06	; 6
    10ce:	20 ee       	ldi	r18, 0xE0	; 224
    10d0:	36 e0       	ldi	r19, 0x06	; 6
    10d2:	f9 01       	movw	r30, r18
    10d4:	24 81       	ldd	r18, Z+4	; 0x04
    10d6:	27 7f       	andi	r18, 0xF7	; 247
    10d8:	fc 01       	movw	r30, r24
    10da:	24 83       	std	Z+4, r18	; 0x04
}
    10dc:	df 91       	pop	r29
    10de:	cf 91       	pop	r28
    10e0:	ff 91       	pop	r31
    10e2:	ef 91       	pop	r30
    10e4:	9f 91       	pop	r25
    10e6:	8f 91       	pop	r24
    10e8:	3f 91       	pop	r19
    10ea:	2f 91       	pop	r18
    10ec:	0f 90       	pop	r0
    10ee:	00 92 3b 00 	sts	0x003B, r0
    10f2:	0f 90       	pop	r0
    10f4:	00 92 3a 00 	sts	0x003A, r0
    10f8:	0f 90       	pop	r0
    10fa:	00 92 38 00 	sts	0x0038, r0
    10fe:	0f 90       	pop	r0
    1100:	00 92 3f 00 	sts	0x003F, r0
    1104:	0f 90       	pop	r0
    1106:	1f 90       	pop	r1
    1108:	18 95       	reti

0000110a <__vector_80>:

ISR(TCD0_CCB_vect)
{
    110a:	1f 92       	push	r1
    110c:	0f 92       	push	r0
    110e:	00 90 3f 00 	lds	r0, 0x003F
    1112:	0f 92       	push	r0
    1114:	11 24       	eor	r1, r1
    1116:	00 90 38 00 	lds	r0, 0x0038
    111a:	0f 92       	push	r0
    111c:	10 92 38 00 	sts	0x0038, r1
    1120:	00 90 3a 00 	lds	r0, 0x003A
    1124:	0f 92       	push	r0
    1126:	10 92 3a 00 	sts	0x003A, r1
    112a:	00 90 3b 00 	lds	r0, 0x003B
    112e:	0f 92       	push	r0
    1130:	10 92 3b 00 	sts	0x003B, r1
    1134:	2f 93       	push	r18
    1136:	3f 93       	push	r19
    1138:	8f 93       	push	r24
    113a:	9f 93       	push	r25
    113c:	ef 93       	push	r30
    113e:	ff 93       	push	r31
    1140:	cf 93       	push	r28
    1142:	df 93       	push	r29
    1144:	cd b7       	in	r28, 0x3d	; 61
    1146:	de b7       	in	r29, 0x3e	; 62
	//turn off front moving LED
	LED_PORT.OUT &= (~LED_THREAT_FORWARD);
    1148:	80 ee       	ldi	r24, 0xE0	; 224
    114a:	96 e0       	ldi	r25, 0x06	; 6
    114c:	20 ee       	ldi	r18, 0xE0	; 224
    114e:	36 e0       	ldi	r19, 0x06	; 6
    1150:	f9 01       	movw	r30, r18
    1152:	24 81       	ldd	r18, Z+4	; 0x04
    1154:	2b 7f       	andi	r18, 0xFB	; 251
    1156:	fc 01       	movw	r30, r24
    1158:	24 83       	std	Z+4, r18	; 0x04
}
    115a:	df 91       	pop	r29
    115c:	cf 91       	pop	r28
    115e:	ff 91       	pop	r31
    1160:	ef 91       	pop	r30
    1162:	9f 91       	pop	r25
    1164:	8f 91       	pop	r24
    1166:	3f 91       	pop	r19
    1168:	2f 91       	pop	r18
    116a:	0f 90       	pop	r0
    116c:	00 92 3b 00 	sts	0x003B, r0
    1170:	0f 90       	pop	r0
    1172:	00 92 3a 00 	sts	0x003A, r0
    1176:	0f 90       	pop	r0
    1178:	00 92 38 00 	sts	0x0038, r0
    117c:	0f 90       	pop	r0
    117e:	00 92 3f 00 	sts	0x003F, r0
    1182:	0f 90       	pop	r0
    1184:	1f 90       	pop	r1
    1186:	18 95       	reti

00001188 <__vector_81>:

ISR(TCD0_CCC_vect)
{
    1188:	1f 92       	push	r1
    118a:	0f 92       	push	r0
    118c:	00 90 3f 00 	lds	r0, 0x003F
    1190:	0f 92       	push	r0
    1192:	11 24       	eor	r1, r1
    1194:	00 90 38 00 	lds	r0, 0x0038
    1198:	0f 92       	push	r0
    119a:	10 92 38 00 	sts	0x0038, r1
    119e:	00 90 3a 00 	lds	r0, 0x003A
    11a2:	0f 92       	push	r0
    11a4:	10 92 3a 00 	sts	0x003A, r1
    11a8:	00 90 3b 00 	lds	r0, 0x003B
    11ac:	0f 92       	push	r0
    11ae:	10 92 3b 00 	sts	0x003B, r1
    11b2:	2f 93       	push	r18
    11b4:	3f 93       	push	r19
    11b6:	8f 93       	push	r24
    11b8:	9f 93       	push	r25
    11ba:	ef 93       	push	r30
    11bc:	ff 93       	push	r31
    11be:	cf 93       	push	r28
    11c0:	df 93       	push	r29
    11c2:	cd b7       	in	r28, 0x3d	; 61
    11c4:	de b7       	in	r29, 0x3e	; 62
	//turn off back moving LED
	LED_PORT.OUT &= (~LED_THREAT_BACKWARD);
    11c6:	80 ee       	ldi	r24, 0xE0	; 224
    11c8:	96 e0       	ldi	r25, 0x06	; 6
    11ca:	20 ee       	ldi	r18, 0xE0	; 224
    11cc:	36 e0       	ldi	r19, 0x06	; 6
    11ce:	f9 01       	movw	r30, r18
    11d0:	24 81       	ldd	r18, Z+4	; 0x04
    11d2:	2d 7f       	andi	r18, 0xFD	; 253
    11d4:	fc 01       	movw	r30, r24
    11d6:	24 83       	std	Z+4, r18	; 0x04
}
    11d8:	df 91       	pop	r29
    11da:	cf 91       	pop	r28
    11dc:	ff 91       	pop	r31
    11de:	ef 91       	pop	r30
    11e0:	9f 91       	pop	r25
    11e2:	8f 91       	pop	r24
    11e4:	3f 91       	pop	r19
    11e6:	2f 91       	pop	r18
    11e8:	0f 90       	pop	r0
    11ea:	00 92 3b 00 	sts	0x003B, r0
    11ee:	0f 90       	pop	r0
    11f0:	00 92 3a 00 	sts	0x003A, r0
    11f4:	0f 90       	pop	r0
    11f6:	00 92 38 00 	sts	0x0038, r0
    11fa:	0f 90       	pop	r0
    11fc:	00 92 3f 00 	sts	0x003F, r0
    1200:	0f 90       	pop	r0
    1202:	1f 90       	pop	r1
    1204:	18 95       	reti

00001206 <__vector_82>:

ISR(TCD0_CCD_vect)
{
    1206:	1f 92       	push	r1
    1208:	0f 92       	push	r0
    120a:	00 90 3f 00 	lds	r0, 0x003F
    120e:	0f 92       	push	r0
    1210:	11 24       	eor	r1, r1
    1212:	00 90 38 00 	lds	r0, 0x0038
    1216:	0f 92       	push	r0
    1218:	10 92 38 00 	sts	0x0038, r1
    121c:	00 90 3a 00 	lds	r0, 0x003A
    1220:	0f 92       	push	r0
    1222:	10 92 3a 00 	sts	0x003A, r1
    1226:	00 90 3b 00 	lds	r0, 0x003B
    122a:	0f 92       	push	r0
    122c:	10 92 3b 00 	sts	0x003B, r1
    1230:	2f 93       	push	r18
    1232:	3f 93       	push	r19
    1234:	8f 93       	push	r24
    1236:	9f 93       	push	r25
    1238:	ef 93       	push	r30
    123a:	ff 93       	push	r31
    123c:	cf 93       	push	r28
    123e:	df 93       	push	r29
    1240:	cd b7       	in	r28, 0x3d	; 61
    1242:	de b7       	in	r29, 0x3e	; 62
	//turn off right moving LED
	LED_PORT.OUT &= (~LED_THREAT_RIGHT);
    1244:	80 ee       	ldi	r24, 0xE0	; 224
    1246:	96 e0       	ldi	r25, 0x06	; 6
    1248:	20 ee       	ldi	r18, 0xE0	; 224
    124a:	36 e0       	ldi	r19, 0x06	; 6
    124c:	f9 01       	movw	r30, r18
    124e:	24 81       	ldd	r18, Z+4	; 0x04
    1250:	2e 7f       	andi	r18, 0xFE	; 254
    1252:	fc 01       	movw	r30, r24
    1254:	24 83       	std	Z+4, r18	; 0x04
	
	
}
    1256:	df 91       	pop	r29
    1258:	cf 91       	pop	r28
    125a:	ff 91       	pop	r31
    125c:	ef 91       	pop	r30
    125e:	9f 91       	pop	r25
    1260:	8f 91       	pop	r24
    1262:	3f 91       	pop	r19
    1264:	2f 91       	pop	r18
    1266:	0f 90       	pop	r0
    1268:	00 92 3b 00 	sts	0x003B, r0
    126c:	0f 90       	pop	r0
    126e:	00 92 3a 00 	sts	0x003A, r0
    1272:	0f 90       	pop	r0
    1274:	00 92 38 00 	sts	0x0038, r0
    1278:	0f 90       	pop	r0
    127a:	00 92 3f 00 	sts	0x003F, r0
    127e:	0f 90       	pop	r0
    1280:	1f 90       	pop	r1
    1282:	18 95       	reti

00001284 <set_infrSens_avg_to_threatDist>:


//called by main to calculate the average threat distance measured by sensors every 500ms
void set_infrSens_avg_to_threatDist()
{
    1284:	cf 93       	push	r28
    1286:	df 93       	push	r29
    1288:	cd b7       	in	r28, 0x3d	; 61
    128a:	de b7       	in	r29, 0x3e	; 62
	threat_distance[LEFT] = calc_avg(LEFT);
    128c:	80 e0       	ldi	r24, 0x00	; 0
    128e:	19 d0       	rcall	.+50     	; 0x12c2 <calc_avg>
    1290:	80 93 00 20 	sts	0x2000, r24
    1294:	90 93 01 20 	sts	0x2001, r25
	threat_distance[RIGHT] = calc_avg(RIGHT);
    1298:	83 e0       	ldi	r24, 0x03	; 3
    129a:	13 d0       	rcall	.+38     	; 0x12c2 <calc_avg>
    129c:	80 93 06 20 	sts	0x2006, r24
    12a0:	90 93 07 20 	sts	0x2007, r25
	threat_distance[FRONT] = calc_avg(FRONT);
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	0d d0       	rcall	.+26     	; 0x12c2 <calc_avg>
    12a8:	80 93 02 20 	sts	0x2002, r24
    12ac:	90 93 03 20 	sts	0x2003, r25
	threat_distance[BACK] = calc_avg(BACK);
    12b0:	82 e0       	ldi	r24, 0x02	; 2
    12b2:	07 d0       	rcall	.+14     	; 0x12c2 <calc_avg>
    12b4:	80 93 04 20 	sts	0x2004, r24
    12b8:	90 93 05 20 	sts	0x2005, r25
}
    12bc:	df 91       	pop	r29
    12be:	cf 91       	pop	r28
    12c0:	08 95       	ret

000012c2 <calc_avg>:


//calculates average of sensor measurements based on the direction passed
//threat measurements are stored in arrays in infResults structure
uint16_t calc_avg(uint8_t direction)
{
    12c2:	cf 93       	push	r28
    12c4:	df 93       	push	r29
    12c6:	cd b7       	in	r28, 0x3d	; 61
    12c8:	de b7       	in	r29, 0x3e	; 62
    12ca:	2f 97       	sbiw	r28, 0x0f	; 15
    12cc:	cd bf       	out	0x3d, r28	; 61
    12ce:	de bf       	out	0x3e, r29	; 62
    12d0:	8d 87       	std	Y+13, r24	; 0x0d
	int sum = 0;
    12d2:	19 82       	std	Y+1, r1	; 0x01
    12d4:	1a 82       	std	Y+2, r1	; 0x02
	int count = 0;
    12d6:	1b 82       	std	Y+3, r1	; 0x03
    12d8:	1c 82       	std	Y+4, r1	; 0x04
	
	switch(direction)
    12da:	8d 85       	ldd	r24, Y+13	; 0x0d
    12dc:	88 2f       	mov	r24, r24
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	81 30       	cpi	r24, 0x01	; 1
    12e2:	91 05       	cpc	r25, r1
    12e4:	89 f1       	breq	.+98     	; 0x1348 <calc_avg+0x86>
    12e6:	82 30       	cpi	r24, 0x02	; 2
    12e8:	91 05       	cpc	r25, r1
    12ea:	1c f4       	brge	.+6      	; 0x12f2 <calc_avg+0x30>
    12ec:	00 97       	sbiw	r24, 0x00	; 0
    12ee:	51 f0       	breq	.+20     	; 0x1304 <calc_avg+0x42>
    12f0:	94 c0       	rjmp	.+296    	; 0x141a <calc_avg+0x158>
    12f2:	82 30       	cpi	r24, 0x02	; 2
    12f4:	91 05       	cpc	r25, r1
    12f6:	09 f4       	brne	.+2      	; 0x12fa <calc_avg+0x38>
    12f8:	4a c0       	rjmp	.+148    	; 0x138e <calc_avg+0xcc>
    12fa:	83 30       	cpi	r24, 0x03	; 3
    12fc:	91 05       	cpc	r25, r1
    12fe:	09 f4       	brne	.+2      	; 0x1302 <calc_avg+0x40>
    1300:	69 c0       	rjmp	.+210    	; 0x13d4 <calc_avg+0x112>
    1302:	8b c0       	rjmp	.+278    	; 0x141a <calc_avg+0x158>
	{
		case LEFT:
		
			for (int i = 0; i < NUM_INF_SENS_MEAS; i++)
    1304:	1d 82       	std	Y+5, r1	; 0x05
    1306:	1e 82       	std	Y+6, r1	; 0x06
    1308:	19 c0       	rjmp	.+50     	; 0x133c <calc_avg+0x7a>
			{
				sum += infrResults.left[i];
    130a:	8d 81       	ldd	r24, Y+5	; 0x05
    130c:	9e 81       	ldd	r25, Y+6	; 0x06
    130e:	88 0f       	add	r24, r24
    1310:	99 1f       	adc	r25, r25
    1312:	86 5f       	subi	r24, 0xF6	; 246
    1314:	9f 4d       	sbci	r25, 0xDF	; 223
    1316:	fc 01       	movw	r30, r24
    1318:	20 81       	ld	r18, Z
    131a:	31 81       	ldd	r19, Z+1	; 0x01
    131c:	89 81       	ldd	r24, Y+1	; 0x01
    131e:	9a 81       	ldd	r25, Y+2	; 0x02
    1320:	82 0f       	add	r24, r18
    1322:	93 1f       	adc	r25, r19
    1324:	89 83       	std	Y+1, r24	; 0x01
    1326:	9a 83       	std	Y+2, r25	; 0x02
				count++;
    1328:	8b 81       	ldd	r24, Y+3	; 0x03
    132a:	9c 81       	ldd	r25, Y+4	; 0x04
    132c:	01 96       	adiw	r24, 0x01	; 1
    132e:	8b 83       	std	Y+3, r24	; 0x03
    1330:	9c 83       	std	Y+4, r25	; 0x04
	
	switch(direction)
	{
		case LEFT:
		
			for (int i = 0; i < NUM_INF_SENS_MEAS; i++)
    1332:	8d 81       	ldd	r24, Y+5	; 0x05
    1334:	9e 81       	ldd	r25, Y+6	; 0x06
    1336:	01 96       	adiw	r24, 0x01	; 1
    1338:	8d 83       	std	Y+5, r24	; 0x05
    133a:	9e 83       	std	Y+6, r25	; 0x06
    133c:	8d 81       	ldd	r24, Y+5	; 0x05
    133e:	9e 81       	ldd	r25, Y+6	; 0x06
    1340:	84 30       	cpi	r24, 0x04	; 4
    1342:	91 05       	cpc	r25, r1
    1344:	14 f3       	brlt	.-60     	; 0x130a <calc_avg+0x48>
			{
				sum += infrResults.left[i];
				count++;
			}
		
			break;
    1346:	69 c0       	rjmp	.+210    	; 0x141a <calc_avg+0x158>
		
		case FRONT:
		
			for (int i = 0; i < NUM_INF_SENS_MEAS; i++)
    1348:	1f 82       	std	Y+7, r1	; 0x07
    134a:	18 86       	std	Y+8, r1	; 0x08
    134c:	1a c0       	rjmp	.+52     	; 0x1382 <calc_avg+0xc0>
			{
				sum += infrResults.front[i];
    134e:	8f 81       	ldd	r24, Y+7	; 0x07
    1350:	98 85       	ldd	r25, Y+8	; 0x08
    1352:	08 96       	adiw	r24, 0x08	; 8
    1354:	88 0f       	add	r24, r24
    1356:	99 1f       	adc	r25, r25
    1358:	86 5f       	subi	r24, 0xF6	; 246
    135a:	9f 4d       	sbci	r25, 0xDF	; 223
    135c:	fc 01       	movw	r30, r24
    135e:	20 81       	ld	r18, Z
    1360:	31 81       	ldd	r19, Z+1	; 0x01
    1362:	89 81       	ldd	r24, Y+1	; 0x01
    1364:	9a 81       	ldd	r25, Y+2	; 0x02
    1366:	82 0f       	add	r24, r18
    1368:	93 1f       	adc	r25, r19
    136a:	89 83       	std	Y+1, r24	; 0x01
    136c:	9a 83       	std	Y+2, r25	; 0x02
				count++;
    136e:	8b 81       	ldd	r24, Y+3	; 0x03
    1370:	9c 81       	ldd	r25, Y+4	; 0x04
    1372:	01 96       	adiw	r24, 0x01	; 1
    1374:	8b 83       	std	Y+3, r24	; 0x03
    1376:	9c 83       	std	Y+4, r25	; 0x04
		
			break;
		
		case FRONT:
		
			for (int i = 0; i < NUM_INF_SENS_MEAS; i++)
    1378:	8f 81       	ldd	r24, Y+7	; 0x07
    137a:	98 85       	ldd	r25, Y+8	; 0x08
    137c:	01 96       	adiw	r24, 0x01	; 1
    137e:	8f 83       	std	Y+7, r24	; 0x07
    1380:	98 87       	std	Y+8, r25	; 0x08
    1382:	8f 81       	ldd	r24, Y+7	; 0x07
    1384:	98 85       	ldd	r25, Y+8	; 0x08
    1386:	84 30       	cpi	r24, 0x04	; 4
    1388:	91 05       	cpc	r25, r1
    138a:	0c f3       	brlt	.-62     	; 0x134e <calc_avg+0x8c>
			{
				sum += infrResults.front[i];
				count++;
			}
		
			break;
    138c:	46 c0       	rjmp	.+140    	; 0x141a <calc_avg+0x158>
		
		case BACK:
		
			for (int i = 0; i < NUM_INF_SENS_MEAS; i++)
    138e:	19 86       	std	Y+9, r1	; 0x09
    1390:	1a 86       	std	Y+10, r1	; 0x0a
    1392:	1a c0       	rjmp	.+52     	; 0x13c8 <calc_avg+0x106>
			{
				sum += infrResults.back[i];
    1394:	89 85       	ldd	r24, Y+9	; 0x09
    1396:	9a 85       	ldd	r25, Y+10	; 0x0a
    1398:	0c 96       	adiw	r24, 0x0c	; 12
    139a:	88 0f       	add	r24, r24
    139c:	99 1f       	adc	r25, r25
    139e:	86 5f       	subi	r24, 0xF6	; 246
    13a0:	9f 4d       	sbci	r25, 0xDF	; 223
    13a2:	fc 01       	movw	r30, r24
    13a4:	20 81       	ld	r18, Z
    13a6:	31 81       	ldd	r19, Z+1	; 0x01
    13a8:	89 81       	ldd	r24, Y+1	; 0x01
    13aa:	9a 81       	ldd	r25, Y+2	; 0x02
    13ac:	82 0f       	add	r24, r18
    13ae:	93 1f       	adc	r25, r19
    13b0:	89 83       	std	Y+1, r24	; 0x01
    13b2:	9a 83       	std	Y+2, r25	; 0x02
				count++;
    13b4:	8b 81       	ldd	r24, Y+3	; 0x03
    13b6:	9c 81       	ldd	r25, Y+4	; 0x04
    13b8:	01 96       	adiw	r24, 0x01	; 1
    13ba:	8b 83       	std	Y+3, r24	; 0x03
    13bc:	9c 83       	std	Y+4, r25	; 0x04
		
			break;
		
		case BACK:
		
			for (int i = 0; i < NUM_INF_SENS_MEAS; i++)
    13be:	89 85       	ldd	r24, Y+9	; 0x09
    13c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    13c2:	01 96       	adiw	r24, 0x01	; 1
    13c4:	89 87       	std	Y+9, r24	; 0x09
    13c6:	9a 87       	std	Y+10, r25	; 0x0a
    13c8:	89 85       	ldd	r24, Y+9	; 0x09
    13ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    13cc:	84 30       	cpi	r24, 0x04	; 4
    13ce:	91 05       	cpc	r25, r1
    13d0:	0c f3       	brlt	.-62     	; 0x1394 <calc_avg+0xd2>
			{
				sum += infrResults.back[i];
				count++;
			}
		
			break;
    13d2:	23 c0       	rjmp	.+70     	; 0x141a <calc_avg+0x158>
		
		case RIGHT:
		
			for (int i = 0; i < NUM_INF_SENS_MEAS; i++)
    13d4:	1b 86       	std	Y+11, r1	; 0x0b
    13d6:	1c 86       	std	Y+12, r1	; 0x0c
    13d8:	1a c0       	rjmp	.+52     	; 0x140e <calc_avg+0x14c>
			{
				sum += infrResults.right[i];
    13da:	8b 85       	ldd	r24, Y+11	; 0x0b
    13dc:	9c 85       	ldd	r25, Y+12	; 0x0c
    13de:	04 96       	adiw	r24, 0x04	; 4
    13e0:	88 0f       	add	r24, r24
    13e2:	99 1f       	adc	r25, r25
    13e4:	86 5f       	subi	r24, 0xF6	; 246
    13e6:	9f 4d       	sbci	r25, 0xDF	; 223
    13e8:	fc 01       	movw	r30, r24
    13ea:	20 81       	ld	r18, Z
    13ec:	31 81       	ldd	r19, Z+1	; 0x01
    13ee:	89 81       	ldd	r24, Y+1	; 0x01
    13f0:	9a 81       	ldd	r25, Y+2	; 0x02
    13f2:	82 0f       	add	r24, r18
    13f4:	93 1f       	adc	r25, r19
    13f6:	89 83       	std	Y+1, r24	; 0x01
    13f8:	9a 83       	std	Y+2, r25	; 0x02
				count++;
    13fa:	8b 81       	ldd	r24, Y+3	; 0x03
    13fc:	9c 81       	ldd	r25, Y+4	; 0x04
    13fe:	01 96       	adiw	r24, 0x01	; 1
    1400:	8b 83       	std	Y+3, r24	; 0x03
    1402:	9c 83       	std	Y+4, r25	; 0x04
		
			break;
		
		case RIGHT:
		
			for (int i = 0; i < NUM_INF_SENS_MEAS; i++)
    1404:	8b 85       	ldd	r24, Y+11	; 0x0b
    1406:	9c 85       	ldd	r25, Y+12	; 0x0c
    1408:	01 96       	adiw	r24, 0x01	; 1
    140a:	8b 87       	std	Y+11, r24	; 0x0b
    140c:	9c 87       	std	Y+12, r25	; 0x0c
    140e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1410:	9c 85       	ldd	r25, Y+12	; 0x0c
    1412:	84 30       	cpi	r24, 0x04	; 4
    1414:	91 05       	cpc	r25, r1
    1416:	0c f3       	brlt	.-62     	; 0x13da <calc_avg+0x118>
			{
				sum += infrResults.right[i];
				count++;
			}
		
			break;	
    1418:	00 00       	nop
		
	}	
	
	return sum / count;
    141a:	89 81       	ldd	r24, Y+1	; 0x01
    141c:	9a 81       	ldd	r25, Y+2	; 0x02
    141e:	2b 81       	ldd	r18, Y+3	; 0x03
    1420:	3c 81       	ldd	r19, Y+4	; 0x04
    1422:	b9 01       	movw	r22, r18
    1424:	2b d1       	rcall	.+598    	; 0x167c <__divmodhi4>
    1426:	cb 01       	movw	r24, r22
	
}
    1428:	2f 96       	adiw	r28, 0x0f	; 15
    142a:	cd bf       	out	0x3d, r28	; 61
    142c:	de bf       	out	0x3e, r29	; 62
    142e:	df 91       	pop	r29
    1430:	cf 91       	pop	r28
    1432:	08 95       	ret

00001434 <reset_infSens>:

//resets the measurement count, called by main after a direction has been determined every 500ms
void reset_infSens()
{
    1434:	cf 93       	push	r28
    1436:	df 93       	push	r29
    1438:	cd b7       	in	r28, 0x3d	; 61
    143a:	de b7       	in	r29, 0x3e	; 62
	infrResults.lCount = 0;
    143c:	10 92 2a 20 	sts	0x202A, r1
	infrResults.rCount = 0;
    1440:	10 92 2b 20 	sts	0x202B, r1
	infrResults.fCount = 0;
    1444:	10 92 2c 20 	sts	0x202C, r1
	infrResults.bCount = 0;
    1448:	10 92 2d 20 	sts	0x202D, r1
	
}
    144c:	df 91       	pop	r29
    144e:	cf 91       	pop	r28
    1450:	08 95       	ret

00001452 <CCPIOWrite>:
    1452:	0f 93       	push	r16
    1454:	cf 93       	push	r28
    1456:	df 93       	push	r29
    1458:	1f 92       	push	r1
    145a:	cd b7       	in	r28, 0x3d	; 61
    145c:	de b7       	in	r29, 0x3e	; 62
    145e:	2f b7       	in	r18, 0x3f	; 63
    1460:	29 83       	std	Y+1, r18	; 0x01
    1462:	f8 94       	cli
    1464:	1b be       	out	0x3b, r1	; 59
    1466:	fc 01       	movw	r30, r24
    1468:	08 ed       	ldi	r16, 0xD8	; 216
    146a:	04 bf       	out	0x34, r16	; 52
    146c:	60 83       	st	Z, r22
    146e:	89 81       	ldd	r24, Y+1	; 0x01
    1470:	8f bf       	out	0x3f, r24	; 63
    1472:	0f 90       	pop	r0
    1474:	df 91       	pop	r29
    1476:	cf 91       	pop	r28
    1478:	0f 91       	pop	r16
    147a:	08 95       	ret

0000147c <SetSystemClock>:
    147c:	cf 93       	push	r28
    147e:	df 93       	push	r29
    1480:	d8 2f       	mov	r29, r24
    1482:	82 30       	cpi	r24, 0x02	; 2
    1484:	59 f0       	breq	.+22     	; 0x149c <SetSystemClock+0x20>
    1486:	28 f4       	brcc	.+10     	; 0x1492 <SetSystemClock+0x16>
    1488:	88 23       	and	r24, r24
    148a:	71 f0       	breq	.+28     	; 0x14a8 <SetSystemClock+0x2c>
    148c:	81 30       	cpi	r24, 0x01	; 1
    148e:	21 f5       	brne	.+72     	; 0x14d8 <SetSystemClock+0x5c>
    1490:	0d c0       	rjmp	.+26     	; 0x14ac <SetSystemClock+0x30>
    1492:	83 30       	cpi	r24, 0x03	; 3
    1494:	29 f0       	breq	.+10     	; 0x14a0 <SetSystemClock+0x24>
    1496:	84 30       	cpi	r24, 0x04	; 4
    1498:	f9 f4       	brne	.+62     	; 0x14d8 <SetSystemClock+0x5c>
    149a:	04 c0       	rjmp	.+8      	; 0x14a4 <SetSystemClock+0x28>
    149c:	c4 e0       	ldi	r28, 0x04	; 4
    149e:	07 c0       	rjmp	.+14     	; 0x14ae <SetSystemClock+0x32>
    14a0:	c8 e0       	ldi	r28, 0x08	; 8
    14a2:	05 c0       	rjmp	.+10     	; 0x14ae <SetSystemClock+0x32>
    14a4:	c0 e1       	ldi	r28, 0x10	; 16
    14a6:	03 c0       	rjmp	.+6      	; 0x14ae <SetSystemClock+0x32>
    14a8:	c1 e0       	ldi	r28, 0x01	; 1
    14aa:	01 c0       	rjmp	.+2      	; 0x14ae <SetSystemClock+0x32>
    14ac:	c2 e0       	ldi	r28, 0x02	; 2
    14ae:	e0 e5       	ldi	r30, 0x50	; 80
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	80 81       	ld	r24, Z
    14b4:	8c 2b       	or	r24, r28
    14b6:	80 83       	st	Z, r24
    14b8:	64 2b       	or	r22, r20
    14ba:	81 e4       	ldi	r24, 0x41	; 65
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	c9 df       	rcall	.-110    	; 0x1452 <CCPIOWrite>
    14c0:	e1 e5       	ldi	r30, 0x51	; 81
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	90 81       	ld	r25, Z
    14c6:	9c 23       	and	r25, r28
    14c8:	e9 f3       	breq	.-6      	; 0x14c4 <SetSystemClock+0x48>
    14ca:	6d 2f       	mov	r22, r29
    14cc:	80 e4       	ldi	r24, 0x40	; 64
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	c0 df       	rcall	.-128    	; 0x1452 <CCPIOWrite>
    14d2:	21 e0       	ldi	r18, 0x01	; 1
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	02 c0       	rjmp	.+4      	; 0x14dc <SetSystemClock+0x60>
    14d8:	2f ef       	ldi	r18, 0xFF	; 255
    14da:	3f ef       	ldi	r19, 0xFF	; 255
    14dc:	82 2f       	mov	r24, r18
    14de:	93 2f       	mov	r25, r19
    14e0:	df 91       	pop	r29
    14e2:	cf 91       	pop	r28
    14e4:	08 95       	ret

000014e6 <GetSystemClocks>:
    14e6:	cf 93       	push	r28
    14e8:	df 93       	push	r29
    14ea:	fc 01       	movw	r30, r24
    14ec:	eb 01       	movw	r28, r22
    14ee:	80 91 40 00 	lds	r24, 0x0040
    14f2:	87 70       	andi	r24, 0x07	; 7
    14f4:	82 30       	cpi	r24, 0x02	; 2
    14f6:	71 f0       	breq	.+28     	; 0x1514 <GetSystemClocks+0x2e>
    14f8:	38 f4       	brcc	.+14     	; 0x1508 <GetSystemClocks+0x22>
    14fa:	88 23       	and	r24, r24
    14fc:	09 f4       	brne	.+2      	; 0x1500 <GetSystemClocks+0x1a>
    14fe:	42 c0       	rjmp	.+132    	; 0x1584 <GetSystemClocks+0x9e>
    1500:	81 30       	cpi	r24, 0x01	; 1
    1502:	09 f0       	breq	.+2      	; 0x1506 <GetSystemClocks+0x20>
    1504:	b4 c0       	rjmp	.+360    	; 0x166e <GetSystemClocks+0x188>
    1506:	0f c0       	rjmp	.+30     	; 0x1526 <GetSystemClocks+0x40>
    1508:	83 30       	cpi	r24, 0x03	; 3
    150a:	b1 f0       	breq	.+44     	; 0x1538 <GetSystemClocks+0x52>
    150c:	84 30       	cpi	r24, 0x04	; 4
    150e:	09 f0       	breq	.+2      	; 0x1512 <GetSystemClocks+0x2c>
    1510:	ae c0       	rjmp	.+348    	; 0x166e <GetSystemClocks+0x188>
    1512:	1b c0       	rjmp	.+54     	; 0x154a <GetSystemClocks+0x64>
    1514:	80 e0       	ldi	r24, 0x00	; 0
    1516:	9d e7       	ldi	r25, 0x7D	; 125
    1518:	a0 e0       	ldi	r26, 0x00	; 0
    151a:	b0 e0       	ldi	r27, 0x00	; 0
    151c:	80 83       	st	Z, r24
    151e:	91 83       	std	Z+1, r25	; 0x01
    1520:	a2 83       	std	Z+2, r26	; 0x02
    1522:	b3 83       	std	Z+3, r27	; 0x03
    1524:	37 c0       	rjmp	.+110    	; 0x1594 <GetSystemClocks+0xae>
    1526:	80 e0       	ldi	r24, 0x00	; 0
    1528:	98 e4       	ldi	r25, 0x48	; 72
    152a:	a8 ee       	ldi	r26, 0xE8	; 232
    152c:	b1 e0       	ldi	r27, 0x01	; 1
    152e:	80 83       	st	Z, r24
    1530:	91 83       	std	Z+1, r25	; 0x01
    1532:	a2 83       	std	Z+2, r26	; 0x02
    1534:	b3 83       	std	Z+3, r27	; 0x03
    1536:	2e c0       	rjmp	.+92     	; 0x1594 <GetSystemClocks+0xae>
    1538:	80 e0       	ldi	r24, 0x00	; 0
    153a:	94 e2       	ldi	r25, 0x24	; 36
    153c:	a4 ef       	ldi	r26, 0xF4	; 244
    153e:	b0 e0       	ldi	r27, 0x00	; 0
    1540:	80 83       	st	Z, r24
    1542:	91 83       	std	Z+1, r25	; 0x01
    1544:	a2 83       	std	Z+2, r26	; 0x02
    1546:	b3 83       	std	Z+3, r27	; 0x03
    1548:	25 c0       	rjmp	.+74     	; 0x1594 <GetSystemClocks+0xae>
    154a:	25 e5       	ldi	r18, 0x55	; 85
    154c:	30 e0       	ldi	r19, 0x00	; 0
    154e:	d9 01       	movw	r26, r18
    1550:	8c 91       	ld	r24, X
    1552:	80 e8       	ldi	r24, 0x80	; 128
    1554:	94 e8       	ldi	r25, 0x84	; 132
    1556:	ae e1       	ldi	r26, 0x1E	; 30
    1558:	b0 e0       	ldi	r27, 0x00	; 0
    155a:	80 83       	st	Z, r24
    155c:	91 83       	std	Z+1, r25	; 0x01
    155e:	a2 83       	std	Z+2, r26	; 0x02
    1560:	b3 83       	std	Z+3, r27	; 0x03
    1562:	d9 01       	movw	r26, r18
    1564:	8c 91       	ld	r24, X
    1566:	a8 2f       	mov	r26, r24
    1568:	af 71       	andi	r26, 0x1F	; 31
    156a:	09 f4       	brne	.+2      	; 0x156e <GetSystemClocks+0x88>
    156c:	a1 e0       	ldi	r26, 0x01	; 1
    156e:	b0 e0       	ldi	r27, 0x00	; 0
    1570:	20 e8       	ldi	r18, 0x80	; 128
    1572:	34 e8       	ldi	r19, 0x84	; 132
    1574:	4e e1       	ldi	r20, 0x1E	; 30
    1576:	50 e0       	ldi	r21, 0x00	; 0
    1578:	b6 d0       	rcall	.+364    	; 0x16e6 <__muluhisi3>
    157a:	60 83       	st	Z, r22
    157c:	71 83       	std	Z+1, r23	; 0x01
    157e:	82 83       	std	Z+2, r24	; 0x02
    1580:	93 83       	std	Z+3, r25	; 0x03
    1582:	08 c0       	rjmp	.+16     	; 0x1594 <GetSystemClocks+0xae>
    1584:	80 e8       	ldi	r24, 0x80	; 128
    1586:	94 e8       	ldi	r25, 0x84	; 132
    1588:	ae e1       	ldi	r26, 0x1E	; 30
    158a:	b0 e0       	ldi	r27, 0x00	; 0
    158c:	80 83       	st	Z, r24
    158e:	91 83       	std	Z+1, r25	; 0x01
    1590:	a2 83       	std	Z+2, r26	; 0x02
    1592:	b3 83       	std	Z+3, r27	; 0x03
    1594:	80 91 41 00 	lds	r24, 0x0041
    1598:	8c 77       	andi	r24, 0x7C	; 124
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	96 95       	lsr	r25
    159e:	87 95       	ror	r24
    15a0:	96 95       	lsr	r25
    15a2:	87 95       	ror	r24
    15a4:	89 30       	cpi	r24, 0x09	; 9
    15a6:	91 05       	cpc	r25, r1
    15a8:	59 f1       	breq	.+86     	; 0x1600 <GetSystemClocks+0x11a>
    15aa:	6c f4       	brge	.+26     	; 0x15c6 <GetSystemClocks+0xe0>
    15ac:	83 30       	cpi	r24, 0x03	; 3
    15ae:	91 05       	cpc	r25, r1
    15b0:	c1 f0       	breq	.+48     	; 0x15e2 <GetSystemClocks+0xfc>
    15b2:	1c f4       	brge	.+6      	; 0x15ba <GetSystemClocks+0xd4>
    15b4:	01 97       	sbiw	r24, 0x01	; 1
    15b6:	81 f4       	brne	.+32     	; 0x15d8 <GetSystemClocks+0xf2>
    15b8:	37 c0       	rjmp	.+110    	; 0x1628 <GetSystemClocks+0x142>
    15ba:	85 30       	cpi	r24, 0x05	; 5
    15bc:	91 05       	cpc	r25, r1
    15be:	b1 f0       	breq	.+44     	; 0x15ec <GetSystemClocks+0x106>
    15c0:	07 97       	sbiw	r24, 0x07	; 7
    15c2:	51 f4       	brne	.+20     	; 0x15d8 <GetSystemClocks+0xf2>
    15c4:	18 c0       	rjmp	.+48     	; 0x15f6 <GetSystemClocks+0x110>
    15c6:	8d 30       	cpi	r24, 0x0D	; 13
    15c8:	91 05       	cpc	r25, r1
    15ca:	21 f1       	breq	.+72     	; 0x1614 <GetSystemClocks+0x12e>
    15cc:	1c f4       	brge	.+6      	; 0x15d4 <GetSystemClocks+0xee>
    15ce:	0b 97       	sbiw	r24, 0x0b	; 11
    15d0:	19 f4       	brne	.+6      	; 0x15d8 <GetSystemClocks+0xf2>
    15d2:	1b c0       	rjmp	.+54     	; 0x160a <GetSystemClocks+0x124>
    15d4:	0f 97       	sbiw	r24, 0x0f	; 15
    15d6:	19 f1       	breq	.+70     	; 0x161e <GetSystemClocks+0x138>
    15d8:	21 e0       	ldi	r18, 0x01	; 1
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	40 e0       	ldi	r20, 0x00	; 0
    15de:	50 e0       	ldi	r21, 0x00	; 0
    15e0:	27 c0       	rjmp	.+78     	; 0x1630 <GetSystemClocks+0x14a>
    15e2:	24 e0       	ldi	r18, 0x04	; 4
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	40 e0       	ldi	r20, 0x00	; 0
    15e8:	50 e0       	ldi	r21, 0x00	; 0
    15ea:	22 c0       	rjmp	.+68     	; 0x1630 <GetSystemClocks+0x14a>
    15ec:	28 e0       	ldi	r18, 0x08	; 8
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	40 e0       	ldi	r20, 0x00	; 0
    15f2:	50 e0       	ldi	r21, 0x00	; 0
    15f4:	1d c0       	rjmp	.+58     	; 0x1630 <GetSystemClocks+0x14a>
    15f6:	20 e1       	ldi	r18, 0x10	; 16
    15f8:	30 e0       	ldi	r19, 0x00	; 0
    15fa:	40 e0       	ldi	r20, 0x00	; 0
    15fc:	50 e0       	ldi	r21, 0x00	; 0
    15fe:	18 c0       	rjmp	.+48     	; 0x1630 <GetSystemClocks+0x14a>
    1600:	20 e2       	ldi	r18, 0x20	; 32
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	40 e0       	ldi	r20, 0x00	; 0
    1606:	50 e0       	ldi	r21, 0x00	; 0
    1608:	13 c0       	rjmp	.+38     	; 0x1630 <GetSystemClocks+0x14a>
    160a:	20 e4       	ldi	r18, 0x40	; 64
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	40 e0       	ldi	r20, 0x00	; 0
    1610:	50 e0       	ldi	r21, 0x00	; 0
    1612:	0e c0       	rjmp	.+28     	; 0x1630 <GetSystemClocks+0x14a>
    1614:	20 e8       	ldi	r18, 0x80	; 128
    1616:	30 e0       	ldi	r19, 0x00	; 0
    1618:	40 e0       	ldi	r20, 0x00	; 0
    161a:	50 e0       	ldi	r21, 0x00	; 0
    161c:	09 c0       	rjmp	.+18     	; 0x1630 <GetSystemClocks+0x14a>
    161e:	20 e0       	ldi	r18, 0x00	; 0
    1620:	31 e0       	ldi	r19, 0x01	; 1
    1622:	40 e0       	ldi	r20, 0x00	; 0
    1624:	50 e0       	ldi	r21, 0x00	; 0
    1626:	04 c0       	rjmp	.+8      	; 0x1630 <GetSystemClocks+0x14a>
    1628:	22 e0       	ldi	r18, 0x02	; 2
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	40 e0       	ldi	r20, 0x00	; 0
    162e:	50 e0       	ldi	r21, 0x00	; 0
    1630:	80 91 41 00 	lds	r24, 0x0041
    1634:	81 ff       	sbrs	r24, 1
    1636:	09 c0       	rjmp	.+18     	; 0x164a <GetSystemClocks+0x164>
    1638:	22 0f       	add	r18, r18
    163a:	33 1f       	adc	r19, r19
    163c:	44 1f       	adc	r20, r20
    163e:	55 1f       	adc	r21, r21
    1640:	22 0f       	add	r18, r18
    1642:	33 1f       	adc	r19, r19
    1644:	44 1f       	adc	r20, r20
    1646:	55 1f       	adc	r21, r21
    1648:	06 c0       	rjmp	.+12     	; 0x1656 <GetSystemClocks+0x170>
    164a:	80 ff       	sbrs	r24, 0
    164c:	04 c0       	rjmp	.+8      	; 0x1656 <GetSystemClocks+0x170>
    164e:	22 0f       	add	r18, r18
    1650:	33 1f       	adc	r19, r19
    1652:	44 1f       	adc	r20, r20
    1654:	55 1f       	adc	r21, r21
    1656:	60 81       	ld	r22, Z
    1658:	71 81       	ldd	r23, Z+1	; 0x01
    165a:	82 81       	ldd	r24, Z+2	; 0x02
    165c:	93 81       	ldd	r25, Z+3	; 0x03
    165e:	21 d0       	rcall	.+66     	; 0x16a2 <__udivmodsi4>
    1660:	28 83       	st	Y, r18
    1662:	39 83       	std	Y+1, r19	; 0x01
    1664:	4a 83       	std	Y+2, r20	; 0x02
    1666:	5b 83       	std	Y+3, r21	; 0x03
    1668:	21 e0       	ldi	r18, 0x01	; 1
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	02 c0       	rjmp	.+4      	; 0x1672 <GetSystemClocks+0x18c>
    166e:	2f ef       	ldi	r18, 0xFF	; 255
    1670:	3f ef       	ldi	r19, 0xFF	; 255
    1672:	82 2f       	mov	r24, r18
    1674:	93 2f       	mov	r25, r19
    1676:	df 91       	pop	r29
    1678:	cf 91       	pop	r28
    167a:	08 95       	ret

0000167c <__divmodhi4>:
    167c:	97 fb       	bst	r25, 7
    167e:	07 2e       	mov	r0, r23
    1680:	16 f4       	brtc	.+4      	; 0x1686 <__divmodhi4+0xa>
    1682:	00 94       	com	r0
    1684:	06 d0       	rcall	.+12     	; 0x1692 <__divmodhi4_neg1>
    1686:	77 fd       	sbrc	r23, 7
    1688:	08 d0       	rcall	.+16     	; 0x169a <__divmodhi4_neg2>
    168a:	37 d0       	rcall	.+110    	; 0x16fa <__udivmodhi4>
    168c:	07 fc       	sbrc	r0, 7
    168e:	05 d0       	rcall	.+10     	; 0x169a <__divmodhi4_neg2>
    1690:	3e f4       	brtc	.+14     	; 0x16a0 <__divmodhi4_exit>

00001692 <__divmodhi4_neg1>:
    1692:	90 95       	com	r25
    1694:	81 95       	neg	r24
    1696:	9f 4f       	sbci	r25, 0xFF	; 255
    1698:	08 95       	ret

0000169a <__divmodhi4_neg2>:
    169a:	70 95       	com	r23
    169c:	61 95       	neg	r22
    169e:	7f 4f       	sbci	r23, 0xFF	; 255

000016a0 <__divmodhi4_exit>:
    16a0:	08 95       	ret

000016a2 <__udivmodsi4>:
    16a2:	a1 e2       	ldi	r26, 0x21	; 33
    16a4:	1a 2e       	mov	r1, r26
    16a6:	aa 1b       	sub	r26, r26
    16a8:	bb 1b       	sub	r27, r27
    16aa:	fd 01       	movw	r30, r26
    16ac:	0d c0       	rjmp	.+26     	; 0x16c8 <__udivmodsi4_ep>

000016ae <__udivmodsi4_loop>:
    16ae:	aa 1f       	adc	r26, r26
    16b0:	bb 1f       	adc	r27, r27
    16b2:	ee 1f       	adc	r30, r30
    16b4:	ff 1f       	adc	r31, r31
    16b6:	a2 17       	cp	r26, r18
    16b8:	b3 07       	cpc	r27, r19
    16ba:	e4 07       	cpc	r30, r20
    16bc:	f5 07       	cpc	r31, r21
    16be:	20 f0       	brcs	.+8      	; 0x16c8 <__udivmodsi4_ep>
    16c0:	a2 1b       	sub	r26, r18
    16c2:	b3 0b       	sbc	r27, r19
    16c4:	e4 0b       	sbc	r30, r20
    16c6:	f5 0b       	sbc	r31, r21

000016c8 <__udivmodsi4_ep>:
    16c8:	66 1f       	adc	r22, r22
    16ca:	77 1f       	adc	r23, r23
    16cc:	88 1f       	adc	r24, r24
    16ce:	99 1f       	adc	r25, r25
    16d0:	1a 94       	dec	r1
    16d2:	69 f7       	brne	.-38     	; 0x16ae <__udivmodsi4_loop>
    16d4:	60 95       	com	r22
    16d6:	70 95       	com	r23
    16d8:	80 95       	com	r24
    16da:	90 95       	com	r25
    16dc:	9b 01       	movw	r18, r22
    16de:	ac 01       	movw	r20, r24
    16e0:	bd 01       	movw	r22, r26
    16e2:	cf 01       	movw	r24, r30
    16e4:	08 95       	ret

000016e6 <__muluhisi3>:
    16e6:	1d d0       	rcall	.+58     	; 0x1722 <__umulhisi3>
    16e8:	a5 9f       	mul	r26, r21
    16ea:	90 0d       	add	r25, r0
    16ec:	b4 9f       	mul	r27, r20
    16ee:	90 0d       	add	r25, r0
    16f0:	a4 9f       	mul	r26, r20
    16f2:	80 0d       	add	r24, r0
    16f4:	91 1d       	adc	r25, r1
    16f6:	11 24       	eor	r1, r1
    16f8:	08 95       	ret

000016fa <__udivmodhi4>:
    16fa:	aa 1b       	sub	r26, r26
    16fc:	bb 1b       	sub	r27, r27
    16fe:	51 e1       	ldi	r21, 0x11	; 17
    1700:	07 c0       	rjmp	.+14     	; 0x1710 <__udivmodhi4_ep>

00001702 <__udivmodhi4_loop>:
    1702:	aa 1f       	adc	r26, r26
    1704:	bb 1f       	adc	r27, r27
    1706:	a6 17       	cp	r26, r22
    1708:	b7 07       	cpc	r27, r23
    170a:	10 f0       	brcs	.+4      	; 0x1710 <__udivmodhi4_ep>
    170c:	a6 1b       	sub	r26, r22
    170e:	b7 0b       	sbc	r27, r23

00001710 <__udivmodhi4_ep>:
    1710:	88 1f       	adc	r24, r24
    1712:	99 1f       	adc	r25, r25
    1714:	5a 95       	dec	r21
    1716:	a9 f7       	brne	.-22     	; 0x1702 <__udivmodhi4_loop>
    1718:	80 95       	com	r24
    171a:	90 95       	com	r25
    171c:	bc 01       	movw	r22, r24
    171e:	cd 01       	movw	r24, r26
    1720:	08 95       	ret

00001722 <__umulhisi3>:
    1722:	a2 9f       	mul	r26, r18
    1724:	b0 01       	movw	r22, r0
    1726:	b3 9f       	mul	r27, r19
    1728:	c0 01       	movw	r24, r0
    172a:	a3 9f       	mul	r26, r19
    172c:	70 0d       	add	r23, r0
    172e:	81 1d       	adc	r24, r1
    1730:	11 24       	eor	r1, r1
    1732:	91 1d       	adc	r25, r1
    1734:	b2 9f       	mul	r27, r18
    1736:	70 0d       	add	r23, r0
    1738:	81 1d       	adc	r24, r1
    173a:	11 24       	eor	r1, r1
    173c:	91 1d       	adc	r25, r1
    173e:	08 95       	ret

00001740 <_exit>:
    1740:	f8 94       	cli

00001742 <__stop_program>:
    1742:	ff cf       	rjmp	.-2      	; 0x1742 <__stop_program>
