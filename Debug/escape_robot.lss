
escape_robot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001a12  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000003f  00802000  00802000  00001a86  2**0
                  ALLOC
  2 .comment      0000005f  00000000  00000000  00001a86  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000230  00000000  00000000  00001ae5  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00001e70  00000000  00000000  00001d15  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000874  00000000  00000000  00003b85  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00001770  00000000  00000000  000043f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000890  00000000  00000000  00005b6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000efd  00000000  00000000  000063fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000142d  00000000  00000000  000072f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000001c0  00000000  00000000  00008726  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	f9 c0       	rjmp	.+498    	; 0x1f4 <__ctors_end>
       2:	00 00       	nop
       4:	0e c1       	rjmp	.+540    	; 0x222 <__bad_interrupt>
       6:	00 00       	nop
       8:	0c c1       	rjmp	.+536    	; 0x222 <__bad_interrupt>
       a:	00 00       	nop
       c:	0a c1       	rjmp	.+532    	; 0x222 <__bad_interrupt>
       e:	00 00       	nop
      10:	08 c1       	rjmp	.+528    	; 0x222 <__bad_interrupt>
      12:	00 00       	nop
      14:	06 c1       	rjmp	.+524    	; 0x222 <__bad_interrupt>
      16:	00 00       	nop
      18:	04 c1       	rjmp	.+520    	; 0x222 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	02 c1       	rjmp	.+516    	; 0x222 <__bad_interrupt>
      1e:	00 00       	nop
      20:	00 c1       	rjmp	.+512    	; 0x222 <__bad_interrupt>
      22:	00 00       	nop
      24:	fe c0       	rjmp	.+508    	; 0x222 <__bad_interrupt>
      26:	00 00       	nop
      28:	fc c0       	rjmp	.+504    	; 0x222 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	fa c0       	rjmp	.+500    	; 0x222 <__bad_interrupt>
      2e:	00 00       	nop
      30:	f8 c0       	rjmp	.+496    	; 0x222 <__bad_interrupt>
      32:	00 00       	nop
      34:	f6 c0       	rjmp	.+492    	; 0x222 <__bad_interrupt>
      36:	00 00       	nop
      38:	f4 c0       	rjmp	.+488    	; 0x222 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	f2 c0       	rjmp	.+484    	; 0x222 <__bad_interrupt>
      3e:	00 00       	nop
      40:	f0 c0       	rjmp	.+480    	; 0x222 <__bad_interrupt>
      42:	00 00       	nop
      44:	ee c0       	rjmp	.+476    	; 0x222 <__bad_interrupt>
      46:	00 00       	nop
      48:	ec c0       	rjmp	.+472    	; 0x222 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	ea c0       	rjmp	.+468    	; 0x222 <__bad_interrupt>
      4e:	00 00       	nop
      50:	c1 c6       	rjmp	.+3458   	; 0xdd4 <__vector_20>
      52:	00 00       	nop
      54:	e6 c0       	rjmp	.+460    	; 0x222 <__bad_interrupt>
      56:	00 00       	nop
      58:	e4 c0       	rjmp	.+456    	; 0x222 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	e2 c0       	rjmp	.+452    	; 0x222 <__bad_interrupt>
      5e:	00 00       	nop
      60:	e0 c0       	rjmp	.+448    	; 0x222 <__bad_interrupt>
      62:	00 00       	nop
      64:	de c0       	rjmp	.+444    	; 0x222 <__bad_interrupt>
      66:	00 00       	nop
      68:	dc c0       	rjmp	.+440    	; 0x222 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	da c0       	rjmp	.+436    	; 0x222 <__bad_interrupt>
      6e:	00 00       	nop
      70:	d8 c0       	rjmp	.+432    	; 0x222 <__bad_interrupt>
      72:	00 00       	nop
      74:	d6 c0       	rjmp	.+428    	; 0x222 <__bad_interrupt>
      76:	00 00       	nop
      78:	d4 c0       	rjmp	.+424    	; 0x222 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	d2 c0       	rjmp	.+420    	; 0x222 <__bad_interrupt>
      7e:	00 00       	nop
      80:	d0 c0       	rjmp	.+416    	; 0x222 <__bad_interrupt>
      82:	00 00       	nop
      84:	ce c0       	rjmp	.+412    	; 0x222 <__bad_interrupt>
      86:	00 00       	nop
      88:	cc c0       	rjmp	.+408    	; 0x222 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	ca c0       	rjmp	.+404    	; 0x222 <__bad_interrupt>
      8e:	00 00       	nop
      90:	c8 c0       	rjmp	.+400    	; 0x222 <__bad_interrupt>
      92:	00 00       	nop
      94:	c6 c0       	rjmp	.+396    	; 0x222 <__bad_interrupt>
      96:	00 00       	nop
      98:	c4 c0       	rjmp	.+392    	; 0x222 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	17 c1       	rjmp	.+558    	; 0x2cc <__vector_39>
      9e:	00 00       	nop
      a0:	6a c1       	rjmp	.+724    	; 0x376 <__vector_40>
      a2:	00 00       	nop
      a4:	be c1       	rjmp	.+892    	; 0x422 <__vector_41>
      a6:	00 00       	nop
      a8:	12 c2       	rjmp	.+1060   	; 0x4ce <__vector_42>
      aa:	00 00       	nop
      ac:	ba c0       	rjmp	.+372    	; 0x222 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	b8 c0       	rjmp	.+368    	; 0x222 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	b6 c0       	rjmp	.+364    	; 0x222 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	b4 c0       	rjmp	.+360    	; 0x222 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	b2 c0       	rjmp	.+356    	; 0x222 <__bad_interrupt>
      be:	00 00       	nop
      c0:	b0 c0       	rjmp	.+352    	; 0x222 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	ae c0       	rjmp	.+348    	; 0x222 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	ac c0       	rjmp	.+344    	; 0x222 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	aa c0       	rjmp	.+340    	; 0x222 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	a8 c0       	rjmp	.+336    	; 0x222 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	48 c4       	rjmp	.+2192   	; 0x966 <__vector_53>
      d6:	00 00       	nop
      d8:	a4 c0       	rjmp	.+328    	; 0x222 <__bad_interrupt>
      da:	00 00       	nop
      dc:	a2 c0       	rjmp	.+324    	; 0x222 <__bad_interrupt>
      de:	00 00       	nop
      e0:	a0 c0       	rjmp	.+320    	; 0x222 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	9e c0       	rjmp	.+316    	; 0x222 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	9c c0       	rjmp	.+312    	; 0x222 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	9a c0       	rjmp	.+308    	; 0x222 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	98 c0       	rjmp	.+304    	; 0x222 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	96 c0       	rjmp	.+300    	; 0x222 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	94 c0       	rjmp	.+296    	; 0x222 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	92 c0       	rjmp	.+292    	; 0x222 <__bad_interrupt>
      fe:	00 00       	nop
     100:	90 c0       	rjmp	.+288    	; 0x222 <__bad_interrupt>
     102:	00 00       	nop
     104:	8e c0       	rjmp	.+284    	; 0x222 <__bad_interrupt>
     106:	00 00       	nop
     108:	8c c0       	rjmp	.+280    	; 0x222 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	8a c0       	rjmp	.+276    	; 0x222 <__bad_interrupt>
     10e:	00 00       	nop
     110:	88 c0       	rjmp	.+272    	; 0x222 <__bad_interrupt>
     112:	00 00       	nop
     114:	86 c0       	rjmp	.+268    	; 0x222 <__bad_interrupt>
     116:	00 00       	nop
     118:	84 c0       	rjmp	.+264    	; 0x222 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	82 c0       	rjmp	.+260    	; 0x222 <__bad_interrupt>
     11e:	00 00       	nop
     120:	80 c0       	rjmp	.+256    	; 0x222 <__bad_interrupt>
     122:	00 00       	nop
     124:	7e c0       	rjmp	.+252    	; 0x222 <__bad_interrupt>
     126:	00 00       	nop
     128:	7c c0       	rjmp	.+248    	; 0x222 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	7a c0       	rjmp	.+244    	; 0x222 <__bad_interrupt>
     12e:	00 00       	nop
     130:	78 c0       	rjmp	.+240    	; 0x222 <__bad_interrupt>
     132:	00 00       	nop
     134:	0c 94 6e 09 	jmp	0x12dc	; 0x12dc <__vector_77>
     138:	74 c0       	rjmp	.+232    	; 0x222 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	0c 94 ad 09 	jmp	0x135a	; 0x135a <__vector_79>
     140:	0c 94 ec 09 	jmp	0x13d8	; 0x13d8 <__vector_80>
     144:	0c 94 2b 0a 	jmp	0x1456	; 0x1456 <__vector_81>
     148:	0c 94 6a 0a 	jmp	0x14d4	; 0x14d4 <__vector_82>
     14c:	0c 94 18 09 	jmp	0x1230	; 0x1230 <__vector_83>
     150:	68 c0       	rjmp	.+208    	; 0x222 <__bad_interrupt>
     152:	00 00       	nop
     154:	66 c0       	rjmp	.+204    	; 0x222 <__bad_interrupt>
     156:	00 00       	nop
     158:	64 c0       	rjmp	.+200    	; 0x222 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	62 c0       	rjmp	.+196    	; 0x222 <__bad_interrupt>
     15e:	00 00       	nop
     160:	60 c0       	rjmp	.+192    	; 0x222 <__bad_interrupt>
     162:	00 00       	nop
     164:	5e c0       	rjmp	.+188    	; 0x222 <__bad_interrupt>
     166:	00 00       	nop
     168:	5c c0       	rjmp	.+184    	; 0x222 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	5a c0       	rjmp	.+180    	; 0x222 <__bad_interrupt>
     16e:	00 00       	nop
     170:	58 c0       	rjmp	.+176    	; 0x222 <__bad_interrupt>
     172:	00 00       	nop
     174:	56 c0       	rjmp	.+172    	; 0x222 <__bad_interrupt>
     176:	00 00       	nop
     178:	54 c0       	rjmp	.+168    	; 0x222 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	52 c0       	rjmp	.+164    	; 0x222 <__bad_interrupt>
     17e:	00 00       	nop
     180:	50 c0       	rjmp	.+160    	; 0x222 <__bad_interrupt>
     182:	00 00       	nop
     184:	4e c0       	rjmp	.+156    	; 0x222 <__bad_interrupt>
     186:	00 00       	nop
     188:	53 c2       	rjmp	.+1190   	; 0x630 <__vector_98>
     18a:	00 00       	nop
     18c:	4a c0       	rjmp	.+148    	; 0x222 <__bad_interrupt>
     18e:	00 00       	nop
     190:	48 c0       	rjmp	.+144    	; 0x222 <__bad_interrupt>
     192:	00 00       	nop
     194:	46 c0       	rjmp	.+140    	; 0x222 <__bad_interrupt>
     196:	00 00       	nop
     198:	44 c0       	rjmp	.+136    	; 0x222 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	42 c0       	rjmp	.+132    	; 0x222 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	40 c0       	rjmp	.+128    	; 0x222 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	3e c0       	rjmp	.+124    	; 0x222 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	3c c0       	rjmp	.+120    	; 0x222 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	3a c0       	rjmp	.+116    	; 0x222 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	38 c0       	rjmp	.+112    	; 0x222 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	36 c0       	rjmp	.+108    	; 0x222 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	34 c0       	rjmp	.+104    	; 0x222 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	32 c0       	rjmp	.+100    	; 0x222 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	30 c0       	rjmp	.+96     	; 0x222 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	2e c0       	rjmp	.+92     	; 0x222 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	12 c3       	rjmp	.+1572   	; 0x7ee <__vector_114>
     1ca:	00 00       	nop
     1cc:	2a c0       	rjmp	.+84     	; 0x222 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	28 c0       	rjmp	.+80     	; 0x222 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	26 c0       	rjmp	.+76     	; 0x222 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	24 c0       	rjmp	.+72     	; 0x222 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	22 c0       	rjmp	.+68     	; 0x222 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	20 c0       	rjmp	.+64     	; 0x222 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	1e c0       	rjmp	.+60     	; 0x222 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	1c c0       	rjmp	.+56     	; 0x222 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	1a c0       	rjmp	.+52     	; 0x222 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	18 c0       	rjmp	.+48     	; 0x222 <__bad_interrupt>
	...

000001f4 <__ctors_end>:
     1f4:	11 24       	eor	r1, r1
     1f6:	1f be       	out	0x3f, r1	; 63
     1f8:	cf ef       	ldi	r28, 0xFF	; 255
     1fa:	cd bf       	out	0x3d, r28	; 61
     1fc:	df e3       	ldi	r29, 0x3F	; 63
     1fe:	de bf       	out	0x3e, r29	; 62
     200:	00 e0       	ldi	r16, 0x00	; 0
     202:	0c bf       	out	0x3c, r16	; 60
     204:	18 be       	out	0x38, r1	; 56
     206:	19 be       	out	0x39, r1	; 57
     208:	1a be       	out	0x3a, r1	; 58
     20a:	1b be       	out	0x3b, r1	; 59

0000020c <__do_clear_bss>:
     20c:	20 e2       	ldi	r18, 0x20	; 32
     20e:	a0 e0       	ldi	r26, 0x00	; 0
     210:	b0 e2       	ldi	r27, 0x20	; 32
     212:	01 c0       	rjmp	.+2      	; 0x216 <.do_clear_bss_start>

00000214 <.do_clear_bss_loop>:
     214:	1d 92       	st	X+, r1

00000216 <.do_clear_bss_start>:
     216:	af 33       	cpi	r26, 0x3F	; 63
     218:	b2 07       	cpc	r27, r18
     21a:	e1 f7       	brne	.-8      	; 0x214 <.do_clear_bss_loop>
     21c:	3d d7       	rcall	.+3706   	; 0x1098 <main>
     21e:	0c 94 07 0d 	jmp	0x1a0e	; 0x1a0e <_exit>

00000222 <__bad_interrupt>:
     222:	ee ce       	rjmp	.-548    	; 0x0 <__vectors>

00000224 <setup_ADCB>:
extern struct semaphore_t semaphores;
extern uint16_t threat_distance[4];
extern struct infrResults_t infrResults;

void setup_ADCB()
{
     224:	cf 93       	push	r28
     226:	df 93       	push	r29
     228:	cd b7       	in	r28, 0x3d	; 61
     22a:	de b7       	in	r29, 0x3e	; 62
	//set ADCB for channels 0-3 and enable (0xC1)
	ADCB_CTRLA = 0x01;
     22c:	80 e4       	ldi	r24, 0x40	; 64
     22e:	92 e0       	ldi	r25, 0x02	; 2
     230:	21 e0       	ldi	r18, 0x01	; 1
     232:	fc 01       	movw	r30, r24
     234:	20 83       	st	Z, r18
	
	//set voltage reference to 2.5v (AREFA)
	ADCB_REFCTRL = 0x20;
     236:	82 e4       	ldi	r24, 0x42	; 66
     238:	92 e0       	ldi	r25, 0x02	; 2
     23a:	20 e2       	ldi	r18, 0x20	; 32
     23c:	fc 01       	movw	r30, r24
     23e:	20 83       	st	Z, r18
	
	//set resolution to 12 bits
	ADCB_CTRLB = ADC_RESOLUTION_12BIT_gc;
     240:	81 e4       	ldi	r24, 0x41	; 65
     242:	92 e0       	ldi	r25, 0x02	; 2
     244:	fc 01       	movw	r30, r24
     246:	10 82       	st	Z, r1
	
	//set interrupt for on complete and med level priority
	ADCB_CH0_INTCTRL = 0x02;
     248:	82 e6       	ldi	r24, 0x62	; 98
     24a:	92 e0       	ldi	r25, 0x02	; 2
     24c:	22 e0       	ldi	r18, 0x02	; 2
     24e:	fc 01       	movw	r30, r24
     250:	20 83       	st	Z, r18
	ADCB_CH1_INTCTRL = 0x02;
     252:	8a e6       	ldi	r24, 0x6A	; 106
     254:	92 e0       	ldi	r25, 0x02	; 2
     256:	22 e0       	ldi	r18, 0x02	; 2
     258:	fc 01       	movw	r30, r24
     25a:	20 83       	st	Z, r18
	ADCB_CH2_INTCTRL = 0x02;
     25c:	82 e7       	ldi	r24, 0x72	; 114
     25e:	92 e0       	ldi	r25, 0x02	; 2
     260:	22 e0       	ldi	r18, 0x02	; 2
     262:	fc 01       	movw	r30, r24
     264:	20 83       	st	Z, r18
	ADCB_CH3_INTCTRL = 0x02;
     266:	8a e7       	ldi	r24, 0x7A	; 122
     268:	92 e0       	ldi	r25, 0x02	; 2
     26a:	22 e0       	ldi	r18, 0x02	; 2
     26c:	fc 01       	movw	r30, r24
     26e:	20 83       	st	Z, r18
	
	//set pre-scaler to divide by 4 (this was 512 for previous exp but 4 provides sufficient time and accuracy)
	ADCB_PRESCALER = ADC_PRESCALER_DIV4_gc;
     270:	84 e4       	ldi	r24, 0x44	; 68
     272:	92 e0       	ldi	r25, 0x02	; 2
     274:	fc 01       	movw	r30, r24
     276:	10 82       	st	Z, r1
	
	//enable pins 0 to 3 for ADC conversion, set mux channels to those pins
	ADCB.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN0_gc;
     278:	80 e4       	ldi	r24, 0x40	; 64
     27a:	92 e0       	ldi	r25, 0x02	; 2
     27c:	fc 01       	movw	r30, r24
     27e:	11 a2       	std	Z+33, r1	; 0x21
	ADCB.CH1.MUXCTRL = ADC_CH_MUXPOS_PIN1_gc;
     280:	80 e4       	ldi	r24, 0x40	; 64
     282:	92 e0       	ldi	r25, 0x02	; 2
     284:	28 e0       	ldi	r18, 0x08	; 8
     286:	fc 01       	movw	r30, r24
     288:	21 a7       	std	Z+41, r18	; 0x29
	ADCB.CH2.MUXCTRL = ADC_CH_MUXPOS_PIN2_gc;
     28a:	80 e4       	ldi	r24, 0x40	; 64
     28c:	92 e0       	ldi	r25, 0x02	; 2
     28e:	20 e1       	ldi	r18, 0x10	; 16
     290:	fc 01       	movw	r30, r24
     292:	21 ab       	std	Z+49, r18	; 0x31
	ADCB.CH3.MUXCTRL = ADC_CH_MUXPOS_PIN3_gc;
     294:	80 e4       	ldi	r24, 0x40	; 64
     296:	92 e0       	ldi	r25, 0x02	; 2
     298:	28 e1       	ldi	r18, 0x18	; 24
     29a:	fc 01       	movw	r30, r24
     29c:	21 af       	std	Z+57, r18	; 0x39
	
	//set the input mode
	ADCB.CH0.CTRL = ADC_CH_INPUTMODE_SINGLEENDED_gc | ADC_CH_GAIN_1X_gc;
     29e:	80 e4       	ldi	r24, 0x40	; 64
     2a0:	92 e0       	ldi	r25, 0x02	; 2
     2a2:	21 e0       	ldi	r18, 0x01	; 1
     2a4:	fc 01       	movw	r30, r24
     2a6:	20 a3       	std	Z+32, r18	; 0x20
	ADCB.CH1.CTRL = ADC_CH_INPUTMODE_SINGLEENDED_gc | ADC_CH_GAIN_1X_gc;
     2a8:	80 e4       	ldi	r24, 0x40	; 64
     2aa:	92 e0       	ldi	r25, 0x02	; 2
     2ac:	21 e0       	ldi	r18, 0x01	; 1
     2ae:	fc 01       	movw	r30, r24
     2b0:	20 a7       	std	Z+40, r18	; 0x28
	ADCB.CH2.CTRL = ADC_CH_INPUTMODE_SINGLEENDED_gc | ADC_CH_GAIN_1X_gc;
     2b2:	80 e4       	ldi	r24, 0x40	; 64
     2b4:	92 e0       	ldi	r25, 0x02	; 2
     2b6:	21 e0       	ldi	r18, 0x01	; 1
     2b8:	fc 01       	movw	r30, r24
     2ba:	20 ab       	std	Z+48, r18	; 0x30
	ADCB.CH3.CTRL = ADC_CH_INPUTMODE_SINGLEENDED_gc | ADC_CH_GAIN_1X_gc;
     2bc:	80 e4       	ldi	r24, 0x40	; 64
     2be:	92 e0       	ldi	r25, 0x02	; 2
     2c0:	21 e0       	ldi	r18, 0x01	; 1
     2c2:	fc 01       	movw	r30, r24
     2c4:	20 af       	std	Z+56, r18	; 0x38

	//results are contained in: ADCA.CHx.RES
	
}
     2c6:	df 91       	pop	r29
     2c8:	cf 91       	pop	r28
     2ca:	08 95       	ret

000002cc <__vector_39>:

//////////	Interrupts for ADC conversion completion, see sensors.c for a timing diagram

ISR(ADCB_CH0_vect)
{
     2cc:	1f 92       	push	r1
     2ce:	0f 92       	push	r0
     2d0:	00 90 3f 00 	lds	r0, 0x003F
     2d4:	0f 92       	push	r0
     2d6:	11 24       	eor	r1, r1
     2d8:	00 90 38 00 	lds	r0, 0x0038
     2dc:	0f 92       	push	r0
     2de:	10 92 38 00 	sts	0x0038, r1
     2e2:	00 90 3a 00 	lds	r0, 0x003A
     2e6:	0f 92       	push	r0
     2e8:	10 92 3a 00 	sts	0x003A, r1
     2ec:	00 90 3b 00 	lds	r0, 0x003B
     2f0:	0f 92       	push	r0
     2f2:	10 92 3b 00 	sts	0x003B, r1
     2f6:	2f 93       	push	r18
     2f8:	3f 93       	push	r19
     2fa:	8f 93       	push	r24
     2fc:	9f 93       	push	r25
     2fe:	ef 93       	push	r30
     300:	ff 93       	push	r31
     302:	cf 93       	push	r28
     304:	df 93       	push	r29
     306:	cd b7       	in	r28, 0x3d	; 61
     308:	de b7       	in	r29, 0x3e	; 62
	if (infrResults.lCount < NUM_INF_SENS_MEAS)
     30a:	80 91 2b 20 	lds	r24, 0x202B
     30e:	84 30       	cpi	r24, 0x04	; 4
     310:	b0 f4       	brcc	.+44     	; 0x33e <__vector_39+0x72>
	{
		infrResults.left[infrResults.lCount] = ADCB_CH0_RES;
     312:	80 91 2b 20 	lds	r24, 0x202B
     316:	88 2f       	mov	r24, r24
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	24 e6       	ldi	r18, 0x64	; 100
     31c:	32 e0       	ldi	r19, 0x02	; 2
     31e:	f9 01       	movw	r30, r18
     320:	20 81       	ld	r18, Z
     322:	31 81       	ldd	r19, Z+1	; 0x01
     324:	88 0f       	add	r24, r24
     326:	99 1f       	adc	r25, r25
     328:	85 5f       	subi	r24, 0xF5	; 245
     32a:	9f 4d       	sbci	r25, 0xDF	; 223
     32c:	fc 01       	movw	r30, r24
     32e:	20 83       	st	Z, r18
     330:	31 83       	std	Z+1, r19	; 0x01
		infrResults.lCount++;
     332:	80 91 2b 20 	lds	r24, 0x202B
     336:	8f 5f       	subi	r24, 0xFF	; 255
     338:	80 93 2b 20 	sts	0x202B, r24
     33c:	05 c0       	rjmp	.+10     	; 0x348 <__vector_39+0x7c>
	}
	else
	{
		semaphores.left_meas_done = 1;
     33e:	80 91 30 20 	lds	r24, 0x2030
     342:	82 60       	ori	r24, 0x02	; 2
     344:	80 93 30 20 	sts	0x2030, r24
	}
	
	
}
     348:	df 91       	pop	r29
     34a:	cf 91       	pop	r28
     34c:	ff 91       	pop	r31
     34e:	ef 91       	pop	r30
     350:	9f 91       	pop	r25
     352:	8f 91       	pop	r24
     354:	3f 91       	pop	r19
     356:	2f 91       	pop	r18
     358:	0f 90       	pop	r0
     35a:	00 92 3b 00 	sts	0x003B, r0
     35e:	0f 90       	pop	r0
     360:	00 92 3a 00 	sts	0x003A, r0
     364:	0f 90       	pop	r0
     366:	00 92 38 00 	sts	0x0038, r0
     36a:	0f 90       	pop	r0
     36c:	00 92 3f 00 	sts	0x003F, r0
     370:	0f 90       	pop	r0
     372:	1f 90       	pop	r1
     374:	18 95       	reti

00000376 <__vector_40>:

ISR(ADCB_CH1_vect)
{
     376:	1f 92       	push	r1
     378:	0f 92       	push	r0
     37a:	00 90 3f 00 	lds	r0, 0x003F
     37e:	0f 92       	push	r0
     380:	11 24       	eor	r1, r1
     382:	00 90 38 00 	lds	r0, 0x0038
     386:	0f 92       	push	r0
     388:	10 92 38 00 	sts	0x0038, r1
     38c:	00 90 3a 00 	lds	r0, 0x003A
     390:	0f 92       	push	r0
     392:	10 92 3a 00 	sts	0x003A, r1
     396:	00 90 3b 00 	lds	r0, 0x003B
     39a:	0f 92       	push	r0
     39c:	10 92 3b 00 	sts	0x003B, r1
     3a0:	2f 93       	push	r18
     3a2:	3f 93       	push	r19
     3a4:	8f 93       	push	r24
     3a6:	9f 93       	push	r25
     3a8:	ef 93       	push	r30
     3aa:	ff 93       	push	r31
     3ac:	cf 93       	push	r28
     3ae:	df 93       	push	r29
     3b0:	cd b7       	in	r28, 0x3d	; 61
     3b2:	de b7       	in	r29, 0x3e	; 62
	if (infrResults.fCount < NUM_INF_SENS_MEAS)
     3b4:	80 91 2d 20 	lds	r24, 0x202D
     3b8:	84 30       	cpi	r24, 0x04	; 4
     3ba:	b8 f4       	brcc	.+46     	; 0x3ea <__vector_40+0x74>
	{
		infrResults.front[infrResults.fCount] = ADCB_CH1_RES;
     3bc:	80 91 2d 20 	lds	r24, 0x202D
     3c0:	88 2f       	mov	r24, r24
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	2c e6       	ldi	r18, 0x6C	; 108
     3c6:	32 e0       	ldi	r19, 0x02	; 2
     3c8:	f9 01       	movw	r30, r18
     3ca:	20 81       	ld	r18, Z
     3cc:	31 81       	ldd	r19, Z+1	; 0x01
     3ce:	08 96       	adiw	r24, 0x08	; 8
     3d0:	88 0f       	add	r24, r24
     3d2:	99 1f       	adc	r25, r25
     3d4:	85 5f       	subi	r24, 0xF5	; 245
     3d6:	9f 4d       	sbci	r25, 0xDF	; 223
     3d8:	fc 01       	movw	r30, r24
     3da:	20 83       	st	Z, r18
     3dc:	31 83       	std	Z+1, r19	; 0x01
		infrResults.fCount++;
     3de:	80 91 2d 20 	lds	r24, 0x202D
     3e2:	8f 5f       	subi	r24, 0xFF	; 255
     3e4:	80 93 2d 20 	sts	0x202D, r24
     3e8:	05 c0       	rjmp	.+10     	; 0x3f4 <__vector_40+0x7e>
	}
	else
	{
		semaphores.front_meas_done = 1;
     3ea:	80 91 30 20 	lds	r24, 0x2030
     3ee:	88 60       	ori	r24, 0x08	; 8
     3f0:	80 93 30 20 	sts	0x2030, r24
	}
	
}
     3f4:	df 91       	pop	r29
     3f6:	cf 91       	pop	r28
     3f8:	ff 91       	pop	r31
     3fa:	ef 91       	pop	r30
     3fc:	9f 91       	pop	r25
     3fe:	8f 91       	pop	r24
     400:	3f 91       	pop	r19
     402:	2f 91       	pop	r18
     404:	0f 90       	pop	r0
     406:	00 92 3b 00 	sts	0x003B, r0
     40a:	0f 90       	pop	r0
     40c:	00 92 3a 00 	sts	0x003A, r0
     410:	0f 90       	pop	r0
     412:	00 92 38 00 	sts	0x0038, r0
     416:	0f 90       	pop	r0
     418:	00 92 3f 00 	sts	0x003F, r0
     41c:	0f 90       	pop	r0
     41e:	1f 90       	pop	r1
     420:	18 95       	reti

00000422 <__vector_41>:

ISR(ADCB_CH2_vect)
{
     422:	1f 92       	push	r1
     424:	0f 92       	push	r0
     426:	00 90 3f 00 	lds	r0, 0x003F
     42a:	0f 92       	push	r0
     42c:	11 24       	eor	r1, r1
     42e:	00 90 38 00 	lds	r0, 0x0038
     432:	0f 92       	push	r0
     434:	10 92 38 00 	sts	0x0038, r1
     438:	00 90 3a 00 	lds	r0, 0x003A
     43c:	0f 92       	push	r0
     43e:	10 92 3a 00 	sts	0x003A, r1
     442:	00 90 3b 00 	lds	r0, 0x003B
     446:	0f 92       	push	r0
     448:	10 92 3b 00 	sts	0x003B, r1
     44c:	2f 93       	push	r18
     44e:	3f 93       	push	r19
     450:	8f 93       	push	r24
     452:	9f 93       	push	r25
     454:	ef 93       	push	r30
     456:	ff 93       	push	r31
     458:	cf 93       	push	r28
     45a:	df 93       	push	r29
     45c:	cd b7       	in	r28, 0x3d	; 61
     45e:	de b7       	in	r29, 0x3e	; 62
	//record results for back conversion
	if (infrResults.bCount < NUM_INF_SENS_MEAS)
     460:	80 91 2e 20 	lds	r24, 0x202E
     464:	84 30       	cpi	r24, 0x04	; 4
     466:	b8 f4       	brcc	.+46     	; 0x496 <__vector_41+0x74>
	{
		infrResults.back[infrResults.bCount] = ADCB_CH2_RES;
     468:	80 91 2e 20 	lds	r24, 0x202E
     46c:	88 2f       	mov	r24, r24
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	24 e7       	ldi	r18, 0x74	; 116
     472:	32 e0       	ldi	r19, 0x02	; 2
     474:	f9 01       	movw	r30, r18
     476:	20 81       	ld	r18, Z
     478:	31 81       	ldd	r19, Z+1	; 0x01
     47a:	0c 96       	adiw	r24, 0x0c	; 12
     47c:	88 0f       	add	r24, r24
     47e:	99 1f       	adc	r25, r25
     480:	85 5f       	subi	r24, 0xF5	; 245
     482:	9f 4d       	sbci	r25, 0xDF	; 223
     484:	fc 01       	movw	r30, r24
     486:	20 83       	st	Z, r18
     488:	31 83       	std	Z+1, r19	; 0x01
		infrResults.bCount++;
     48a:	80 91 2e 20 	lds	r24, 0x202E
     48e:	8f 5f       	subi	r24, 0xFF	; 255
     490:	80 93 2e 20 	sts	0x202E, r24
     494:	05 c0       	rjmp	.+10     	; 0x4a0 <__vector_41+0x7e>
	}
	else
	{
		semaphores.back_meas_done = 1;
     496:	80 91 30 20 	lds	r24, 0x2030
     49a:	80 61       	ori	r24, 0x10	; 16
     49c:	80 93 30 20 	sts	0x2030, r24
	}
		
}
     4a0:	df 91       	pop	r29
     4a2:	cf 91       	pop	r28
     4a4:	ff 91       	pop	r31
     4a6:	ef 91       	pop	r30
     4a8:	9f 91       	pop	r25
     4aa:	8f 91       	pop	r24
     4ac:	3f 91       	pop	r19
     4ae:	2f 91       	pop	r18
     4b0:	0f 90       	pop	r0
     4b2:	00 92 3b 00 	sts	0x003B, r0
     4b6:	0f 90       	pop	r0
     4b8:	00 92 3a 00 	sts	0x003A, r0
     4bc:	0f 90       	pop	r0
     4be:	00 92 38 00 	sts	0x0038, r0
     4c2:	0f 90       	pop	r0
     4c4:	00 92 3f 00 	sts	0x003F, r0
     4c8:	0f 90       	pop	r0
     4ca:	1f 90       	pop	r1
     4cc:	18 95       	reti

000004ce <__vector_42>:

ISR(ADCB_CH3_vect)
{
     4ce:	1f 92       	push	r1
     4d0:	0f 92       	push	r0
     4d2:	00 90 3f 00 	lds	r0, 0x003F
     4d6:	0f 92       	push	r0
     4d8:	11 24       	eor	r1, r1
     4da:	00 90 38 00 	lds	r0, 0x0038
     4de:	0f 92       	push	r0
     4e0:	10 92 38 00 	sts	0x0038, r1
     4e4:	00 90 3a 00 	lds	r0, 0x003A
     4e8:	0f 92       	push	r0
     4ea:	10 92 3a 00 	sts	0x003A, r1
     4ee:	00 90 3b 00 	lds	r0, 0x003B
     4f2:	0f 92       	push	r0
     4f4:	10 92 3b 00 	sts	0x003B, r1
     4f8:	2f 93       	push	r18
     4fa:	3f 93       	push	r19
     4fc:	8f 93       	push	r24
     4fe:	9f 93       	push	r25
     500:	ef 93       	push	r30
     502:	ff 93       	push	r31
     504:	cf 93       	push	r28
     506:	df 93       	push	r29
     508:	cd b7       	in	r28, 0x3d	; 61
     50a:	de b7       	in	r29, 0x3e	; 62
	if (infrResults.rCount < NUM_INF_SENS_MEAS)
     50c:	80 91 2c 20 	lds	r24, 0x202C
     510:	84 30       	cpi	r24, 0x04	; 4
     512:	b8 f4       	brcc	.+46     	; 0x542 <__vector_42+0x74>
	{
		infrResults.right[infrResults.rCount] = ADCB_CH3_RES;
     514:	80 91 2c 20 	lds	r24, 0x202C
     518:	88 2f       	mov	r24, r24
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	2c e7       	ldi	r18, 0x7C	; 124
     51e:	32 e0       	ldi	r19, 0x02	; 2
     520:	f9 01       	movw	r30, r18
     522:	20 81       	ld	r18, Z
     524:	31 81       	ldd	r19, Z+1	; 0x01
     526:	04 96       	adiw	r24, 0x04	; 4
     528:	88 0f       	add	r24, r24
     52a:	99 1f       	adc	r25, r25
     52c:	85 5f       	subi	r24, 0xF5	; 245
     52e:	9f 4d       	sbci	r25, 0xDF	; 223
     530:	fc 01       	movw	r30, r24
     532:	20 83       	st	Z, r18
     534:	31 83       	std	Z+1, r19	; 0x01
		infrResults.rCount++;
     536:	80 91 2c 20 	lds	r24, 0x202C
     53a:	8f 5f       	subi	r24, 0xFF	; 255
     53c:	80 93 2c 20 	sts	0x202C, r24
     540:	05 c0       	rjmp	.+10     	; 0x54c <__vector_42+0x7e>
	}
	else
	{
		semaphores.right_meas_done = 1;
     542:	80 91 30 20 	lds	r24, 0x2030
     546:	84 60       	ori	r24, 0x04	; 4
     548:	80 93 30 20 	sts	0x2030, r24
	}
	
     54c:	df 91       	pop	r29
     54e:	cf 91       	pop	r28
     550:	ff 91       	pop	r31
     552:	ef 91       	pop	r30
     554:	9f 91       	pop	r25
     556:	8f 91       	pop	r24
     558:	3f 91       	pop	r19
     55a:	2f 91       	pop	r18
     55c:	0f 90       	pop	r0
     55e:	00 92 3b 00 	sts	0x003B, r0
     562:	0f 90       	pop	r0
     564:	00 92 3a 00 	sts	0x003A, r0
     568:	0f 90       	pop	r0
     56a:	00 92 38 00 	sts	0x0038, r0
     56e:	0f 90       	pop	r0
     570:	00 92 3f 00 	sts	0x003F, r0
     574:	0f 90       	pop	r0
     576:	1f 90       	pop	r1
     578:	18 95       	reti

0000057a <setup_gpio>:
extern struct semaphore_t semaphores;
extern struct motorControl_t motorControl;
extern uint8_t state;

void setup_gpio()
{
     57a:	cf 93       	push	r28
     57c:	df 93       	push	r29
     57e:	cd b7       	in	r28, 0x3d	; 61
     580:	de b7       	in	r29, 0x3e	; 62
	//setup port B for input so infrared sensors can send their reaadings for ADC conversion
	PORTB_DIR = 0x00;
     582:	80 e2       	ldi	r24, 0x20	; 32
     584:	96 e0       	ldi	r25, 0x06	; 6
     586:	fc 01       	movw	r30, r24
     588:	10 82       	st	Z, r1
	
	//setup LEDs for debugging
	LED_PORT.DIR = 0xff;
     58a:	80 ee       	ldi	r24, 0xE0	; 224
     58c:	96 e0       	ldi	r25, 0x06	; 6
     58e:	2f ef       	ldi	r18, 0xFF	; 255
     590:	fc 01       	movw	r30, r24
     592:	20 83       	st	Z, r18
	LED_PORT.OUT = 0x00;
     594:	80 ee       	ldi	r24, 0xE0	; 224
     596:	96 e0       	ldi	r25, 0x06	; 6
     598:	fc 01       	movw	r30, r24
     59a:	14 82       	std	Z+4, r1	; 0x04
	
	//port D is going to be used to control 
	//the motors' direction (hook up to phase pins on H-Bridge)
	PORTD_DIR = 0x0f;
     59c:	80 e6       	ldi	r24, 0x60	; 96
     59e:	96 e0       	ldi	r25, 0x06	; 6
     5a0:	2f e0       	ldi	r18, 0x0F	; 15
     5a2:	fc 01       	movw	r30, r24
     5a4:	20 83       	st	Z, r18
	
	//turn on port E is used for PWM motor speed control, hook up to enable pins on H-bridge
	PORTE_DIR = 0xff;
     5a6:	80 e8       	ldi	r24, 0x80	; 128
     5a8:	96 e0       	ldi	r25, 0x06	; 6
     5aa:	2f ef       	ldi	r18, 0xFF	; 255
     5ac:	fc 01       	movw	r30, r24
     5ae:	20 83       	st	Z, r18
	
}
     5b0:	df 91       	pop	r29
     5b2:	cf 91       	pop	r28
     5b4:	08 95       	ret

000005b6 <setup_btn_interrupt>:

void setup_btn_interrupt()
{
     5b6:	cf 93       	push	r28
     5b8:	df 93       	push	r29
     5ba:	cd b7       	in	r28, 0x3d	; 61
     5bc:	de b7       	in	r29, 0x3e	; 62
	//set port j for input from the buttons
	PORTJ_DIRSET = 0x00;
     5be:	81 e0       	ldi	r24, 0x01	; 1
     5c0:	97 e0       	ldi	r25, 0x07	; 7
     5c2:	fc 01       	movw	r30, r24
     5c4:	10 82       	st	Z, r1
	
	//set interrupt for buttons 1 to 8
	PORTJ_INT0MASK = BUTTON_1 | BUTTON_2 | BUTTON_3 | BUTTON_4 | BUTTON_5 | BUTTON_6 | BUTTON_7 | BUTTON_8;
     5c6:	8a e0       	ldi	r24, 0x0A	; 10
     5c8:	97 e0       	ldi	r25, 0x07	; 7
     5ca:	2f ef       	ldi	r18, 0xFF	; 255
     5cc:	fc 01       	movw	r30, r24
     5ce:	20 83       	st	Z, r18
	
	//set buttons as a medium level interrupt
	PORTJ_INTCTRL = PMIC_MEDLVLEX_bm;
     5d0:	89 e0       	ldi	r24, 0x09	; 9
     5d2:	97 e0       	ldi	r25, 0x07	; 7
     5d4:	22 e0       	ldi	r18, 0x02	; 2
     5d6:	fc 01       	movw	r30, r24
     5d8:	20 83       	st	Z, r18
	
	//setup interrupt to fire on rising edge of button push
	PORTJ_PIN0CTRL = 0x01;
     5da:	80 e1       	ldi	r24, 0x10	; 16
     5dc:	97 e0       	ldi	r25, 0x07	; 7
     5de:	21 e0       	ldi	r18, 0x01	; 1
     5e0:	fc 01       	movw	r30, r24
     5e2:	20 83       	st	Z, r18
	PORTJ_PIN1CTRL = 0x01;
     5e4:	81 e1       	ldi	r24, 0x11	; 17
     5e6:	97 e0       	ldi	r25, 0x07	; 7
     5e8:	21 e0       	ldi	r18, 0x01	; 1
     5ea:	fc 01       	movw	r30, r24
     5ec:	20 83       	st	Z, r18
	PORTJ_PIN2CTRL = 0x01;
     5ee:	82 e1       	ldi	r24, 0x12	; 18
     5f0:	97 e0       	ldi	r25, 0x07	; 7
     5f2:	21 e0       	ldi	r18, 0x01	; 1
     5f4:	fc 01       	movw	r30, r24
     5f6:	20 83       	st	Z, r18
	PORTJ_PIN3CTRL = 0x01;
     5f8:	83 e1       	ldi	r24, 0x13	; 19
     5fa:	97 e0       	ldi	r25, 0x07	; 7
     5fc:	21 e0       	ldi	r18, 0x01	; 1
     5fe:	fc 01       	movw	r30, r24
     600:	20 83       	st	Z, r18
	PORTJ_PIN4CTRL = 0x01;
     602:	84 e1       	ldi	r24, 0x14	; 20
     604:	97 e0       	ldi	r25, 0x07	; 7
     606:	21 e0       	ldi	r18, 0x01	; 1
     608:	fc 01       	movw	r30, r24
     60a:	20 83       	st	Z, r18
	PORTJ_PIN5CTRL = 0x01;
     60c:	85 e1       	ldi	r24, 0x15	; 21
     60e:	97 e0       	ldi	r25, 0x07	; 7
     610:	21 e0       	ldi	r18, 0x01	; 1
     612:	fc 01       	movw	r30, r24
     614:	20 83       	st	Z, r18
	PORTJ_PIN6CTRL = 0x01;
     616:	86 e1       	ldi	r24, 0x16	; 22
     618:	97 e0       	ldi	r25, 0x07	; 7
     61a:	21 e0       	ldi	r18, 0x01	; 1
     61c:	fc 01       	movw	r30, r24
     61e:	20 83       	st	Z, r18
	PORTJ_PIN7CTRL = 0x01;
     620:	87 e1       	ldi	r24, 0x17	; 23
     622:	97 e0       	ldi	r25, 0x07	; 7
     624:	21 e0       	ldi	r18, 0x01	; 1
     626:	fc 01       	movw	r30, r24
     628:	20 83       	st	Z, r18
	
}
     62a:	df 91       	pop	r29
     62c:	cf 91       	pop	r28
     62e:	08 95       	ret

00000630 <__vector_98>:

//interrupt for handling button presses
ISR(PORTJ_INT0_vect)
{
     630:	1f 92       	push	r1
     632:	0f 92       	push	r0
     634:	00 90 3f 00 	lds	r0, 0x003F
     638:	0f 92       	push	r0
     63a:	11 24       	eor	r1, r1
     63c:	00 90 38 00 	lds	r0, 0x0038
     640:	0f 92       	push	r0
     642:	10 92 38 00 	sts	0x0038, r1
     646:	00 90 3a 00 	lds	r0, 0x003A
     64a:	0f 92       	push	r0
     64c:	10 92 3a 00 	sts	0x003A, r1
     650:	00 90 3b 00 	lds	r0, 0x003B
     654:	0f 92       	push	r0
     656:	10 92 3b 00 	sts	0x003B, r1
     65a:	2f 93       	push	r18
     65c:	3f 93       	push	r19
     65e:	8f 93       	push	r24
     660:	9f 93       	push	r25
     662:	ef 93       	push	r30
     664:	ff 93       	push	r31
     666:	cf 93       	push	r28
     668:	df 93       	push	r29
     66a:	cd b7       	in	r28, 0x3d	; 61
     66c:	de b7       	in	r29, 0x3e	; 62
	LED_PORT.OUT ^= 0x80;	//toggle msb for debugging
     66e:	80 ee       	ldi	r24, 0xE0	; 224
     670:	96 e0       	ldi	r25, 0x06	; 6
     672:	20 ee       	ldi	r18, 0xE0	; 224
     674:	36 e0       	ldi	r19, 0x06	; 6
     676:	f9 01       	movw	r30, r18
     678:	34 81       	ldd	r19, Z+4	; 0x04
     67a:	20 e8       	ldi	r18, 0x80	; 128
     67c:	23 27       	eor	r18, r19
     67e:	fc 01       	movw	r30, r24
     680:	24 83       	std	Z+4, r18	; 0x04
	
	//use portj's input (i.e. which button is pressed) to figure out what to do
	switch(PORTJ_IN)
     682:	88 e0       	ldi	r24, 0x08	; 8
     684:	97 e0       	ldi	r25, 0x07	; 7
     686:	fc 01       	movw	r30, r24
     688:	80 81       	ld	r24, Z
     68a:	88 2f       	mov	r24, r24
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	88 30       	cpi	r24, 0x08	; 8
     690:	91 05       	cpc	r25, r1
     692:	09 f4       	brne	.+2      	; 0x696 <__vector_98+0x66>
     694:	42 c0       	rjmp	.+132    	; 0x71a <__vector_98+0xea>
     696:	89 30       	cpi	r24, 0x09	; 9
     698:	91 05       	cpc	r25, r1
     69a:	54 f4       	brge	.+20     	; 0x6b0 <__vector_98+0x80>
     69c:	82 30       	cpi	r24, 0x02	; 2
     69e:	91 05       	cpc	r25, r1
     6a0:	29 f1       	breq	.+74     	; 0x6ec <__vector_98+0xbc>
     6a2:	84 30       	cpi	r24, 0x04	; 4
     6a4:	91 05       	cpc	r25, r1
     6a6:	71 f1       	breq	.+92     	; 0x704 <__vector_98+0xd4>
     6a8:	81 30       	cpi	r24, 0x01	; 1
     6aa:	91 05       	cpc	r25, r1
     6ac:	a9 f0       	breq	.+42     	; 0x6d8 <__vector_98+0xa8>
		
			break;
		
		default:
		//no valid button pressed do nothing
		break;
     6ae:	70 c0       	rjmp	.+224    	; 0x790 <__vector_98+0x160>
ISR(PORTJ_INT0_vect)
{
	LED_PORT.OUT ^= 0x80;	//toggle msb for debugging
	
	//use portj's input (i.e. which button is pressed) to figure out what to do
	switch(PORTJ_IN)
     6b0:	80 32       	cpi	r24, 0x20	; 32
     6b2:	91 05       	cpc	r25, r1
     6b4:	09 f4       	brne	.+2      	; 0x6b8 <__vector_98+0x88>
     6b6:	51 c0       	rjmp	.+162    	; 0x75a <__vector_98+0x12a>
     6b8:	81 32       	cpi	r24, 0x21	; 33
     6ba:	91 05       	cpc	r25, r1
     6bc:	24 f4       	brge	.+8      	; 0x6c6 <__vector_98+0x96>
     6be:	80 31       	cpi	r24, 0x10	; 16
     6c0:	91 05       	cpc	r25, r1
     6c2:	b9 f1       	breq	.+110    	; 0x732 <__vector_98+0x102>
		
			break;
		
		default:
		//no valid button pressed do nothing
		break;
     6c4:	65 c0       	rjmp	.+202    	; 0x790 <__vector_98+0x160>
ISR(PORTJ_INT0_vect)
{
	LED_PORT.OUT ^= 0x80;	//toggle msb for debugging
	
	//use portj's input (i.e. which button is pressed) to figure out what to do
	switch(PORTJ_IN)
     6c6:	80 34       	cpi	r24, 0x40	; 64
     6c8:	91 05       	cpc	r25, r1
     6ca:	09 f4       	brne	.+2      	; 0x6ce <__vector_98+0x9e>
     6cc:	5a c0       	rjmp	.+180    	; 0x782 <__vector_98+0x152>
     6ce:	80 38       	cpi	r24, 0x80	; 128
     6d0:	91 05       	cpc	r25, r1
     6d2:	09 f4       	brne	.+2      	; 0x6d6 <__vector_98+0xa6>
     6d4:	59 c0       	rjmp	.+178    	; 0x788 <__vector_98+0x158>
		
			break;
		
		default:
		//no valid button pressed do nothing
		break;
     6d6:	5c c0       	rjmp	.+184    	; 0x790 <__vector_98+0x160>
	//use portj's input (i.e. which button is pressed) to figure out what to do
	switch(PORTJ_IN)
	{
		case (BUTTON_1):
			//set speed to 0
			motorControl.target_speed_ticks = 0;
     6d8:	10 92 34 20 	sts	0x2034, r1
     6dc:	10 92 35 20 	sts	0x2035, r1
			semaphores.change_speed = 1;
     6e0:	80 91 30 20 	lds	r24, 0x2030
     6e4:	80 62       	ori	r24, 0x20	; 32
     6e6:	80 93 30 20 	sts	0x2030, r24
		
			break;
     6ea:	52 c0       	rjmp	.+164    	; 0x790 <__vector_98+0x160>
		
		case (BUTTON_2):
			//change speed to fast
			motorControl.target_speed_ticks = MOTOR_FAST_TICKS;
     6ec:	80 e4       	ldi	r24, 0x40	; 64
     6ee:	9f e1       	ldi	r25, 0x1F	; 31
     6f0:	80 93 34 20 	sts	0x2034, r24
     6f4:	90 93 35 20 	sts	0x2035, r25
			semaphores.change_speed = 1;
     6f8:	80 91 30 20 	lds	r24, 0x2030
     6fc:	80 62       	ori	r24, 0x20	; 32
     6fe:	80 93 30 20 	sts	0x2030, r24
		
			break;
     702:	46 c0       	rjmp	.+140    	; 0x790 <__vector_98+0x160>
		
		case (BUTTON_3):
			//change motor to left
			motorControl.direction = LEFT;
     704:	80 91 36 20 	lds	r24, 0x2036
     708:	8f 78       	andi	r24, 0x8F	; 143
     70a:	80 93 36 20 	sts	0x2036, r24
			semaphores.change_direction = 1;
     70e:	80 91 30 20 	lds	r24, 0x2030
     712:	80 64       	ori	r24, 0x40	; 64
     714:	80 93 30 20 	sts	0x2030, r24
		
			break;
     718:	3b c0       	rjmp	.+118    	; 0x790 <__vector_98+0x160>
		
		case (BUTTON_4):
			//change motor to forward
			motorControl.direction = FORWARD;
     71a:	80 91 36 20 	lds	r24, 0x2036
     71e:	8f 78       	andi	r24, 0x8F	; 143
     720:	80 61       	ori	r24, 0x10	; 16
     722:	80 93 36 20 	sts	0x2036, r24
			semaphores.change_direction = 1;
     726:	80 91 30 20 	lds	r24, 0x2030
     72a:	80 64       	ori	r24, 0x40	; 64
     72c:	80 93 30 20 	sts	0x2030, r24
		
			break;
     730:	2f c0       	rjmp	.+94     	; 0x790 <__vector_98+0x160>
		
		case(BUTTON_5):
			if (state == TESTING)
     732:	80 91 0a 20 	lds	r24, 0x200A
     736:	83 30       	cpi	r24, 0x03	; 3
     738:	61 f4       	brne	.+24     	; 0x752 <__vector_98+0x122>
			{
				//change motor to backwards
				motorControl.direction = BACKWARD;
     73a:	80 91 36 20 	lds	r24, 0x2036
     73e:	8f 78       	andi	r24, 0x8F	; 143
     740:	80 62       	ori	r24, 0x20	; 32
     742:	80 93 36 20 	sts	0x2036, r24
				semaphores.change_direction = 1;
     746:	80 91 30 20 	lds	r24, 0x2030
     74a:	80 64       	ori	r24, 0x40	; 64
     74c:	80 93 30 20 	sts	0x2030, r24
			else
			{
				state = SPINNING;
			}
		
			break;
     750:	1f c0       	rjmp	.+62     	; 0x790 <__vector_98+0x160>
				motorControl.direction = BACKWARD;
				semaphores.change_direction = 1;
			}
			else
			{
				state = SPINNING;
     752:	82 e0       	ldi	r24, 0x02	; 2
     754:	80 93 0a 20 	sts	0x200A, r24
			}
		
			break;
     758:	1b c0       	rjmp	.+54     	; 0x790 <__vector_98+0x160>
		
		case(BUTTON_6):
			if (state == TESTING)
     75a:	80 91 0a 20 	lds	r24, 0x200A
     75e:	83 30       	cpi	r24, 0x03	; 3
     760:	61 f4       	brne	.+24     	; 0x77a <__vector_98+0x14a>
			{
				//change motor to right
				motorControl.direction = RIGHT;
     762:	80 91 36 20 	lds	r24, 0x2036
     766:	8f 78       	andi	r24, 0x8F	; 143
     768:	80 63       	ori	r24, 0x30	; 48
     76a:	80 93 36 20 	sts	0x2036, r24
				semaphores.change_direction = 1;
     76e:	80 91 30 20 	lds	r24, 0x2030
     772:	80 64       	ori	r24, 0x40	; 64
     774:	80 93 30 20 	sts	0x2030, r24
			else
			{
				state = TRAPPED;
			}
		
			break;
     778:	0b c0       	rjmp	.+22     	; 0x790 <__vector_98+0x160>
				motorControl.direction = RIGHT;
				semaphores.change_direction = 1;
			}
			else
			{
				state = TRAPPED;
     77a:	81 e0       	ldi	r24, 0x01	; 1
     77c:	80 93 0a 20 	sts	0x200A, r24
			}
		
			break;
     780:	07 c0       	rjmp	.+14     	; 0x790 <__vector_98+0x160>
		
		case(BUTTON_7):
			state = ESCAPING;
     782:	10 92 0a 20 	sts	0x200A, r1
		
			break;
     786:	04 c0       	rjmp	.+8      	; 0x790 <__vector_98+0x160>
		
		case(BUTTON_8):
			//set state to testing
			state = TESTING;
     788:	83 e0       	ldi	r24, 0x03	; 3
     78a:	80 93 0a 20 	sts	0x200A, r24
		
			break;
     78e:	00 00       	nop
		//no valid button pressed do nothing
		break;
		
	}
	
}
     790:	df 91       	pop	r29
     792:	cf 91       	pop	r28
     794:	ff 91       	pop	r31
     796:	ef 91       	pop	r30
     798:	9f 91       	pop	r25
     79a:	8f 91       	pop	r24
     79c:	3f 91       	pop	r19
     79e:	2f 91       	pop	r18
     7a0:	0f 90       	pop	r0
     7a2:	00 92 3b 00 	sts	0x003B, r0
     7a6:	0f 90       	pop	r0
     7a8:	00 92 3a 00 	sts	0x003A, r0
     7ac:	0f 90       	pop	r0
     7ae:	00 92 38 00 	sts	0x0038, r0
     7b2:	0f 90       	pop	r0
     7b4:	00 92 3f 00 	sts	0x003F, r0
     7b8:	0f 90       	pop	r0
     7ba:	1f 90       	pop	r1
     7bc:	18 95       	reti

000007be <setup_F1_LEDTimer>:

void setup_F1_LEDTimer()
{
     7be:	cf 93       	push	r28
     7c0:	df 93       	push	r29
     7c2:	cd b7       	in	r28, 0x3d	; 61
     7c4:	de b7       	in	r29, 0x3e	; 62
	//setup period for timer to 50000 ticks (assuming 32MHz clock and 64 prescale, this is 100ms)
	TCF1_PER = 50000;
     7c6:	86 e6       	ldi	r24, 0x66	; 102
     7c8:	9b e0       	ldi	r25, 0x0B	; 11
     7ca:	20 e5       	ldi	r18, 0x50	; 80
     7cc:	33 ec       	ldi	r19, 0xC3	; 195
     7ce:	fc 01       	movw	r30, r24
     7d0:	20 83       	st	Z, r18
     7d2:	31 83       	std	Z+1, r19	; 0x01

	//set prescaler for counter to 64 counts per 1 tick
	TCF1_CTRLA = 0x05;
     7d4:	80 e4       	ldi	r24, 0x40	; 64
     7d6:	9b e0       	ldi	r25, 0x0B	; 11
     7d8:	25 e0       	ldi	r18, 0x05	; 5
     7da:	fc 01       	movw	r30, r24
     7dc:	20 83       	st	Z, r18

	//set interrupt priority to low
	TCF1_INTCTRLA = 0x01;
     7de:	86 e4       	ldi	r24, 0x46	; 70
     7e0:	9b e0       	ldi	r25, 0x0B	; 11
     7e2:	21 e0       	ldi	r18, 0x01	; 1
     7e4:	fc 01       	movw	r30, r24
     7e6:	20 83       	st	Z, r18
	
}
     7e8:	df 91       	pop	r29
     7ea:	cf 91       	pop	r28
     7ec:	08 95       	ret

000007ee <__vector_114>:

ISR(TCF1_OVF_vect)
{
     7ee:	1f 92       	push	r1
     7f0:	0f 92       	push	r0
     7f2:	00 90 3f 00 	lds	r0, 0x003F
     7f6:	0f 92       	push	r0
     7f8:	11 24       	eor	r1, r1
     7fa:	00 90 38 00 	lds	r0, 0x0038
     7fe:	0f 92       	push	r0
     800:	10 92 38 00 	sts	0x0038, r1
     804:	00 90 3a 00 	lds	r0, 0x003A
     808:	0f 92       	push	r0
     80a:	10 92 3a 00 	sts	0x003A, r1
     80e:	8f 93       	push	r24
     810:	cf 93       	push	r28
     812:	df 93       	push	r29
     814:	cd b7       	in	r28, 0x3d	; 61
     816:	de b7       	in	r29, 0x3e	; 62
	semaphores.led_toggle = 1;
     818:	80 91 31 20 	lds	r24, 0x2031
     81c:	81 60       	ori	r24, 0x01	; 1
     81e:	80 93 31 20 	sts	0x2031, r24
}
     822:	df 91       	pop	r29
     824:	cf 91       	pop	r28
     826:	8f 91       	pop	r24
     828:	0f 90       	pop	r0
     82a:	00 92 3a 00 	sts	0x003A, r0
     82e:	0f 90       	pop	r0
     830:	00 92 38 00 	sts	0x0038, r0
     834:	0f 90       	pop	r0
     836:	00 92 3f 00 	sts	0x003F, r0
     83a:	0f 90       	pop	r0
     83c:	1f 90       	pop	r1
     83e:	18 95       	reti

00000840 <next_spin_led>:

void next_spin_led()
{
     840:	cf 93       	push	r28
     842:	df 93       	push	r29
     844:	cd b7       	in	r28, 0x3d	; 61
     846:	de b7       	in	r29, 0x3e	; 62
	if (LED_PORT.OUT == 0x00) LED_PORT.OUT = 0x01;
     848:	80 ee       	ldi	r24, 0xE0	; 224
     84a:	96 e0       	ldi	r25, 0x06	; 6
     84c:	fc 01       	movw	r30, r24
     84e:	84 81       	ldd	r24, Z+4	; 0x04
     850:	88 23       	and	r24, r24
     852:	31 f4       	brne	.+12     	; 0x860 <next_spin_led+0x20>
     854:	80 ee       	ldi	r24, 0xE0	; 224
     856:	96 e0       	ldi	r25, 0x06	; 6
     858:	21 e0       	ldi	r18, 0x01	; 1
     85a:	fc 01       	movw	r30, r24
     85c:	24 83       	std	Z+4, r18	; 0x04
     85e:	09 c0       	rjmp	.+18     	; 0x872 <next_spin_led+0x32>
	else LED_PORT.OUT *= 2;	
     860:	80 ee       	ldi	r24, 0xE0	; 224
     862:	96 e0       	ldi	r25, 0x06	; 6
     864:	20 ee       	ldi	r18, 0xE0	; 224
     866:	36 e0       	ldi	r19, 0x06	; 6
     868:	f9 01       	movw	r30, r18
     86a:	24 81       	ldd	r18, Z+4	; 0x04
     86c:	22 0f       	add	r18, r18
     86e:	fc 01       	movw	r30, r24
     870:	24 83       	std	Z+4, r18	; 0x04
}
     872:	df 91       	pop	r29
     874:	cf 91       	pop	r28
     876:	08 95       	ret

00000878 <initialize_motorControl>:
	TCE0_CCA = desired_speed;
	TCE0_CCB = desired_speed;
	TCE0_CCC = desired_speed;
	TCE0_CCD = desired_speed;
	
}
     878:	cf 93       	push	r28
     87a:	df 93       	push	r29
     87c:	cd b7       	in	r28, 0x3d	; 61
     87e:	de b7       	in	r29, 0x3e	; 62
     880:	10 92 32 20 	sts	0x2032, r1
     884:	10 92 33 20 	sts	0x2033, r1
     888:	10 92 34 20 	sts	0x2034, r1
     88c:	10 92 35 20 	sts	0x2035, r1
     890:	80 91 36 20 	lds	r24, 0x2036
     894:	8e 7f       	andi	r24, 0xFE	; 254
     896:	80 93 36 20 	sts	0x2036, r24
     89a:	80 91 36 20 	lds	r24, 0x2036
     89e:	8d 7f       	andi	r24, 0xFD	; 253
     8a0:	80 93 36 20 	sts	0x2036, r24
     8a4:	80 91 36 20 	lds	r24, 0x2036
     8a8:	8b 7f       	andi	r24, 0xFB	; 251
     8aa:	80 93 36 20 	sts	0x2036, r24
     8ae:	80 91 36 20 	lds	r24, 0x2036
     8b2:	87 7f       	andi	r24, 0xF7	; 247
     8b4:	80 93 36 20 	sts	0x2036, r24
     8b8:	80 91 36 20 	lds	r24, 0x2036
     8bc:	8f 78       	andi	r24, 0x8F	; 143
     8be:	80 61       	ori	r24, 0x10	; 16
     8c0:	80 93 36 20 	sts	0x2036, r24
     8c4:	84 e6       	ldi	r24, 0x64	; 100
     8c6:	96 e0       	ldi	r25, 0x06	; 6
     8c8:	2f e0       	ldi	r18, 0x0F	; 15
     8ca:	fc 01       	movw	r30, r24
     8cc:	20 83       	st	Z, r18
     8ce:	df 91       	pop	r29
     8d0:	cf 91       	pop	r28
     8d2:	08 95       	ret

000008d4 <setup_E0_motorControl>:
     8d4:	cf 93       	push	r28
     8d6:	df 93       	push	r29
     8d8:	cd b7       	in	r28, 0x3d	; 61
     8da:	de b7       	in	r29, 0x3e	; 62
     8dc:	86 e2       	ldi	r24, 0x26	; 38
     8de:	9a e0       	ldi	r25, 0x0A	; 10
     8e0:	20 e1       	ldi	r18, 0x10	; 16
     8e2:	37 e2       	ldi	r19, 0x27	; 39
     8e4:	fc 01       	movw	r30, r24
     8e6:	20 83       	st	Z, r18
     8e8:	31 83       	std	Z+1, r19	; 0x01
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	9a e0       	ldi	r25, 0x0A	; 10
     8ee:	25 e0       	ldi	r18, 0x05	; 5
     8f0:	fc 01       	movw	r30, r24
     8f2:	20 83       	st	Z, r18
     8f4:	81 e0       	ldi	r24, 0x01	; 1
     8f6:	9a e0       	ldi	r25, 0x0A	; 10
     8f8:	23 ef       	ldi	r18, 0xF3	; 243
     8fa:	fc 01       	movw	r30, r24
     8fc:	20 83       	st	Z, r18
     8fe:	88 e2       	ldi	r24, 0x28	; 40
     900:	9a e0       	ldi	r25, 0x0A	; 10
     902:	fc 01       	movw	r30, r24
     904:	10 82       	st	Z, r1
     906:	11 82       	std	Z+1, r1	; 0x01
     908:	8a e2       	ldi	r24, 0x2A	; 42
     90a:	9a e0       	ldi	r25, 0x0A	; 10
     90c:	fc 01       	movw	r30, r24
     90e:	10 82       	st	Z, r1
     910:	11 82       	std	Z+1, r1	; 0x01
     912:	8c e2       	ldi	r24, 0x2C	; 44
     914:	9a e0       	ldi	r25, 0x0A	; 10
     916:	fc 01       	movw	r30, r24
     918:	10 82       	st	Z, r1
     91a:	11 82       	std	Z+1, r1	; 0x01
     91c:	8e e2       	ldi	r24, 0x2E	; 46
     91e:	9a e0       	ldi	r25, 0x0A	; 10
     920:	fc 01       	movw	r30, r24
     922:	10 82       	st	Z, r1
     924:	11 82       	std	Z+1, r1	; 0x01
     926:	82 e0       	ldi	r24, 0x02	; 2
     928:	9a e0       	ldi	r25, 0x0A	; 10
     92a:	2f e0       	ldi	r18, 0x0F	; 15
     92c:	fc 01       	movw	r30, r24
     92e:	20 83       	st	Z, r18
     930:	df 91       	pop	r29
     932:	cf 91       	pop	r28
     934:	08 95       	ret

00000936 <setup_E1_motorRamp>:
     936:	cf 93       	push	r28
     938:	df 93       	push	r29
     93a:	cd b7       	in	r28, 0x3d	; 61
     93c:	de b7       	in	r29, 0x3e	; 62
     93e:	86 e6       	ldi	r24, 0x66	; 102
     940:	9a e0       	ldi	r25, 0x0A	; 10
     942:	20 e2       	ldi	r18, 0x20	; 32
     944:	3e e4       	ldi	r19, 0x4E	; 78
     946:	fc 01       	movw	r30, r24
     948:	20 83       	st	Z, r18
     94a:	31 83       	std	Z+1, r19	; 0x01
     94c:	80 e4       	ldi	r24, 0x40	; 64
     94e:	9a e0       	ldi	r25, 0x0A	; 10
     950:	25 e0       	ldi	r18, 0x05	; 5
     952:	fc 01       	movw	r30, r24
     954:	20 83       	st	Z, r18
     956:	86 e4       	ldi	r24, 0x46	; 70
     958:	9a e0       	ldi	r25, 0x0A	; 10
     95a:	21 e0       	ldi	r18, 0x01	; 1
     95c:	fc 01       	movw	r30, r24
     95e:	20 83       	st	Z, r18
     960:	df 91       	pop	r29
     962:	cf 91       	pop	r28
     964:	08 95       	ret

00000966 <__vector_53>:
     966:	1f 92       	push	r1
     968:	0f 92       	push	r0
     96a:	00 90 3f 00 	lds	r0, 0x003F
     96e:	0f 92       	push	r0
     970:	11 24       	eor	r1, r1
     972:	00 90 38 00 	lds	r0, 0x0038
     976:	0f 92       	push	r0
     978:	10 92 38 00 	sts	0x0038, r1
     97c:	00 90 3a 00 	lds	r0, 0x003A
     980:	0f 92       	push	r0
     982:	10 92 3a 00 	sts	0x003A, r1
     986:	8f 93       	push	r24
     988:	cf 93       	push	r28
     98a:	df 93       	push	r29
     98c:	cd b7       	in	r28, 0x3d	; 61
     98e:	de b7       	in	r29, 0x3e	; 62
     990:	80 91 36 20 	lds	r24, 0x2036
     994:	80 68       	ori	r24, 0x80	; 128
     996:	80 93 36 20 	sts	0x2036, r24
     99a:	df 91       	pop	r29
     99c:	cf 91       	pop	r28
     99e:	8f 91       	pop	r24
     9a0:	0f 90       	pop	r0
     9a2:	00 92 3a 00 	sts	0x003A, r0
     9a6:	0f 90       	pop	r0
     9a8:	00 92 38 00 	sts	0x0038, r0
     9ac:	0f 90       	pop	r0
     9ae:	00 92 3f 00 	sts	0x003F, r0
     9b2:	0f 90       	pop	r0
     9b4:	1f 90       	pop	r1
     9b6:	18 95       	reti

000009b8 <set_direction>:
     9b8:	cf 93       	push	r28
     9ba:	df 93       	push	r29
     9bc:	1f 92       	push	r1
     9be:	cd b7       	in	r28, 0x3d	; 61
     9c0:	de b7       	in	r29, 0x3e	; 62
     9c2:	89 83       	std	Y+1, r24	; 0x01
     9c4:	80 91 32 20 	lds	r24, 0x2032
     9c8:	90 91 33 20 	lds	r25, 0x2033
     9cc:	80 93 34 20 	sts	0x2034, r24
     9d0:	90 93 35 20 	sts	0x2035, r25
     9d4:	80 e0       	ldi	r24, 0x00	; 0
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	68 d0       	rcall	.+208    	; 0xaaa <set_speed_with_ramp>
     9da:	89 81       	ldd	r24, Y+1	; 0x01
     9dc:	88 2f       	mov	r24, r24
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	82 30       	cpi	r24, 0x02	; 2
     9e2:	91 05       	cpc	r25, r1
     9e4:	51 f1       	breq	.+84     	; 0xa3a <set_direction+0x82>
     9e6:	83 30       	cpi	r24, 0x03	; 3
     9e8:	91 05       	cpc	r25, r1
     9ea:	34 f4       	brge	.+12     	; 0x9f8 <set_direction+0x40>
     9ec:	00 97       	sbiw	r24, 0x00	; 0
     9ee:	71 f0       	breq	.+28     	; 0xa0c <set_direction+0x54>
     9f0:	81 30       	cpi	r24, 0x01	; 1
     9f2:	91 05       	cpc	r25, r1
     9f4:	b1 f0       	breq	.+44     	; 0xa22 <set_direction+0x6a>
     9f6:	50 c0       	rjmp	.+160    	; 0xa98 <set_direction+0xe0>
     9f8:	84 30       	cpi	r24, 0x04	; 4
     9fa:	91 05       	cpc	r25, r1
     9fc:	a9 f1       	breq	.+106    	; 0xa68 <set_direction+0xb0>
     9fe:	84 30       	cpi	r24, 0x04	; 4
     a00:	91 05       	cpc	r25, r1
     a02:	34 f1       	brlt	.+76     	; 0xa50 <set_direction+0x98>
     a04:	85 30       	cpi	r24, 0x05	; 5
     a06:	91 05       	cpc	r25, r1
     a08:	d9 f1       	breq	.+118    	; 0xa80 <set_direction+0xc8>
     a0a:	46 c0       	rjmp	.+140    	; 0xa98 <set_direction+0xe0>
     a0c:	84 e6       	ldi	r24, 0x64	; 100
     a0e:	96 e0       	ldi	r25, 0x06	; 6
     a10:	2a e0       	ldi	r18, 0x0A	; 10
     a12:	fc 01       	movw	r30, r24
     a14:	20 83       	st	Z, r18
     a16:	80 91 36 20 	lds	r24, 0x2036
     a1a:	8f 78       	andi	r24, 0x8F	; 143
     a1c:	80 93 36 20 	sts	0x2036, r24
     a20:	3b c0       	rjmp	.+118    	; 0xa98 <set_direction+0xe0>
     a22:	84 e6       	ldi	r24, 0x64	; 100
     a24:	96 e0       	ldi	r25, 0x06	; 6
     a26:	2f e0       	ldi	r18, 0x0F	; 15
     a28:	fc 01       	movw	r30, r24
     a2a:	20 83       	st	Z, r18
     a2c:	80 91 36 20 	lds	r24, 0x2036
     a30:	8f 78       	andi	r24, 0x8F	; 143
     a32:	80 61       	ori	r24, 0x10	; 16
     a34:	80 93 36 20 	sts	0x2036, r24
     a38:	2f c0       	rjmp	.+94     	; 0xa98 <set_direction+0xe0>
     a3a:	84 e6       	ldi	r24, 0x64	; 100
     a3c:	96 e0       	ldi	r25, 0x06	; 6
     a3e:	fc 01       	movw	r30, r24
     a40:	10 82       	st	Z, r1
     a42:	80 91 36 20 	lds	r24, 0x2036
     a46:	8f 78       	andi	r24, 0x8F	; 143
     a48:	80 62       	ori	r24, 0x20	; 32
     a4a:	80 93 36 20 	sts	0x2036, r24
     a4e:	24 c0       	rjmp	.+72     	; 0xa98 <set_direction+0xe0>
     a50:	84 e6       	ldi	r24, 0x64	; 100
     a52:	96 e0       	ldi	r25, 0x06	; 6
     a54:	25 e0       	ldi	r18, 0x05	; 5
     a56:	fc 01       	movw	r30, r24
     a58:	20 83       	st	Z, r18
     a5a:	80 91 36 20 	lds	r24, 0x2036
     a5e:	8f 78       	andi	r24, 0x8F	; 143
     a60:	80 63       	ori	r24, 0x30	; 48
     a62:	80 93 36 20 	sts	0x2036, r24
     a66:	18 c0       	rjmp	.+48     	; 0xa98 <set_direction+0xe0>
     a68:	84 e6       	ldi	r24, 0x64	; 100
     a6a:	96 e0       	ldi	r25, 0x06	; 6
     a6c:	23 e0       	ldi	r18, 0x03	; 3
     a6e:	fc 01       	movw	r30, r24
     a70:	20 83       	st	Z, r18
     a72:	80 91 36 20 	lds	r24, 0x2036
     a76:	8f 78       	andi	r24, 0x8F	; 143
     a78:	80 64       	ori	r24, 0x40	; 64
     a7a:	80 93 36 20 	sts	0x2036, r24
     a7e:	0c c0       	rjmp	.+24     	; 0xa98 <set_direction+0xe0>
     a80:	84 e6       	ldi	r24, 0x64	; 100
     a82:	96 e0       	ldi	r25, 0x06	; 6
     a84:	2c e0       	ldi	r18, 0x0C	; 12
     a86:	fc 01       	movw	r30, r24
     a88:	20 83       	st	Z, r18
     a8a:	80 91 36 20 	lds	r24, 0x2036
     a8e:	8f 78       	andi	r24, 0x8F	; 143
     a90:	80 65       	ori	r24, 0x50	; 80
     a92:	80 93 36 20 	sts	0x2036, r24
     a96:	00 00       	nop
     a98:	80 91 34 20 	lds	r24, 0x2034
     a9c:	90 91 35 20 	lds	r25, 0x2035
     aa0:	04 d0       	rcall	.+8      	; 0xaaa <set_speed_with_ramp>
     aa2:	0f 90       	pop	r0
     aa4:	df 91       	pop	r29
     aa6:	cf 91       	pop	r28
     aa8:	08 95       	ret

00000aaa <set_speed_with_ramp>:
     aaa:	cf 93       	push	r28
     aac:	df 93       	push	r29
     aae:	00 d0       	rcall	.+0      	; 0xab0 <set_speed_with_ramp+0x6>
     ab0:	1f 92       	push	r1
     ab2:	cd b7       	in	r28, 0x3d	; 61
     ab4:	de b7       	in	r29, 0x3e	; 62
     ab6:	8b 83       	std	Y+3, r24	; 0x03
     ab8:	9c 83       	std	Y+4, r25	; 0x04
     aba:	20 91 32 20 	lds	r18, 0x2032
     abe:	30 91 33 20 	lds	r19, 0x2033
     ac2:	8b 81       	ldd	r24, Y+3	; 0x03
     ac4:	9c 81       	ldd	r25, Y+4	; 0x04
     ac6:	82 17       	cp	r24, r18
     ac8:	93 07       	cpc	r25, r19
     aca:	08 f0       	brcs	.+2      	; 0xace <set_speed_with_ramp+0x24>
     acc:	75 c0       	rjmp	.+234    	; 0xbb8 <set_speed_with_ramp+0x10e>
     ace:	38 c0       	rjmp	.+112    	; 0xb40 <set_speed_with_ramp+0x96>
     ad0:	80 91 36 20 	lds	r24, 0x2036
     ad4:	80 78       	andi	r24, 0x80	; 128
     ad6:	88 23       	and	r24, r24
     ad8:	99 f1       	breq	.+102    	; 0xb40 <set_speed_with_ramp+0x96>
     ada:	80 91 32 20 	lds	r24, 0x2032
     ade:	90 91 33 20 	lds	r25, 0x2033
     ae2:	84 5f       	subi	r24, 0xF4	; 244
     ae4:	91 40       	sbci	r25, 0x01	; 1
     ae6:	80 93 32 20 	sts	0x2032, r24
     aea:	90 93 33 20 	sts	0x2033, r25
     aee:	88 e2       	ldi	r24, 0x28	; 40
     af0:	9a e0       	ldi	r25, 0x0A	; 10
     af2:	20 91 32 20 	lds	r18, 0x2032
     af6:	30 91 33 20 	lds	r19, 0x2033
     afa:	fc 01       	movw	r30, r24
     afc:	20 83       	st	Z, r18
     afe:	31 83       	std	Z+1, r19	; 0x01
     b00:	8a e2       	ldi	r24, 0x2A	; 42
     b02:	9a e0       	ldi	r25, 0x0A	; 10
     b04:	20 91 32 20 	lds	r18, 0x2032
     b08:	30 91 33 20 	lds	r19, 0x2033
     b0c:	fc 01       	movw	r30, r24
     b0e:	20 83       	st	Z, r18
     b10:	31 83       	std	Z+1, r19	; 0x01
     b12:	8c e2       	ldi	r24, 0x2C	; 44
     b14:	9a e0       	ldi	r25, 0x0A	; 10
     b16:	20 91 32 20 	lds	r18, 0x2032
     b1a:	30 91 33 20 	lds	r19, 0x2033
     b1e:	fc 01       	movw	r30, r24
     b20:	20 83       	st	Z, r18
     b22:	31 83       	std	Z+1, r19	; 0x01
     b24:	8e e2       	ldi	r24, 0x2E	; 46
     b26:	9a e0       	ldi	r25, 0x0A	; 10
     b28:	20 91 32 20 	lds	r18, 0x2032
     b2c:	30 91 33 20 	lds	r19, 0x2033
     b30:	fc 01       	movw	r30, r24
     b32:	20 83       	st	Z, r18
     b34:	31 83       	std	Z+1, r19	; 0x01
     b36:	80 91 36 20 	lds	r24, 0x2036
     b3a:	8f 77       	andi	r24, 0x7F	; 127
     b3c:	80 93 36 20 	sts	0x2036, r24
     b40:	20 91 32 20 	lds	r18, 0x2032
     b44:	30 91 33 20 	lds	r19, 0x2033
     b48:	8b 81       	ldd	r24, Y+3	; 0x03
     b4a:	9c 81       	ldd	r25, Y+4	; 0x04
     b4c:	82 17       	cp	r24, r18
     b4e:	93 07       	cpc	r25, r19
     b50:	08 f4       	brcc	.+2      	; 0xb54 <set_speed_with_ramp+0xaa>
     b52:	be cf       	rjmp	.-132    	; 0xad0 <set_speed_with_ramp+0x26>
     b54:	80 91 32 20 	lds	r24, 0x2032
     b58:	90 91 33 20 	lds	r25, 0x2033
     b5c:	84 3f       	cpi	r24, 0xF4	; 244
     b5e:	f1 e0       	ldi	r31, 0x01	; 1
     b60:	9f 07       	cpc	r25, r31
     b62:	08 f0       	brcs	.+2      	; 0xb66 <set_speed_with_ramp+0xbc>
     b64:	1b c1       	rjmp	.+566    	; 0xd9c <set_speed_with_ramp+0x2f2>
     b66:	10 92 32 20 	sts	0x2032, r1
     b6a:	10 92 33 20 	sts	0x2033, r1
     b6e:	88 e2       	ldi	r24, 0x28	; 40
     b70:	9a e0       	ldi	r25, 0x0A	; 10
     b72:	20 91 32 20 	lds	r18, 0x2032
     b76:	30 91 33 20 	lds	r19, 0x2033
     b7a:	fc 01       	movw	r30, r24
     b7c:	20 83       	st	Z, r18
     b7e:	31 83       	std	Z+1, r19	; 0x01
     b80:	8a e2       	ldi	r24, 0x2A	; 42
     b82:	9a e0       	ldi	r25, 0x0A	; 10
     b84:	20 91 32 20 	lds	r18, 0x2032
     b88:	30 91 33 20 	lds	r19, 0x2033
     b8c:	fc 01       	movw	r30, r24
     b8e:	20 83       	st	Z, r18
     b90:	31 83       	std	Z+1, r19	; 0x01
     b92:	8c e2       	ldi	r24, 0x2C	; 44
     b94:	9a e0       	ldi	r25, 0x0A	; 10
     b96:	20 91 32 20 	lds	r18, 0x2032
     b9a:	30 91 33 20 	lds	r19, 0x2033
     b9e:	fc 01       	movw	r30, r24
     ba0:	20 83       	st	Z, r18
     ba2:	31 83       	std	Z+1, r19	; 0x01
     ba4:	8e e2       	ldi	r24, 0x2E	; 46
     ba6:	9a e0       	ldi	r25, 0x0A	; 10
     ba8:	20 91 32 20 	lds	r18, 0x2032
     bac:	30 91 33 20 	lds	r19, 0x2033
     bb0:	fc 01       	movw	r30, r24
     bb2:	20 83       	st	Z, r18
     bb4:	31 83       	std	Z+1, r19	; 0x01
     bb6:	f2 c0       	rjmp	.+484    	; 0xd9c <set_speed_with_ramp+0x2f2>
     bb8:	80 91 32 20 	lds	r24, 0x2032
     bbc:	90 91 33 20 	lds	r25, 0x2033
     bc0:	89 83       	std	Y+1, r24	; 0x01
     bc2:	9a 83       	std	Y+2, r25	; 0x02
     bc4:	47 c0       	rjmp	.+142    	; 0xc54 <set_speed_with_ramp+0x1aa>
     bc6:	80 91 32 20 	lds	r24, 0x2032
     bca:	90 91 33 20 	lds	r25, 0x2033
     bce:	88 35       	cpi	r24, 0x58	; 88
     bd0:	fb e1       	ldi	r31, 0x1B	; 27
     bd2:	9f 07       	cpc	r25, r31
     bd4:	c8 f4       	brcc	.+50     	; 0xc08 <set_speed_with_ramp+0x15e>
     bd6:	88 e5       	ldi	r24, 0x58	; 88
     bd8:	9b e1       	ldi	r25, 0x1B	; 27
     bda:	80 93 32 20 	sts	0x2032, r24
     bde:	90 93 33 20 	sts	0x2033, r25
     be2:	88 e2       	ldi	r24, 0x28	; 40
     be4:	9a e0       	ldi	r25, 0x0A	; 10
     be6:	20 91 32 20 	lds	r18, 0x2032
     bea:	30 91 33 20 	lds	r19, 0x2033
     bee:	fc 01       	movw	r30, r24
     bf0:	20 83       	st	Z, r18
     bf2:	31 83       	std	Z+1, r19	; 0x01
     bf4:	8c e2       	ldi	r24, 0x2C	; 44
     bf6:	9a e0       	ldi	r25, 0x0A	; 10
     bf8:	20 91 32 20 	lds	r18, 0x2032
     bfc:	30 91 33 20 	lds	r19, 0x2033
     c00:	fc 01       	movw	r30, r24
     c02:	20 83       	st	Z, r18
     c04:	31 83       	std	Z+1, r19	; 0x01
     c06:	26 c0       	rjmp	.+76     	; 0xc54 <set_speed_with_ramp+0x1aa>
     c08:	80 91 36 20 	lds	r24, 0x2036
     c0c:	80 78       	andi	r24, 0x80	; 128
     c0e:	88 23       	and	r24, r24
     c10:	09 f1       	breq	.+66     	; 0xc54 <set_speed_with_ramp+0x1aa>
     c12:	80 91 32 20 	lds	r24, 0x2032
     c16:	90 91 33 20 	lds	r25, 0x2033
     c1a:	8c 50       	subi	r24, 0x0C	; 12
     c1c:	9e 4f       	sbci	r25, 0xFE	; 254
     c1e:	80 93 32 20 	sts	0x2032, r24
     c22:	90 93 33 20 	sts	0x2033, r25
     c26:	88 e2       	ldi	r24, 0x28	; 40
     c28:	9a e0       	ldi	r25, 0x0A	; 10
     c2a:	20 91 32 20 	lds	r18, 0x2032
     c2e:	30 91 33 20 	lds	r19, 0x2033
     c32:	fc 01       	movw	r30, r24
     c34:	20 83       	st	Z, r18
     c36:	31 83       	std	Z+1, r19	; 0x01
     c38:	8c e2       	ldi	r24, 0x2C	; 44
     c3a:	9a e0       	ldi	r25, 0x0A	; 10
     c3c:	20 91 32 20 	lds	r18, 0x2032
     c40:	30 91 33 20 	lds	r19, 0x2033
     c44:	fc 01       	movw	r30, r24
     c46:	20 83       	st	Z, r18
     c48:	31 83       	std	Z+1, r19	; 0x01
     c4a:	80 91 36 20 	lds	r24, 0x2036
     c4e:	8f 77       	andi	r24, 0x7F	; 127
     c50:	80 93 36 20 	sts	0x2036, r24
     c54:	20 91 32 20 	lds	r18, 0x2032
     c58:	30 91 33 20 	lds	r19, 0x2033
     c5c:	8b 81       	ldd	r24, Y+3	; 0x03
     c5e:	9c 81       	ldd	r25, Y+4	; 0x04
     c60:	28 17       	cp	r18, r24
     c62:	39 07       	cpc	r19, r25
     c64:	08 f4       	brcc	.+2      	; 0xc68 <set_speed_with_ramp+0x1be>
     c66:	af cf       	rjmp	.-162    	; 0xbc6 <set_speed_with_ramp+0x11c>
     c68:	20 91 32 20 	lds	r18, 0x2032
     c6c:	30 91 33 20 	lds	r19, 0x2033
     c70:	8b 81       	ldd	r24, Y+3	; 0x03
     c72:	9c 81       	ldd	r25, Y+4	; 0x04
     c74:	82 17       	cp	r24, r18
     c76:	93 07       	cpc	r25, r19
     c78:	c0 f4       	brcc	.+48     	; 0xcaa <set_speed_with_ramp+0x200>
     c7a:	8b 81       	ldd	r24, Y+3	; 0x03
     c7c:	9c 81       	ldd	r25, Y+4	; 0x04
     c7e:	80 93 32 20 	sts	0x2032, r24
     c82:	90 93 33 20 	sts	0x2033, r25
     c86:	88 e2       	ldi	r24, 0x28	; 40
     c88:	9a e0       	ldi	r25, 0x0A	; 10
     c8a:	20 91 32 20 	lds	r18, 0x2032
     c8e:	30 91 33 20 	lds	r19, 0x2033
     c92:	fc 01       	movw	r30, r24
     c94:	20 83       	st	Z, r18
     c96:	31 83       	std	Z+1, r19	; 0x01
     c98:	8c e2       	ldi	r24, 0x2C	; 44
     c9a:	9a e0       	ldi	r25, 0x0A	; 10
     c9c:	20 91 32 20 	lds	r18, 0x2032
     ca0:	30 91 33 20 	lds	r19, 0x2033
     ca4:	fc 01       	movw	r30, r24
     ca6:	20 83       	st	Z, r18
     ca8:	31 83       	std	Z+1, r19	; 0x01
     caa:	89 81       	ldd	r24, Y+1	; 0x01
     cac:	9a 81       	ldd	r25, Y+2	; 0x02
     cae:	80 93 32 20 	sts	0x2032, r24
     cb2:	90 93 33 20 	sts	0x2033, r25
     cb6:	47 c0       	rjmp	.+142    	; 0xd46 <set_speed_with_ramp+0x29c>
     cb8:	80 91 32 20 	lds	r24, 0x2032
     cbc:	90 91 33 20 	lds	r25, 0x2033
     cc0:	88 35       	cpi	r24, 0x58	; 88
     cc2:	fb e1       	ldi	r31, 0x1B	; 27
     cc4:	9f 07       	cpc	r25, r31
     cc6:	c8 f4       	brcc	.+50     	; 0xcfa <set_speed_with_ramp+0x250>
     cc8:	88 e5       	ldi	r24, 0x58	; 88
     cca:	9b e1       	ldi	r25, 0x1B	; 27
     ccc:	80 93 32 20 	sts	0x2032, r24
     cd0:	90 93 33 20 	sts	0x2033, r25
     cd4:	8a e2       	ldi	r24, 0x2A	; 42
     cd6:	9a e0       	ldi	r25, 0x0A	; 10
     cd8:	20 91 32 20 	lds	r18, 0x2032
     cdc:	30 91 33 20 	lds	r19, 0x2033
     ce0:	fc 01       	movw	r30, r24
     ce2:	20 83       	st	Z, r18
     ce4:	31 83       	std	Z+1, r19	; 0x01
     ce6:	8e e2       	ldi	r24, 0x2E	; 46
     ce8:	9a e0       	ldi	r25, 0x0A	; 10
     cea:	20 91 32 20 	lds	r18, 0x2032
     cee:	30 91 33 20 	lds	r19, 0x2033
     cf2:	fc 01       	movw	r30, r24
     cf4:	20 83       	st	Z, r18
     cf6:	31 83       	std	Z+1, r19	; 0x01
     cf8:	26 c0       	rjmp	.+76     	; 0xd46 <set_speed_with_ramp+0x29c>
     cfa:	80 91 36 20 	lds	r24, 0x2036
     cfe:	80 78       	andi	r24, 0x80	; 128
     d00:	88 23       	and	r24, r24
     d02:	09 f1       	breq	.+66     	; 0xd46 <set_speed_with_ramp+0x29c>
     d04:	80 91 32 20 	lds	r24, 0x2032
     d08:	90 91 33 20 	lds	r25, 0x2033
     d0c:	8c 50       	subi	r24, 0x0C	; 12
     d0e:	9e 4f       	sbci	r25, 0xFE	; 254
     d10:	80 93 32 20 	sts	0x2032, r24
     d14:	90 93 33 20 	sts	0x2033, r25
     d18:	8a e2       	ldi	r24, 0x2A	; 42
     d1a:	9a e0       	ldi	r25, 0x0A	; 10
     d1c:	20 91 32 20 	lds	r18, 0x2032
     d20:	30 91 33 20 	lds	r19, 0x2033
     d24:	fc 01       	movw	r30, r24
     d26:	20 83       	st	Z, r18
     d28:	31 83       	std	Z+1, r19	; 0x01
     d2a:	8e e2       	ldi	r24, 0x2E	; 46
     d2c:	9a e0       	ldi	r25, 0x0A	; 10
     d2e:	20 91 32 20 	lds	r18, 0x2032
     d32:	30 91 33 20 	lds	r19, 0x2033
     d36:	fc 01       	movw	r30, r24
     d38:	20 83       	st	Z, r18
     d3a:	31 83       	std	Z+1, r19	; 0x01
     d3c:	80 91 36 20 	lds	r24, 0x2036
     d40:	8f 77       	andi	r24, 0x7F	; 127
     d42:	80 93 36 20 	sts	0x2036, r24
     d46:	20 91 32 20 	lds	r18, 0x2032
     d4a:	30 91 33 20 	lds	r19, 0x2033
     d4e:	8b 81       	ldd	r24, Y+3	; 0x03
     d50:	9c 81       	ldd	r25, Y+4	; 0x04
     d52:	28 17       	cp	r18, r24
     d54:	39 07       	cpc	r19, r25
     d56:	08 f4       	brcc	.+2      	; 0xd5a <set_speed_with_ramp+0x2b0>
     d58:	af cf       	rjmp	.-162    	; 0xcb8 <set_speed_with_ramp+0x20e>
     d5a:	20 91 32 20 	lds	r18, 0x2032
     d5e:	30 91 33 20 	lds	r19, 0x2033
     d62:	8b 81       	ldd	r24, Y+3	; 0x03
     d64:	9c 81       	ldd	r25, Y+4	; 0x04
     d66:	82 17       	cp	r24, r18
     d68:	93 07       	cpc	r25, r19
     d6a:	c0 f4       	brcc	.+48     	; 0xd9c <set_speed_with_ramp+0x2f2>
     d6c:	8b 81       	ldd	r24, Y+3	; 0x03
     d6e:	9c 81       	ldd	r25, Y+4	; 0x04
     d70:	80 93 32 20 	sts	0x2032, r24
     d74:	90 93 33 20 	sts	0x2033, r25
     d78:	8a e2       	ldi	r24, 0x2A	; 42
     d7a:	9a e0       	ldi	r25, 0x0A	; 10
     d7c:	20 91 32 20 	lds	r18, 0x2032
     d80:	30 91 33 20 	lds	r19, 0x2033
     d84:	fc 01       	movw	r30, r24
     d86:	20 83       	st	Z, r18
     d88:	31 83       	std	Z+1, r19	; 0x01
     d8a:	8e e2       	ldi	r24, 0x2E	; 46
     d8c:	9a e0       	ldi	r25, 0x0A	; 10
     d8e:	20 91 32 20 	lds	r18, 0x2032
     d92:	30 91 33 20 	lds	r19, 0x2033
     d96:	fc 01       	movw	r30, r24
     d98:	20 83       	st	Z, r18
     d9a:	31 83       	std	Z+1, r19	; 0x01
     d9c:	24 96       	adiw	r28, 0x04	; 4
     d9e:	cd bf       	out	0x3d, r28	; 61
     da0:	de bf       	out	0x3e, r29	; 62
     da2:	df 91       	pop	r29
     da4:	cf 91       	pop	r28
     da6:	08 95       	ret

00000da8 <setup_C1_spinTimer>:


//spin timer is used to determine how long robot should spin while in spinning state
void setup_C1_spinTimer()
{
     da8:	cf 93       	push	r28
     daa:	df 93       	push	r29
     dac:	cd b7       	in	r28, 0x3d	; 61
     dae:	de b7       	in	r29, 0x3e	; 62
	//setup period for timer to 0, but it will be 62500 ticks when used (assuming 32MHz clocks, this is 2s with 1024 prescale)
	TCC1_PER = 0;
     db0:	86 e6       	ldi	r24, 0x66	; 102
     db2:	98 e0       	ldi	r25, 0x08	; 8
     db4:	fc 01       	movw	r30, r24
     db6:	10 82       	st	Z, r1
     db8:	11 82       	std	Z+1, r1	; 0x01

	//set prescaler for counter to 1024 counts per 1 tick
	TCC1_CTRLA = 0x07;
     dba:	80 e4       	ldi	r24, 0x40	; 64
     dbc:	98 e0       	ldi	r25, 0x08	; 8
     dbe:	27 e0       	ldi	r18, 0x07	; 7
     dc0:	fc 01       	movw	r30, r24
     dc2:	20 83       	st	Z, r18

	//set interrupt priority to low
	TCC1_INTCTRLA = 0x01;
     dc4:	86 e4       	ldi	r24, 0x46	; 70
     dc6:	98 e0       	ldi	r25, 0x08	; 8
     dc8:	21 e0       	ldi	r18, 0x01	; 1
     dca:	fc 01       	movw	r30, r24
     dcc:	20 83       	st	Z, r18
	
}
     dce:	df 91       	pop	r29
     dd0:	cf 91       	pop	r28
     dd2:	08 95       	ret

00000dd4 <__vector_20>:

//called when spin timer overflows
ISR(TCC1_OVF_vect)
{
     dd4:	1f 92       	push	r1
     dd6:	0f 92       	push	r0
     dd8:	00 90 3f 00 	lds	r0, 0x003F
     ddc:	0f 92       	push	r0
     dde:	11 24       	eor	r1, r1
     de0:	00 90 38 00 	lds	r0, 0x0038
     de4:	0f 92       	push	r0
     de6:	10 92 38 00 	sts	0x0038, r1
     dea:	00 90 3a 00 	lds	r0, 0x003A
     dee:	0f 92       	push	r0
     df0:	10 92 3a 00 	sts	0x003A, r1
     df4:	8f 93       	push	r24
     df6:	cf 93       	push	r28
     df8:	df 93       	push	r29
     dfa:	cd b7       	in	r28, 0x3d	; 61
     dfc:	de b7       	in	r29, 0x3e	; 62
	semaphores.spin_complete = 1;	
     dfe:	80 91 30 20 	lds	r24, 0x2030
     e02:	80 68       	ori	r24, 0x80	; 128
     e04:	80 93 30 20 	sts	0x2030, r24
}
     e08:	df 91       	pop	r29
     e0a:	cf 91       	pop	r28
     e0c:	8f 91       	pop	r24
     e0e:	0f 90       	pop	r0
     e10:	00 92 3a 00 	sts	0x003A, r0
     e14:	0f 90       	pop	r0
     e16:	00 92 38 00 	sts	0x0038, r0
     e1a:	0f 90       	pop	r0
     e1c:	00 92 3f 00 	sts	0x003F, r0
     e20:	0f 90       	pop	r0
     e22:	1f 90       	pop	r1
     e24:	18 95       	reti

00000e26 <set_spinTimer>:

void set_spinTimer(uint16_t ticks)
{
     e26:	cf 93       	push	r28
     e28:	df 93       	push	r29
     e2a:	1f 92       	push	r1
     e2c:	1f 92       	push	r1
     e2e:	cd b7       	in	r28, 0x3d	; 61
     e30:	de b7       	in	r29, 0x3e	; 62
     e32:	89 83       	std	Y+1, r24	; 0x01
     e34:	9a 83       	std	Y+2, r25	; 0x02
	TCC1_PER = ticks;
     e36:	86 e6       	ldi	r24, 0x66	; 102
     e38:	98 e0       	ldi	r25, 0x08	; 8
     e3a:	29 81       	ldd	r18, Y+1	; 0x01
     e3c:	3a 81       	ldd	r19, Y+2	; 0x02
     e3e:	fc 01       	movw	r30, r24
     e40:	20 83       	st	Z, r18
     e42:	31 83       	std	Z+1, r19	; 0x01
}
     e44:	0f 90       	pop	r0
     e46:	0f 90       	pop	r0
     e48:	df 91       	pop	r29
     e4a:	cf 91       	pop	r28
     e4c:	08 95       	ret

00000e4e <initialize_semaphores>:

struct semaphore_t;
extern struct semaphore_t semaphores;

void initialize_semaphores()
{
     e4e:	cf 93       	push	r28
     e50:	df 93       	push	r29
     e52:	cd b7       	in	r28, 0x3d	; 61
     e54:	de b7       	in	r29, 0x3e	; 62
	semaphores.left_meas_done = 0;
     e56:	80 91 30 20 	lds	r24, 0x2030
     e5a:	8d 7f       	andi	r24, 0xFD	; 253
     e5c:	80 93 30 20 	sts	0x2030, r24
	semaphores.right_meas_done = 0;
     e60:	80 91 30 20 	lds	r24, 0x2030
     e64:	8b 7f       	andi	r24, 0xFB	; 251
     e66:	80 93 30 20 	sts	0x2030, r24
	semaphores.front_meas_done = 0;
     e6a:	80 91 30 20 	lds	r24, 0x2030
     e6e:	87 7f       	andi	r24, 0xF7	; 247
     e70:	80 93 30 20 	sts	0x2030, r24
	semaphores.back_meas_done = 0;
     e74:	80 91 30 20 	lds	r24, 0x2030
     e78:	8f 7e       	andi	r24, 0xEF	; 239
     e7a:	80 93 30 20 	sts	0x2030, r24
	
	semaphores.change_speed = 0;
     e7e:	80 91 30 20 	lds	r24, 0x2030
     e82:	8f 7d       	andi	r24, 0xDF	; 223
     e84:	80 93 30 20 	sts	0x2030, r24
	semaphores.change_direction = 0;
     e88:	80 91 30 20 	lds	r24, 0x2030
     e8c:	8f 7b       	andi	r24, 0xBF	; 191
     e8e:	80 93 30 20 	sts	0x2030, r24
	
	semaphores.spin_complete = 0;
     e92:	80 91 30 20 	lds	r24, 0x2030
     e96:	8f 77       	andi	r24, 0x7F	; 127
     e98:	80 93 30 20 	sts	0x2030, r24
	semaphores.led_toggle = 0;
     e9c:	80 91 31 20 	lds	r24, 0x2031
     ea0:	8e 7f       	andi	r24, 0xFE	; 254
     ea2:	80 93 31 20 	sts	0x2031, r24
	
}
     ea6:	df 91       	pop	r29
     ea8:	cf 91       	pop	r28
     eaa:	08 95       	ret

00000eac <clear_meas_sems>:

void clear_meas_sems()
{
     eac:	cf 93       	push	r28
     eae:	df 93       	push	r29
     eb0:	cd b7       	in	r28, 0x3d	; 61
     eb2:	de b7       	in	r29, 0x3e	; 62
	semaphores.left_meas_done = 0;
     eb4:	80 91 30 20 	lds	r24, 0x2030
     eb8:	8d 7f       	andi	r24, 0xFD	; 253
     eba:	80 93 30 20 	sts	0x2030, r24
	semaphores.right_meas_done = 0;
     ebe:	80 91 30 20 	lds	r24, 0x2030
     ec2:	8b 7f       	andi	r24, 0xFB	; 251
     ec4:	80 93 30 20 	sts	0x2030, r24
	semaphores.front_meas_done = 0;
     ec8:	80 91 30 20 	lds	r24, 0x2030
     ecc:	87 7f       	andi	r24, 0xF7	; 247
     ece:	80 93 30 20 	sts	0x2030, r24
	semaphores.back_meas_done = 0;
     ed2:	80 91 30 20 	lds	r24, 0x2030
     ed6:	8f 7e       	andi	r24, 0xEF	; 239
     ed8:	80 93 30 20 	sts	0x2030, r24
	
	
}
     edc:	df 91       	pop	r29
     ede:	cf 91       	pop	r28
     ee0:	08 95       	ret

00000ee2 <set_Clock_32MHz>:
void move_away_from_threat();
uint8_t check_for_trapped();


void set_Clock_32MHz()
{
     ee2:	cf 93       	push	r28
     ee4:	df 93       	push	r29
     ee6:	cd b7       	in	r28, 0x3d	; 61
     ee8:	de b7       	in	r29, 0x3e	; 62
	SetSystemClock(CLK_SCLKSEL_RC32M_gc, CLK_PSADIV_1_gc, CLK_PSBCDIV_1_1_gc);
     eea:	40 e0       	ldi	r20, 0x00	; 0
     eec:	50 e0       	ldi	r21, 0x00	; 0
     eee:	60 e0       	ldi	r22, 0x00	; 0
     ef0:	70 e0       	ldi	r23, 0x00	; 0
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	29 d4       	rcall	.+2130   	; 0x174a <SetSystemClock>
	GetSystemClocks(&sClk, &pClk);
     ef8:	6b e3       	ldi	r22, 0x3B	; 59
     efa:	70 e2       	ldi	r23, 0x20	; 32
     efc:	87 e3       	ldi	r24, 0x37	; 55
     efe:	90 e2       	ldi	r25, 0x20	; 32
     f00:	59 d4       	rcall	.+2226   	; 0x17b4 <GetSystemClocks>
}
     f02:	df 91       	pop	r29
     f04:	cf 91       	pop	r28
     f06:	08 95       	ret

00000f08 <determine_threat_order>:

void determine_threat_order()
{
     f08:	cf 93       	push	r28
     f0a:	df 93       	push	r29
     f0c:	00 d0       	rcall	.+0      	; 0xf0e <determine_threat_order+0x6>
     f0e:	00 d0       	rcall	.+0      	; 0xf10 <determine_threat_order+0x8>
     f10:	cd b7       	in	r28, 0x3d	; 61
     f12:	de b7       	in	r29, 0x3e	; 62
	uint16_t closestThreat_meas = 0;
     f14:	19 82       	std	Y+1, r1	; 0x01
     f16:	1a 82       	std	Y+2, r1	; 0x02
	uint16_t furthestThreat_meas = 0xFFFF;
     f18:	8f ef       	ldi	r24, 0xFF	; 255
     f1a:	9f ef       	ldi	r25, 0xFF	; 255
     f1c:	8b 83       	std	Y+3, r24	; 0x03
     f1e:	9c 83       	std	Y+4, r25	; 0x04
	
	//check each direction to see which distance is closest or furthest
	//note that threat distance is the value returned by the ADC from infrared sensors, high = closer,  low = further away
	for(int i = LEFT; i <= RIGHT; i++)
     f20:	1d 82       	std	Y+5, r1	; 0x05
     f22:	1e 82       	std	Y+6, r1	; 0x06
     f24:	3d c0       	rjmp	.+122    	; 0xfa0 <determine_threat_order+0x98>
	{
		//closest threat is used to decide what to move away from
		if (threat_distance[i] > closestThreat_meas )
     f26:	8d 81       	ldd	r24, Y+5	; 0x05
     f28:	9e 81       	ldd	r25, Y+6	; 0x06
     f2a:	88 0f       	add	r24, r24
     f2c:	99 1f       	adc	r25, r25
     f2e:	80 50       	subi	r24, 0x00	; 0
     f30:	90 4e       	sbci	r25, 0xE0	; 224
     f32:	fc 01       	movw	r30, r24
     f34:	20 81       	ld	r18, Z
     f36:	31 81       	ldd	r19, Z+1	; 0x01
     f38:	89 81       	ldd	r24, Y+1	; 0x01
     f3a:	9a 81       	ldd	r25, Y+2	; 0x02
     f3c:	82 17       	cp	r24, r18
     f3e:	93 07       	cpc	r25, r19
     f40:	70 f4       	brcc	.+28     	; 0xf5e <determine_threat_order+0x56>
		{
			closestThreat = (uint8_t)i;
     f42:	8d 81       	ldd	r24, Y+5	; 0x05
     f44:	80 93 08 20 	sts	0x2008, r24
			closestThreat_meas = threat_distance[i];
     f48:	8d 81       	ldd	r24, Y+5	; 0x05
     f4a:	9e 81       	ldd	r25, Y+6	; 0x06
     f4c:	88 0f       	add	r24, r24
     f4e:	99 1f       	adc	r25, r25
     f50:	80 50       	subi	r24, 0x00	; 0
     f52:	90 4e       	sbci	r25, 0xE0	; 224
     f54:	fc 01       	movw	r30, r24
     f56:	80 81       	ld	r24, Z
     f58:	91 81       	ldd	r25, Z+1	; 0x01
     f5a:	89 83       	std	Y+1, r24	; 0x01
     f5c:	9a 83       	std	Y+2, r25	; 0x02
		}
		
		//furthest threat used to decide which direction to go
		if (threat_distance[i] < furthestThreat_meas )
     f5e:	8d 81       	ldd	r24, Y+5	; 0x05
     f60:	9e 81       	ldd	r25, Y+6	; 0x06
     f62:	88 0f       	add	r24, r24
     f64:	99 1f       	adc	r25, r25
     f66:	80 50       	subi	r24, 0x00	; 0
     f68:	90 4e       	sbci	r25, 0xE0	; 224
     f6a:	fc 01       	movw	r30, r24
     f6c:	20 81       	ld	r18, Z
     f6e:	31 81       	ldd	r19, Z+1	; 0x01
     f70:	8b 81       	ldd	r24, Y+3	; 0x03
     f72:	9c 81       	ldd	r25, Y+4	; 0x04
     f74:	28 17       	cp	r18, r24
     f76:	39 07       	cpc	r19, r25
     f78:	70 f4       	brcc	.+28     	; 0xf96 <determine_threat_order+0x8e>
		{
			furthestThreat = (uint8_t)i;
     f7a:	8d 81       	ldd	r24, Y+5	; 0x05
     f7c:	80 93 09 20 	sts	0x2009, r24
			furthestThreat_meas = threat_distance[i];
     f80:	8d 81       	ldd	r24, Y+5	; 0x05
     f82:	9e 81       	ldd	r25, Y+6	; 0x06
     f84:	88 0f       	add	r24, r24
     f86:	99 1f       	adc	r25, r25
     f88:	80 50       	subi	r24, 0x00	; 0
     f8a:	90 4e       	sbci	r25, 0xE0	; 224
     f8c:	fc 01       	movw	r30, r24
     f8e:	80 81       	ld	r24, Z
     f90:	91 81       	ldd	r25, Z+1	; 0x01
     f92:	8b 83       	std	Y+3, r24	; 0x03
     f94:	9c 83       	std	Y+4, r25	; 0x04
	uint16_t closestThreat_meas = 0;
	uint16_t furthestThreat_meas = 0xFFFF;
	
	//check each direction to see which distance is closest or furthest
	//note that threat distance is the value returned by the ADC from infrared sensors, high = closer,  low = further away
	for(int i = LEFT; i <= RIGHT; i++)
     f96:	8d 81       	ldd	r24, Y+5	; 0x05
     f98:	9e 81       	ldd	r25, Y+6	; 0x06
     f9a:	01 96       	adiw	r24, 0x01	; 1
     f9c:	8d 83       	std	Y+5, r24	; 0x05
     f9e:	9e 83       	std	Y+6, r25	; 0x06
     fa0:	8d 81       	ldd	r24, Y+5	; 0x05
     fa2:	9e 81       	ldd	r25, Y+6	; 0x06
     fa4:	84 30       	cpi	r24, 0x04	; 4
     fa6:	91 05       	cpc	r25, r1
     fa8:	0c f4       	brge	.+2      	; 0xfac <determine_threat_order+0xa4>
     faa:	bd cf       	rjmp	.-134    	; 0xf26 <determine_threat_order+0x1e>
			furthestThreat_meas = threat_distance[i];
		}
			
	}
			
}
     fac:	26 96       	adiw	r28, 0x06	; 6
     fae:	cd bf       	out	0x3d, r28	; 61
     fb0:	de bf       	out	0x3e, r29	; 62
     fb2:	df 91       	pop	r29
     fb4:	cf 91       	pop	r28
     fb6:	08 95       	ret

00000fb8 <move_away_from_threat>:

void move_away_from_threat()
{
     fb8:	cf 93       	push	r28
     fba:	df 93       	push	r29
     fbc:	1f 92       	push	r1
     fbe:	1f 92       	push	r1
     fc0:	cd b7       	in	r28, 0x3d	; 61
     fc2:	de b7       	in	r29, 0x3e	; 62
	//check each direction to see which distance is furthest and move towards it
	for(int i = LEFT; i <= RIGHT; i++)
     fc4:	19 82       	std	Y+1, r1	; 0x01
     fc6:	1a 82       	std	Y+2, r1	; 0x02
     fc8:	35 c0       	rjmp	.+106    	; 0x1034 <move_away_from_threat+0x7c>
	{
		if (i == furthestThreat)
     fca:	80 91 09 20 	lds	r24, 0x2009
     fce:	28 2f       	mov	r18, r24
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	89 81       	ldd	r24, Y+1	; 0x01
     fd4:	9a 81       	ldd	r25, Y+2	; 0x02
     fd6:	28 17       	cp	r18, r24
     fd8:	39 07       	cpc	r19, r25
     fda:	39 f5       	brne	.+78     	; 0x102a <move_away_from_threat+0x72>
		{
			//make sure bot is moving away from something close, otherwise just let it sit and wait
			if(threat_distance[closestThreat] > MIN_INFRARED_THREAT)
     fdc:	80 91 08 20 	lds	r24, 0x2008
     fe0:	88 2f       	mov	r24, r24
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	88 0f       	add	r24, r24
     fe6:	99 1f       	adc	r25, r25
     fe8:	80 50       	subi	r24, 0x00	; 0
     fea:	90 4e       	sbci	r25, 0xE0	; 224
     fec:	fc 01       	movw	r30, r24
     fee:	80 81       	ld	r24, Z
     ff0:	91 81       	ldd	r25, Z+1	; 0x01
     ff2:	81 39       	cpi	r24, 0x91	; 145
     ff4:	f1 e0       	ldi	r31, 0x01	; 1
     ff6:	9f 07       	cpc	r25, r31
     ff8:	a8 f0       	brcs	.+42     	; 0x1024 <move_away_from_threat+0x6c>
			{
				if (motorControl.direction != furthestThreat)
     ffa:	80 91 36 20 	lds	r24, 0x2036
     ffe:	82 95       	swap	r24
    1000:	8f 70       	andi	r24, 0x0F	; 15
    1002:	87 70       	andi	r24, 0x07	; 7
    1004:	28 2f       	mov	r18, r24
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	80 91 09 20 	lds	r24, 0x2009
    100c:	88 2f       	mov	r24, r24
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	28 17       	cp	r18, r24
    1012:	39 07       	cpc	r19, r25
    1014:	19 f0       	breq	.+6      	; 0x101c <move_away_from_threat+0x64>
				{
					set_direction(furthestThreat);
    1016:	80 91 09 20 	lds	r24, 0x2009
    101a:	ce dc       	rcall	.-1636   	; 0x9b8 <set_direction>
				}
				set_speed_with_ramp(MOTOR_FAST_TICKS);
    101c:	80 e4       	ldi	r24, 0x40	; 64
    101e:	9f e1       	ldi	r25, 0x1F	; 31
    1020:	44 dd       	rcall	.-1400   	; 0xaaa <set_speed_with_ramp>
    1022:	03 c0       	rjmp	.+6      	; 0x102a <move_away_from_threat+0x72>
				
			}
			else
			{
				//there is no threat within minimum threshold so just let the robot sit and wait
				set_speed_with_ramp(0);
    1024:	80 e0       	ldi	r24, 0x00	; 0
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	40 dd       	rcall	.-1408   	; 0xaaa <set_speed_with_ramp>
}

void move_away_from_threat()
{
	//check each direction to see which distance is furthest and move towards it
	for(int i = LEFT; i <= RIGHT; i++)
    102a:	89 81       	ldd	r24, Y+1	; 0x01
    102c:	9a 81       	ldd	r25, Y+2	; 0x02
    102e:	01 96       	adiw	r24, 0x01	; 1
    1030:	89 83       	std	Y+1, r24	; 0x01
    1032:	9a 83       	std	Y+2, r25	; 0x02
    1034:	89 81       	ldd	r24, Y+1	; 0x01
    1036:	9a 81       	ldd	r25, Y+2	; 0x02
    1038:	84 30       	cpi	r24, 0x04	; 4
    103a:	91 05       	cpc	r25, r1
    103c:	34 f2       	brlt	.-116    	; 0xfca <move_away_from_threat+0x12>
			
		}
		
	}

}
    103e:	0f 90       	pop	r0
    1040:	0f 90       	pop	r0
    1042:	df 91       	pop	r29
    1044:	cf 91       	pop	r28
    1046:	08 95       	ret

00001048 <check_for_trapped>:

uint8_t check_for_trapped()
{
    1048:	cf 93       	push	r28
    104a:	df 93       	push	r29
    104c:	1f 92       	push	r1
    104e:	1f 92       	push	r1
    1050:	cd b7       	in	r28, 0x3d	; 61
    1052:	de b7       	in	r29, 0x3e	; 62
	//check each threat distance to see if they are all above max threshold
	for(int i = LEFT; i <= RIGHT; i++)
    1054:	19 82       	std	Y+1, r1	; 0x01
    1056:	1a 82       	std	Y+2, r1	; 0x02
    1058:	14 c0       	rjmp	.+40     	; 0x1082 <check_for_trapped+0x3a>
	{
		//if any of the measurements are less than the max threshold, it isn't trapped
		if (threat_distance[i] < TRAPPED_INFRARED) return 0;	
    105a:	89 81       	ldd	r24, Y+1	; 0x01
    105c:	9a 81       	ldd	r25, Y+2	; 0x02
    105e:	88 0f       	add	r24, r24
    1060:	99 1f       	adc	r25, r25
    1062:	80 50       	subi	r24, 0x00	; 0
    1064:	90 4e       	sbci	r25, 0xE0	; 224
    1066:	fc 01       	movw	r30, r24
    1068:	80 81       	ld	r24, Z
    106a:	91 81       	ldd	r25, Z+1	; 0x01
    106c:	80 3f       	cpi	r24, 0xF0	; 240
    106e:	fa e0       	ldi	r31, 0x0A	; 10
    1070:	9f 07       	cpc	r25, r31
    1072:	10 f4       	brcc	.+4      	; 0x1078 <check_for_trapped+0x30>
    1074:	80 e0       	ldi	r24, 0x00	; 0
    1076:	0b c0       	rjmp	.+22     	; 0x108e <check_for_trapped+0x46>
}

uint8_t check_for_trapped()
{
	//check each threat distance to see if they are all above max threshold
	for(int i = LEFT; i <= RIGHT; i++)
    1078:	89 81       	ldd	r24, Y+1	; 0x01
    107a:	9a 81       	ldd	r25, Y+2	; 0x02
    107c:	01 96       	adiw	r24, 0x01	; 1
    107e:	89 83       	std	Y+1, r24	; 0x01
    1080:	9a 83       	std	Y+2, r25	; 0x02
    1082:	89 81       	ldd	r24, Y+1	; 0x01
    1084:	9a 81       	ldd	r25, Y+2	; 0x02
    1086:	84 30       	cpi	r24, 0x04	; 4
    1088:	91 05       	cpc	r25, r1
    108a:	3c f3       	brlt	.-50     	; 0x105a <check_for_trapped+0x12>
		//if any of the measurements are less than the max threshold, it isn't trapped
		if (threat_distance[i] < TRAPPED_INFRARED) return 0;	
	}
	
	//if the function reaches this point, each threat measurement was above the max threshold and it is trapped
	return 1;	
    108c:	81 e0       	ldi	r24, 0x01	; 1
	
}
    108e:	0f 90       	pop	r0
    1090:	0f 90       	pop	r0
    1092:	df 91       	pop	r29
    1094:	cf 91       	pop	r28
    1096:	08 95       	ret

00001098 <main>:


int main(void)
{
    1098:	cf 93       	push	r28
    109a:	df 93       	push	r29
    109c:	cd b7       	in	r28, 0x3d	; 61
    109e:	de b7       	in	r29, 0x3e	; 62
	
	set_Clock_32MHz();
    10a0:	20 df       	rcall	.-448    	; 0xee2 <set_Clock_32MHz>
	initialize_semaphores();
    10a2:	d5 de       	rcall	.-598    	; 0xe4e <initialize_semaphores>
	initialize_motorControl();
    10a4:	e9 db       	rcall	.-2094   	; 0x878 <initialize_motorControl>
	initialize_threat_distances();
    10a6:	03 d1       	rcall	.+518    	; 0x12ae <initialize_threat_distances>
	reset_infSens();
    10a8:	2c d3       	rcall	.+1624   	; 0x1702 <reset_infSens>
	
	//clear interrupts
	cli();
    10aa:	f8 94       	cli

	setup_timer_D1();			//D1 is used to control the timing for infrared sensor measurements
    10ac:	a9 d0       	rcall	.+338    	; 0x1200 <setup_timer_D1>
	setup_gpio();				//declares polarity for gpio ports
    10ae:	65 da       	rcall	.-2870   	; 0x57a <setup_gpio>
	setup_ADCB();				//sets up pins 0-3 for use with infrared sensors
    10b0:	b9 d8       	rcall	.-3726   	; 0x224 <setup_ADCB>
	setup_E0_motorControl();	//E0 is used as PWM for controlling the motors
    10b2:	10 dc       	rcall	.-2016   	; 0x8d4 <setup_E0_motorControl>
	setup_E1_motorRamp();		//E1 is the timer that is used for ramping up/down the pulse width in E0
    10b4:	40 dc       	rcall	.-1920   	; 0x936 <setup_E1_motorRamp>
	setup_btn_interrupt();		//sets up interrupts for buttons
    10b6:	7f da       	rcall	.-2818   	; 0x5b6 <setup_btn_interrupt>
	setup_C1_spinTimer();		//initialize timer used for controlling spin state
    10b8:	77 de       	rcall	.-786    	; 0xda8 <setup_C1_spinTimer>
	setup_F1_LEDTimer();		//initialize timer used for toggling the LEDs
    10ba:	81 db       	rcall	.-2302   	; 0x7be <setup_F1_LEDTimer>

	
	//enable low, med, and high level interrupts
	PMIC_CTRL = PMIC_HILVLEN_bm |PMIC_MEDLVLEN_bm | PMIC_LOLVLEN_bm;
    10bc:	82 ea       	ldi	r24, 0xA2	; 162
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	27 e0       	ldi	r18, 0x07	; 7
    10c2:	fc 01       	movw	r30, r24
    10c4:	20 83       	st	Z, r18
	
	//turn interrupts back on
	sei();
    10c6:	78 94       	sei
	
	//set motors to 0 ticks to start
	set_speed_with_ramp(0);
    10c8:	80 e0       	ldi	r24, 0x00	; 0
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	ee dc       	rcall	.-1572   	; 0xaaa <set_speed_with_ramp>
	
	//set state to escaping to start
	state = ESCAPING;
    10ce:	10 92 0a 20 	sts	0x200A, r1

	while(1)
	{
		//escaping state
		while(state == ESCAPING)
    10d2:	32 c0       	rjmp	.+100    	; 0x1138 <main+0xa0>
		{
			//check to see if all measurements are done
			if(semaphores.left_meas_done && semaphores.back_meas_done && semaphores.front_meas_done && semaphores.right_meas_done)
    10d4:	80 91 30 20 	lds	r24, 0x2030
    10d8:	82 70       	andi	r24, 0x02	; 2
    10da:	88 23       	and	r24, r24
    10dc:	69 f1       	breq	.+90     	; 0x1138 <main+0xa0>
    10de:	80 91 30 20 	lds	r24, 0x2030
    10e2:	80 71       	andi	r24, 0x10	; 16
    10e4:	88 23       	and	r24, r24
    10e6:	41 f1       	breq	.+80     	; 0x1138 <main+0xa0>
    10e8:	80 91 30 20 	lds	r24, 0x2030
    10ec:	88 70       	andi	r24, 0x08	; 8
    10ee:	88 23       	and	r24, r24
    10f0:	19 f1       	breq	.+70     	; 0x1138 <main+0xa0>
    10f2:	80 91 30 20 	lds	r24, 0x2030
    10f6:	84 70       	andi	r24, 0x04	; 4
    10f8:	88 23       	and	r24, r24
    10fa:	f1 f0       	breq	.+60     	; 0x1138 <main+0xa0>
			{
				//toggle lowest bit on LED's so that we can see the measurement status
				//LED_PORT.OUT ^= 0x01;
				
				//calculate the average distance measured by each infrared sensor
				set_infrSens_avg_to_threatDist();
    10fc:	2a d2       	rcall	.+1108   	; 0x1552 <set_infrSens_avg_to_threatDist>
				
				//check to see if the robot is trapped, i.e. all sides are above max threshold
				if(check_for_trapped())
    10fe:	a4 df       	rcall	.-184    	; 0x1048 <check_for_trapped>
    1100:	88 23       	and	r24, r24
    1102:	21 f0       	breq	.+8      	; 0x110c <main+0x74>
				{
					state = TRAPPED;	//set state to trapped
    1104:	81 e0       	ldi	r24, 0x01	; 1
    1106:	80 93 0a 20 	sts	0x200A, r24
					break;	//break out of while loop so that trapped state can be entered
    110a:	1a c0       	rjmp	.+52     	; 0x1140 <main+0xa8>
				}
				
				determine_threat_order();
    110c:	fd de       	rcall	.-518    	; 0xf08 <determine_threat_order>
				
				move_away_from_threat();
    110e:	54 df       	rcall	.-344    	; 0xfb8 <move_away_from_threat>
				
				reset_infSens();
    1110:	f8 d2       	rcall	.+1520   	; 0x1702 <reset_infSens>
				
				clear_meas_sems();
    1112:	cc de       	rcall	.-616    	; 0xeac <clear_meas_sems>
				
				//show the closest threat on lowest nibble and furthest threat on upper nibble
				LED_PORT.OUT = (uint8_t)(closestThreat | (furthestThreat << 4));
    1114:	80 ee       	ldi	r24, 0xE0	; 224
    1116:	96 e0       	ldi	r25, 0x06	; 6
    1118:	20 91 09 20 	lds	r18, 0x2009
    111c:	22 2f       	mov	r18, r18
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	22 95       	swap	r18
    1122:	32 95       	swap	r19
    1124:	30 7f       	andi	r19, 0xF0	; 240
    1126:	32 27       	eor	r19, r18
    1128:	20 7f       	andi	r18, 0xF0	; 240
    112a:	32 27       	eor	r19, r18
    112c:	32 2f       	mov	r19, r18
    112e:	20 91 08 20 	lds	r18, 0x2008
    1132:	23 2b       	or	r18, r19
    1134:	fc 01       	movw	r30, r24
    1136:	24 83       	std	Z+4, r18	; 0x04
	state = ESCAPING;

	while(1)
	{
		//escaping state
		while(state == ESCAPING)
    1138:	80 91 0a 20 	lds	r24, 0x200A
    113c:	88 23       	and	r24, r24
    113e:	51 f2       	breq	.-108    	; 0x10d4 <main+0x3c>
				
			}	
			
		}	//end of escaping state while loop
		
		while(state == TESTING)
    1140:	1f c0       	rjmp	.+62     	; 0x1180 <main+0xe8>
		{
			//check to see if change direction semaphore has been thrown by button press
			if(semaphores.change_direction)
    1142:	80 91 30 20 	lds	r24, 0x2030
    1146:	80 74       	andi	r24, 0x40	; 64
    1148:	88 23       	and	r24, r24
    114a:	59 f0       	breq	.+22     	; 0x1162 <main+0xca>
			{
				set_direction(motorControl.direction);
    114c:	80 91 36 20 	lds	r24, 0x2036
    1150:	82 95       	swap	r24
    1152:	8f 70       	andi	r24, 0x0F	; 15
    1154:	87 70       	andi	r24, 0x07	; 7
    1156:	30 dc       	rcall	.-1952   	; 0x9b8 <set_direction>
				semaphores.change_direction = 0;
    1158:	80 91 30 20 	lds	r24, 0x2030
    115c:	8f 7b       	andi	r24, 0xBF	; 191
    115e:	80 93 30 20 	sts	0x2030, r24
			}
			
			//check to see if change speed semaphore has been thrown by button press
			if(semaphores.change_speed)
    1162:	80 91 30 20 	lds	r24, 0x2030
    1166:	80 72       	andi	r24, 0x20	; 32
    1168:	88 23       	and	r24, r24
    116a:	51 f0       	breq	.+20     	; 0x1180 <main+0xe8>
			{
				set_speed_with_ramp(motorControl.target_speed_ticks);
    116c:	80 91 34 20 	lds	r24, 0x2034
    1170:	90 91 35 20 	lds	r25, 0x2035
    1174:	9a dc       	rcall	.-1740   	; 0xaaa <set_speed_with_ramp>
				semaphores.change_speed = 0;
    1176:	80 91 30 20 	lds	r24, 0x2030
    117a:	8f 7d       	andi	r24, 0xDF	; 223
    117c:	80 93 30 20 	sts	0x2030, r24
				
			}	
			
		}	//end of escaping state while loop
		
		while(state == TESTING)
    1180:	80 91 0a 20 	lds	r24, 0x200A
    1184:	83 30       	cpi	r24, 0x03	; 3
    1186:	e9 f2       	breq	.-70     	; 0x1142 <main+0xaa>
				semaphores.change_speed = 0;
			}	
			
		}	//end of testing state
		
		while(state == TRAPPED)
    1188:	03 c0       	rjmp	.+6      	; 0x1190 <main+0xf8>
		{		
			//set state to spinning
			state = SPINNING;
    118a:	82 e0       	ldi	r24, 0x02	; 2
    118c:	80 93 0a 20 	sts	0x200A, r24
				semaphores.change_speed = 0;
			}	
			
		}	//end of testing state
		
		while(state == TRAPPED)
    1190:	80 91 0a 20 	lds	r24, 0x200A
    1194:	81 30       	cpi	r24, 0x01	; 1
    1196:	c9 f3       	breq	.-14     	; 0x118a <main+0xf2>
			state = SPINNING;
			
			
		}
		
		while(state == SPINNING)
    1198:	2d c0       	rjmp	.+90     	; 0x11f4 <main+0x15c>
		{
			//tell the robot to spin
			set_direction(SPIN_CC);
    119a:	84 e0       	ldi	r24, 0x04	; 4
    119c:	0d dc       	rcall	.-2022   	; 0x9b8 <set_direction>
			set_speed_with_ramp(MOTOR_FAST_TICKS);
    119e:	80 e4       	ldi	r24, 0x40	; 64
    11a0:	9f e1       	ldi	r25, 0x1F	; 31
    11a2:	83 dc       	rcall	.-1786   	; 0xaaa <set_speed_with_ramp>
			
			//turn on spinning timer so we can end the spin
			semaphores.spin_complete = 0;	//set to 0 so ISR can set it to 1
    11a4:	80 91 30 20 	lds	r24, 0x2030
    11a8:	8f 77       	andi	r24, 0x7F	; 127
    11aa:	80 93 30 20 	sts	0x2030, r24
			set_spinTimer(SPIN_TICKS);
    11ae:	84 e2       	ldi	r24, 0x24	; 36
    11b0:	94 ef       	ldi	r25, 0xF4	; 244
    11b2:	39 de       	rcall	.-910    	; 0xe26 <set_spinTimer>
			
			//wait for the spin to finish, do LED light show while we wait
			while(!semaphores.spin_complete)
    11b4:	0b c0       	rjmp	.+22     	; 0x11cc <main+0x134>
			{
				if(semaphores.led_toggle) 
    11b6:	80 91 31 20 	lds	r24, 0x2031
    11ba:	81 70       	andi	r24, 0x01	; 1
    11bc:	88 23       	and	r24, r24
    11be:	31 f0       	breq	.+12     	; 0x11cc <main+0x134>
				{
					next_spin_led();
    11c0:	3f db       	rcall	.-2434   	; 0x840 <next_spin_led>
					semaphores.led_toggle = 0;
    11c2:	80 91 31 20 	lds	r24, 0x2031
    11c6:	8e 7f       	andi	r24, 0xFE	; 254
    11c8:	80 93 31 20 	sts	0x2031, r24
			//turn on spinning timer so we can end the spin
			semaphores.spin_complete = 0;	//set to 0 so ISR can set it to 1
			set_spinTimer(SPIN_TICKS);
			
			//wait for the spin to finish, do LED light show while we wait
			while(!semaphores.spin_complete)
    11cc:	80 91 30 20 	lds	r24, 0x2030
    11d0:	80 78       	andi	r24, 0x80	; 128
    11d2:	88 23       	and	r24, r24
    11d4:	81 f3       	breq	.-32     	; 0x11b6 <main+0x11e>
					next_spin_led();
					semaphores.led_toggle = 0;
				}
			}
			
			semaphores.spin_complete = 0;
    11d6:	80 91 30 20 	lds	r24, 0x2030
    11da:	8f 77       	andi	r24, 0x7F	; 127
    11dc:	80 93 30 20 	sts	0x2030, r24
			
			//turn off the spin timer
			set_spinTimer(0);
    11e0:	80 e0       	ldi	r24, 0x00	; 0
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	20 de       	rcall	.-960    	; 0xe26 <set_spinTimer>
			//stop spinning
			set_speed_with_ramp(0);
    11e6:	80 e0       	ldi	r24, 0x00	; 0
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	5f dc       	rcall	.-1858   	; 0xaaa <set_speed_with_ramp>
				
			//after spin is done, return to escaping
			//reset the sensors so they can start performing measurements
			reset_infSens();	
    11ec:	8a d2       	rcall	.+1300   	; 0x1702 <reset_infSens>
			clear_meas_sems();
    11ee:	5e de       	rcall	.-836    	; 0xeac <clear_meas_sems>
			state = ESCAPING;
    11f0:	10 92 0a 20 	sts	0x200A, r1
			state = SPINNING;
			
			
		}
		
		while(state == SPINNING)
    11f4:	80 91 0a 20 	lds	r24, 0x200A
    11f8:	82 30       	cpi	r24, 0x02	; 2
    11fa:	79 f2       	breq	.-98     	; 0x119a <main+0x102>
		
			
		}	//end of spinning state
		
		
	}
    11fc:	00 00       	nop
	state = ESCAPING;

	while(1)
	{
		//escaping state
		while(state == ESCAPING)
    11fe:	9c cf       	rjmp	.-200    	; 0x1138 <main+0xa0>

00001200 <setup_timer_D1>:
{
	TCD0_CCA = (uint16_t)(calculate_sigmoid(threat_distance[LEFT]) * MAX_TICKS_THREAT_LED * 500);
	TCD0_CCB = (uint16_t)(calculate_sigmoid(threat_distance[FRONT]) * MAX_TICKS_THREAT_LED * 500);
	TCD0_CCC = (uint16_t)(calculate_sigmoid(threat_distance[BACK]) * MAX_TICKS_THREAT_LED * 500);
	TCD0_CCD = (uint16_t)(calculate_sigmoid(threat_distance[RIGHT]) * MAX_TICKS_THREAT_LED *  500);
}
    1200:	cf 93       	push	r28
    1202:	df 93       	push	r29
    1204:	cd b7       	in	r28, 0x3d	; 61
    1206:	de b7       	in	r29, 0x3e	; 62
    1208:	86 e6       	ldi	r24, 0x66	; 102
    120a:	99 e0       	ldi	r25, 0x09	; 9
    120c:	20 e5       	ldi	r18, 0x50	; 80
    120e:	33 ec       	ldi	r19, 0xC3	; 195
    1210:	fc 01       	movw	r30, r24
    1212:	20 83       	st	Z, r18
    1214:	31 83       	std	Z+1, r19	; 0x01
    1216:	86 e4       	ldi	r24, 0x46	; 70
    1218:	99 e0       	ldi	r25, 0x09	; 9
    121a:	22 e0       	ldi	r18, 0x02	; 2
    121c:	fc 01       	movw	r30, r24
    121e:	20 83       	st	Z, r18
    1220:	80 e4       	ldi	r24, 0x40	; 64
    1222:	99 e0       	ldi	r25, 0x09	; 9
    1224:	25 e0       	ldi	r18, 0x05	; 5
    1226:	fc 01       	movw	r30, r24
    1228:	20 83       	st	Z, r18
    122a:	df 91       	pop	r29
    122c:	cf 91       	pop	r28
    122e:	08 95       	ret

00001230 <__vector_83>:
    1230:	1f 92       	push	r1
    1232:	0f 92       	push	r0
    1234:	00 90 3f 00 	lds	r0, 0x003F
    1238:	0f 92       	push	r0
    123a:	11 24       	eor	r1, r1
    123c:	00 90 38 00 	lds	r0, 0x0038
    1240:	0f 92       	push	r0
    1242:	10 92 38 00 	sts	0x0038, r1
    1246:	00 90 3a 00 	lds	r0, 0x003A
    124a:	0f 92       	push	r0
    124c:	10 92 3a 00 	sts	0x003A, r1
    1250:	00 90 3b 00 	lds	r0, 0x003B
    1254:	0f 92       	push	r0
    1256:	10 92 3b 00 	sts	0x003B, r1
    125a:	2f 93       	push	r18
    125c:	3f 93       	push	r19
    125e:	8f 93       	push	r24
    1260:	9f 93       	push	r25
    1262:	ef 93       	push	r30
    1264:	ff 93       	push	r31
    1266:	cf 93       	push	r28
    1268:	df 93       	push	r29
    126a:	cd b7       	in	r28, 0x3d	; 61
    126c:	de b7       	in	r29, 0x3e	; 62
    126e:	80 e4       	ldi	r24, 0x40	; 64
    1270:	92 e0       	ldi	r25, 0x02	; 2
    1272:	20 e4       	ldi	r18, 0x40	; 64
    1274:	32 e0       	ldi	r19, 0x02	; 2
    1276:	f9 01       	movw	r30, r18
    1278:	20 81       	ld	r18, Z
    127a:	2c 63       	ori	r18, 0x3C	; 60
    127c:	fc 01       	movw	r30, r24
    127e:	20 83       	st	Z, r18
    1280:	df 91       	pop	r29
    1282:	cf 91       	pop	r28
    1284:	ff 91       	pop	r31
    1286:	ef 91       	pop	r30
    1288:	9f 91       	pop	r25
    128a:	8f 91       	pop	r24
    128c:	3f 91       	pop	r19
    128e:	2f 91       	pop	r18
    1290:	0f 90       	pop	r0
    1292:	00 92 3b 00 	sts	0x003B, r0
    1296:	0f 90       	pop	r0
    1298:	00 92 3a 00 	sts	0x003A, r0
    129c:	0f 90       	pop	r0
    129e:	00 92 38 00 	sts	0x0038, r0
    12a2:	0f 90       	pop	r0
    12a4:	00 92 3f 00 	sts	0x003F, r0
    12a8:	0f 90       	pop	r0
    12aa:	1f 90       	pop	r1
    12ac:	18 95       	reti

000012ae <initialize_threat_distances>:
    12ae:	cf 93       	push	r28
    12b0:	df 93       	push	r29
    12b2:	cd b7       	in	r28, 0x3d	; 61
    12b4:	de b7       	in	r29, 0x3e	; 62
    12b6:	10 92 00 20 	sts	0x2000, r1
    12ba:	10 92 01 20 	sts	0x2001, r1
    12be:	10 92 06 20 	sts	0x2006, r1
    12c2:	10 92 07 20 	sts	0x2007, r1
    12c6:	10 92 02 20 	sts	0x2002, r1
    12ca:	10 92 03 20 	sts	0x2003, r1
    12ce:	10 92 04 20 	sts	0x2004, r1
    12d2:	10 92 05 20 	sts	0x2005, r1
    12d6:	df 91       	pop	r29
    12d8:	cf 91       	pop	r28
    12da:	08 95       	ret

000012dc <__vector_77>:

//Interrupts used for setting threat measurements from infrared sensors to lower nibble of LED port

//D0 used to control threat level LEDs (4 lsb)
ISR(TCD0_OVF_vect)
{
    12dc:	1f 92       	push	r1
    12de:	0f 92       	push	r0
    12e0:	00 90 3f 00 	lds	r0, 0x003F
    12e4:	0f 92       	push	r0
    12e6:	11 24       	eor	r1, r1
    12e8:	00 90 38 00 	lds	r0, 0x0038
    12ec:	0f 92       	push	r0
    12ee:	10 92 38 00 	sts	0x0038, r1
    12f2:	00 90 3a 00 	lds	r0, 0x003A
    12f6:	0f 92       	push	r0
    12f8:	10 92 3a 00 	sts	0x003A, r1
    12fc:	00 90 3b 00 	lds	r0, 0x003B
    1300:	0f 92       	push	r0
    1302:	10 92 3b 00 	sts	0x003B, r1
    1306:	2f 93       	push	r18
    1308:	3f 93       	push	r19
    130a:	8f 93       	push	r24
    130c:	9f 93       	push	r25
    130e:	ef 93       	push	r30
    1310:	ff 93       	push	r31
    1312:	cf 93       	push	r28
    1314:	df 93       	push	r29
    1316:	cd b7       	in	r28, 0x3d	; 61
    1318:	de b7       	in	r29, 0x3e	; 62
	//turn on all of the LEDs used on so that CCA, CCB, CCC, CCD can turn them off
	LED_PORT.OUT |= 0x0F;
    131a:	80 ee       	ldi	r24, 0xE0	; 224
    131c:	96 e0       	ldi	r25, 0x06	; 6
    131e:	20 ee       	ldi	r18, 0xE0	; 224
    1320:	36 e0       	ldi	r19, 0x06	; 6
    1322:	f9 01       	movw	r30, r18
    1324:	24 81       	ldd	r18, Z+4	; 0x04
    1326:	2f 60       	ori	r18, 0x0F	; 15
    1328:	fc 01       	movw	r30, r24
    132a:	24 83       	std	Z+4, r18	; 0x04
}
    132c:	df 91       	pop	r29
    132e:	cf 91       	pop	r28
    1330:	ff 91       	pop	r31
    1332:	ef 91       	pop	r30
    1334:	9f 91       	pop	r25
    1336:	8f 91       	pop	r24
    1338:	3f 91       	pop	r19
    133a:	2f 91       	pop	r18
    133c:	0f 90       	pop	r0
    133e:	00 92 3b 00 	sts	0x003B, r0
    1342:	0f 90       	pop	r0
    1344:	00 92 3a 00 	sts	0x003A, r0
    1348:	0f 90       	pop	r0
    134a:	00 92 38 00 	sts	0x0038, r0
    134e:	0f 90       	pop	r0
    1350:	00 92 3f 00 	sts	0x003F, r0
    1354:	0f 90       	pop	r0
    1356:	1f 90       	pop	r1
    1358:	18 95       	reti

0000135a <__vector_79>:

ISR(TCD0_CCA_vect)
{
    135a:	1f 92       	push	r1
    135c:	0f 92       	push	r0
    135e:	00 90 3f 00 	lds	r0, 0x003F
    1362:	0f 92       	push	r0
    1364:	11 24       	eor	r1, r1
    1366:	00 90 38 00 	lds	r0, 0x0038
    136a:	0f 92       	push	r0
    136c:	10 92 38 00 	sts	0x0038, r1
    1370:	00 90 3a 00 	lds	r0, 0x003A
    1374:	0f 92       	push	r0
    1376:	10 92 3a 00 	sts	0x003A, r1
    137a:	00 90 3b 00 	lds	r0, 0x003B
    137e:	0f 92       	push	r0
    1380:	10 92 3b 00 	sts	0x003B, r1
    1384:	2f 93       	push	r18
    1386:	3f 93       	push	r19
    1388:	8f 93       	push	r24
    138a:	9f 93       	push	r25
    138c:	ef 93       	push	r30
    138e:	ff 93       	push	r31
    1390:	cf 93       	push	r28
    1392:	df 93       	push	r29
    1394:	cd b7       	in	r28, 0x3d	; 61
    1396:	de b7       	in	r29, 0x3e	; 62
	//turn off left moving LED
	LED_PORT.OUT &= (~LED_THREAT_LEFT);
    1398:	80 ee       	ldi	r24, 0xE0	; 224
    139a:	96 e0       	ldi	r25, 0x06	; 6
    139c:	20 ee       	ldi	r18, 0xE0	; 224
    139e:	36 e0       	ldi	r19, 0x06	; 6
    13a0:	f9 01       	movw	r30, r18
    13a2:	24 81       	ldd	r18, Z+4	; 0x04
    13a4:	27 7f       	andi	r18, 0xF7	; 247
    13a6:	fc 01       	movw	r30, r24
    13a8:	24 83       	std	Z+4, r18	; 0x04
}
    13aa:	df 91       	pop	r29
    13ac:	cf 91       	pop	r28
    13ae:	ff 91       	pop	r31
    13b0:	ef 91       	pop	r30
    13b2:	9f 91       	pop	r25
    13b4:	8f 91       	pop	r24
    13b6:	3f 91       	pop	r19
    13b8:	2f 91       	pop	r18
    13ba:	0f 90       	pop	r0
    13bc:	00 92 3b 00 	sts	0x003B, r0
    13c0:	0f 90       	pop	r0
    13c2:	00 92 3a 00 	sts	0x003A, r0
    13c6:	0f 90       	pop	r0
    13c8:	00 92 38 00 	sts	0x0038, r0
    13cc:	0f 90       	pop	r0
    13ce:	00 92 3f 00 	sts	0x003F, r0
    13d2:	0f 90       	pop	r0
    13d4:	1f 90       	pop	r1
    13d6:	18 95       	reti

000013d8 <__vector_80>:

ISR(TCD0_CCB_vect)
{
    13d8:	1f 92       	push	r1
    13da:	0f 92       	push	r0
    13dc:	00 90 3f 00 	lds	r0, 0x003F
    13e0:	0f 92       	push	r0
    13e2:	11 24       	eor	r1, r1
    13e4:	00 90 38 00 	lds	r0, 0x0038
    13e8:	0f 92       	push	r0
    13ea:	10 92 38 00 	sts	0x0038, r1
    13ee:	00 90 3a 00 	lds	r0, 0x003A
    13f2:	0f 92       	push	r0
    13f4:	10 92 3a 00 	sts	0x003A, r1
    13f8:	00 90 3b 00 	lds	r0, 0x003B
    13fc:	0f 92       	push	r0
    13fe:	10 92 3b 00 	sts	0x003B, r1
    1402:	2f 93       	push	r18
    1404:	3f 93       	push	r19
    1406:	8f 93       	push	r24
    1408:	9f 93       	push	r25
    140a:	ef 93       	push	r30
    140c:	ff 93       	push	r31
    140e:	cf 93       	push	r28
    1410:	df 93       	push	r29
    1412:	cd b7       	in	r28, 0x3d	; 61
    1414:	de b7       	in	r29, 0x3e	; 62
	//turn off front moving LED
	LED_PORT.OUT &= (~LED_THREAT_FORWARD);
    1416:	80 ee       	ldi	r24, 0xE0	; 224
    1418:	96 e0       	ldi	r25, 0x06	; 6
    141a:	20 ee       	ldi	r18, 0xE0	; 224
    141c:	36 e0       	ldi	r19, 0x06	; 6
    141e:	f9 01       	movw	r30, r18
    1420:	24 81       	ldd	r18, Z+4	; 0x04
    1422:	2b 7f       	andi	r18, 0xFB	; 251
    1424:	fc 01       	movw	r30, r24
    1426:	24 83       	std	Z+4, r18	; 0x04
}
    1428:	df 91       	pop	r29
    142a:	cf 91       	pop	r28
    142c:	ff 91       	pop	r31
    142e:	ef 91       	pop	r30
    1430:	9f 91       	pop	r25
    1432:	8f 91       	pop	r24
    1434:	3f 91       	pop	r19
    1436:	2f 91       	pop	r18
    1438:	0f 90       	pop	r0
    143a:	00 92 3b 00 	sts	0x003B, r0
    143e:	0f 90       	pop	r0
    1440:	00 92 3a 00 	sts	0x003A, r0
    1444:	0f 90       	pop	r0
    1446:	00 92 38 00 	sts	0x0038, r0
    144a:	0f 90       	pop	r0
    144c:	00 92 3f 00 	sts	0x003F, r0
    1450:	0f 90       	pop	r0
    1452:	1f 90       	pop	r1
    1454:	18 95       	reti

00001456 <__vector_81>:

ISR(TCD0_CCC_vect)
{
    1456:	1f 92       	push	r1
    1458:	0f 92       	push	r0
    145a:	00 90 3f 00 	lds	r0, 0x003F
    145e:	0f 92       	push	r0
    1460:	11 24       	eor	r1, r1
    1462:	00 90 38 00 	lds	r0, 0x0038
    1466:	0f 92       	push	r0
    1468:	10 92 38 00 	sts	0x0038, r1
    146c:	00 90 3a 00 	lds	r0, 0x003A
    1470:	0f 92       	push	r0
    1472:	10 92 3a 00 	sts	0x003A, r1
    1476:	00 90 3b 00 	lds	r0, 0x003B
    147a:	0f 92       	push	r0
    147c:	10 92 3b 00 	sts	0x003B, r1
    1480:	2f 93       	push	r18
    1482:	3f 93       	push	r19
    1484:	8f 93       	push	r24
    1486:	9f 93       	push	r25
    1488:	ef 93       	push	r30
    148a:	ff 93       	push	r31
    148c:	cf 93       	push	r28
    148e:	df 93       	push	r29
    1490:	cd b7       	in	r28, 0x3d	; 61
    1492:	de b7       	in	r29, 0x3e	; 62
	//turn off back moving LED
	LED_PORT.OUT &= (~LED_THREAT_BACKWARD);
    1494:	80 ee       	ldi	r24, 0xE0	; 224
    1496:	96 e0       	ldi	r25, 0x06	; 6
    1498:	20 ee       	ldi	r18, 0xE0	; 224
    149a:	36 e0       	ldi	r19, 0x06	; 6
    149c:	f9 01       	movw	r30, r18
    149e:	24 81       	ldd	r18, Z+4	; 0x04
    14a0:	2d 7f       	andi	r18, 0xFD	; 253
    14a2:	fc 01       	movw	r30, r24
    14a4:	24 83       	std	Z+4, r18	; 0x04
}
    14a6:	df 91       	pop	r29
    14a8:	cf 91       	pop	r28
    14aa:	ff 91       	pop	r31
    14ac:	ef 91       	pop	r30
    14ae:	9f 91       	pop	r25
    14b0:	8f 91       	pop	r24
    14b2:	3f 91       	pop	r19
    14b4:	2f 91       	pop	r18
    14b6:	0f 90       	pop	r0
    14b8:	00 92 3b 00 	sts	0x003B, r0
    14bc:	0f 90       	pop	r0
    14be:	00 92 3a 00 	sts	0x003A, r0
    14c2:	0f 90       	pop	r0
    14c4:	00 92 38 00 	sts	0x0038, r0
    14c8:	0f 90       	pop	r0
    14ca:	00 92 3f 00 	sts	0x003F, r0
    14ce:	0f 90       	pop	r0
    14d0:	1f 90       	pop	r1
    14d2:	18 95       	reti

000014d4 <__vector_82>:

ISR(TCD0_CCD_vect)
{
    14d4:	1f 92       	push	r1
    14d6:	0f 92       	push	r0
    14d8:	00 90 3f 00 	lds	r0, 0x003F
    14dc:	0f 92       	push	r0
    14de:	11 24       	eor	r1, r1
    14e0:	00 90 38 00 	lds	r0, 0x0038
    14e4:	0f 92       	push	r0
    14e6:	10 92 38 00 	sts	0x0038, r1
    14ea:	00 90 3a 00 	lds	r0, 0x003A
    14ee:	0f 92       	push	r0
    14f0:	10 92 3a 00 	sts	0x003A, r1
    14f4:	00 90 3b 00 	lds	r0, 0x003B
    14f8:	0f 92       	push	r0
    14fa:	10 92 3b 00 	sts	0x003B, r1
    14fe:	2f 93       	push	r18
    1500:	3f 93       	push	r19
    1502:	8f 93       	push	r24
    1504:	9f 93       	push	r25
    1506:	ef 93       	push	r30
    1508:	ff 93       	push	r31
    150a:	cf 93       	push	r28
    150c:	df 93       	push	r29
    150e:	cd b7       	in	r28, 0x3d	; 61
    1510:	de b7       	in	r29, 0x3e	; 62
	//turn off right moving LED
	LED_PORT.OUT &= (~LED_THREAT_RIGHT);
    1512:	80 ee       	ldi	r24, 0xE0	; 224
    1514:	96 e0       	ldi	r25, 0x06	; 6
    1516:	20 ee       	ldi	r18, 0xE0	; 224
    1518:	36 e0       	ldi	r19, 0x06	; 6
    151a:	f9 01       	movw	r30, r18
    151c:	24 81       	ldd	r18, Z+4	; 0x04
    151e:	2e 7f       	andi	r18, 0xFE	; 254
    1520:	fc 01       	movw	r30, r24
    1522:	24 83       	std	Z+4, r18	; 0x04
	
	
}
    1524:	df 91       	pop	r29
    1526:	cf 91       	pop	r28
    1528:	ff 91       	pop	r31
    152a:	ef 91       	pop	r30
    152c:	9f 91       	pop	r25
    152e:	8f 91       	pop	r24
    1530:	3f 91       	pop	r19
    1532:	2f 91       	pop	r18
    1534:	0f 90       	pop	r0
    1536:	00 92 3b 00 	sts	0x003B, r0
    153a:	0f 90       	pop	r0
    153c:	00 92 3a 00 	sts	0x003A, r0
    1540:	0f 90       	pop	r0
    1542:	00 92 38 00 	sts	0x0038, r0
    1546:	0f 90       	pop	r0
    1548:	00 92 3f 00 	sts	0x003F, r0
    154c:	0f 90       	pop	r0
    154e:	1f 90       	pop	r1
    1550:	18 95       	reti

00001552 <set_infrSens_avg_to_threatDist>:


//called by main to calculate the average threat distance measured by sensors every 500ms
void set_infrSens_avg_to_threatDist()
{
    1552:	cf 93       	push	r28
    1554:	df 93       	push	r29
    1556:	cd b7       	in	r28, 0x3d	; 61
    1558:	de b7       	in	r29, 0x3e	; 62
	threat_distance[LEFT] = calc_avg(LEFT);
    155a:	80 e0       	ldi	r24, 0x00	; 0
    155c:	19 d0       	rcall	.+50     	; 0x1590 <calc_avg>
    155e:	80 93 00 20 	sts	0x2000, r24
    1562:	90 93 01 20 	sts	0x2001, r25
	threat_distance[RIGHT] = calc_avg(RIGHT);
    1566:	83 e0       	ldi	r24, 0x03	; 3
    1568:	13 d0       	rcall	.+38     	; 0x1590 <calc_avg>
    156a:	80 93 06 20 	sts	0x2006, r24
    156e:	90 93 07 20 	sts	0x2007, r25
	threat_distance[FRONT] = calc_avg(FRONT);
    1572:	81 e0       	ldi	r24, 0x01	; 1
    1574:	0d d0       	rcall	.+26     	; 0x1590 <calc_avg>
    1576:	80 93 02 20 	sts	0x2002, r24
    157a:	90 93 03 20 	sts	0x2003, r25
	threat_distance[BACK] = calc_avg(BACK);
    157e:	82 e0       	ldi	r24, 0x02	; 2
    1580:	07 d0       	rcall	.+14     	; 0x1590 <calc_avg>
    1582:	80 93 04 20 	sts	0x2004, r24
    1586:	90 93 05 20 	sts	0x2005, r25
}
    158a:	df 91       	pop	r29
    158c:	cf 91       	pop	r28
    158e:	08 95       	ret

00001590 <calc_avg>:


//calculates average of sensor measurements based on the direction passed
//threat measurements are stored in arrays in infResults structure
uint16_t calc_avg(uint8_t direction)
{
    1590:	cf 93       	push	r28
    1592:	df 93       	push	r29
    1594:	cd b7       	in	r28, 0x3d	; 61
    1596:	de b7       	in	r29, 0x3e	; 62
    1598:	2f 97       	sbiw	r28, 0x0f	; 15
    159a:	cd bf       	out	0x3d, r28	; 61
    159c:	de bf       	out	0x3e, r29	; 62
    159e:	8d 87       	std	Y+13, r24	; 0x0d
	int sum = 0;
    15a0:	19 82       	std	Y+1, r1	; 0x01
    15a2:	1a 82       	std	Y+2, r1	; 0x02
	int count = 0;
    15a4:	1b 82       	std	Y+3, r1	; 0x03
    15a6:	1c 82       	std	Y+4, r1	; 0x04
	
	switch(direction)
    15a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    15aa:	88 2f       	mov	r24, r24
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	81 30       	cpi	r24, 0x01	; 1
    15b0:	91 05       	cpc	r25, r1
    15b2:	89 f1       	breq	.+98     	; 0x1616 <calc_avg+0x86>
    15b4:	82 30       	cpi	r24, 0x02	; 2
    15b6:	91 05       	cpc	r25, r1
    15b8:	1c f4       	brge	.+6      	; 0x15c0 <calc_avg+0x30>
    15ba:	00 97       	sbiw	r24, 0x00	; 0
    15bc:	51 f0       	breq	.+20     	; 0x15d2 <calc_avg+0x42>
    15be:	94 c0       	rjmp	.+296    	; 0x16e8 <calc_avg+0x158>
    15c0:	82 30       	cpi	r24, 0x02	; 2
    15c2:	91 05       	cpc	r25, r1
    15c4:	09 f4       	brne	.+2      	; 0x15c8 <calc_avg+0x38>
    15c6:	4a c0       	rjmp	.+148    	; 0x165c <calc_avg+0xcc>
    15c8:	83 30       	cpi	r24, 0x03	; 3
    15ca:	91 05       	cpc	r25, r1
    15cc:	09 f4       	brne	.+2      	; 0x15d0 <calc_avg+0x40>
    15ce:	69 c0       	rjmp	.+210    	; 0x16a2 <calc_avg+0x112>
    15d0:	8b c0       	rjmp	.+278    	; 0x16e8 <calc_avg+0x158>
	{
		case LEFT:
		
			for (int i = 0; i < NUM_INF_SENS_MEAS; i++)
    15d2:	1d 82       	std	Y+5, r1	; 0x05
    15d4:	1e 82       	std	Y+6, r1	; 0x06
    15d6:	19 c0       	rjmp	.+50     	; 0x160a <calc_avg+0x7a>
			{
				sum += infrResults.left[i];
    15d8:	8d 81       	ldd	r24, Y+5	; 0x05
    15da:	9e 81       	ldd	r25, Y+6	; 0x06
    15dc:	88 0f       	add	r24, r24
    15de:	99 1f       	adc	r25, r25
    15e0:	85 5f       	subi	r24, 0xF5	; 245
    15e2:	9f 4d       	sbci	r25, 0xDF	; 223
    15e4:	fc 01       	movw	r30, r24
    15e6:	20 81       	ld	r18, Z
    15e8:	31 81       	ldd	r19, Z+1	; 0x01
    15ea:	89 81       	ldd	r24, Y+1	; 0x01
    15ec:	9a 81       	ldd	r25, Y+2	; 0x02
    15ee:	82 0f       	add	r24, r18
    15f0:	93 1f       	adc	r25, r19
    15f2:	89 83       	std	Y+1, r24	; 0x01
    15f4:	9a 83       	std	Y+2, r25	; 0x02
				count++;
    15f6:	8b 81       	ldd	r24, Y+3	; 0x03
    15f8:	9c 81       	ldd	r25, Y+4	; 0x04
    15fa:	01 96       	adiw	r24, 0x01	; 1
    15fc:	8b 83       	std	Y+3, r24	; 0x03
    15fe:	9c 83       	std	Y+4, r25	; 0x04
	
	switch(direction)
	{
		case LEFT:
		
			for (int i = 0; i < NUM_INF_SENS_MEAS; i++)
    1600:	8d 81       	ldd	r24, Y+5	; 0x05
    1602:	9e 81       	ldd	r25, Y+6	; 0x06
    1604:	01 96       	adiw	r24, 0x01	; 1
    1606:	8d 83       	std	Y+5, r24	; 0x05
    1608:	9e 83       	std	Y+6, r25	; 0x06
    160a:	8d 81       	ldd	r24, Y+5	; 0x05
    160c:	9e 81       	ldd	r25, Y+6	; 0x06
    160e:	84 30       	cpi	r24, 0x04	; 4
    1610:	91 05       	cpc	r25, r1
    1612:	14 f3       	brlt	.-60     	; 0x15d8 <calc_avg+0x48>
			{
				sum += infrResults.left[i];
				count++;
			}
		
			break;
    1614:	69 c0       	rjmp	.+210    	; 0x16e8 <calc_avg+0x158>
		
		case FRONT:
		
			for (int i = 0; i < NUM_INF_SENS_MEAS; i++)
    1616:	1f 82       	std	Y+7, r1	; 0x07
    1618:	18 86       	std	Y+8, r1	; 0x08
    161a:	1a c0       	rjmp	.+52     	; 0x1650 <calc_avg+0xc0>
			{
				sum += infrResults.front[i];
    161c:	8f 81       	ldd	r24, Y+7	; 0x07
    161e:	98 85       	ldd	r25, Y+8	; 0x08
    1620:	08 96       	adiw	r24, 0x08	; 8
    1622:	88 0f       	add	r24, r24
    1624:	99 1f       	adc	r25, r25
    1626:	85 5f       	subi	r24, 0xF5	; 245
    1628:	9f 4d       	sbci	r25, 0xDF	; 223
    162a:	fc 01       	movw	r30, r24
    162c:	20 81       	ld	r18, Z
    162e:	31 81       	ldd	r19, Z+1	; 0x01
    1630:	89 81       	ldd	r24, Y+1	; 0x01
    1632:	9a 81       	ldd	r25, Y+2	; 0x02
    1634:	82 0f       	add	r24, r18
    1636:	93 1f       	adc	r25, r19
    1638:	89 83       	std	Y+1, r24	; 0x01
    163a:	9a 83       	std	Y+2, r25	; 0x02
				count++;
    163c:	8b 81       	ldd	r24, Y+3	; 0x03
    163e:	9c 81       	ldd	r25, Y+4	; 0x04
    1640:	01 96       	adiw	r24, 0x01	; 1
    1642:	8b 83       	std	Y+3, r24	; 0x03
    1644:	9c 83       	std	Y+4, r25	; 0x04
		
			break;
		
		case FRONT:
		
			for (int i = 0; i < NUM_INF_SENS_MEAS; i++)
    1646:	8f 81       	ldd	r24, Y+7	; 0x07
    1648:	98 85       	ldd	r25, Y+8	; 0x08
    164a:	01 96       	adiw	r24, 0x01	; 1
    164c:	8f 83       	std	Y+7, r24	; 0x07
    164e:	98 87       	std	Y+8, r25	; 0x08
    1650:	8f 81       	ldd	r24, Y+7	; 0x07
    1652:	98 85       	ldd	r25, Y+8	; 0x08
    1654:	84 30       	cpi	r24, 0x04	; 4
    1656:	91 05       	cpc	r25, r1
    1658:	0c f3       	brlt	.-62     	; 0x161c <calc_avg+0x8c>
			{
				sum += infrResults.front[i];
				count++;
			}
		
			break;
    165a:	46 c0       	rjmp	.+140    	; 0x16e8 <calc_avg+0x158>
		
		case BACK:
		
			for (int i = 0; i < NUM_INF_SENS_MEAS; i++)
    165c:	19 86       	std	Y+9, r1	; 0x09
    165e:	1a 86       	std	Y+10, r1	; 0x0a
    1660:	1a c0       	rjmp	.+52     	; 0x1696 <calc_avg+0x106>
			{
				sum += infrResults.back[i];
    1662:	89 85       	ldd	r24, Y+9	; 0x09
    1664:	9a 85       	ldd	r25, Y+10	; 0x0a
    1666:	0c 96       	adiw	r24, 0x0c	; 12
    1668:	88 0f       	add	r24, r24
    166a:	99 1f       	adc	r25, r25
    166c:	85 5f       	subi	r24, 0xF5	; 245
    166e:	9f 4d       	sbci	r25, 0xDF	; 223
    1670:	fc 01       	movw	r30, r24
    1672:	20 81       	ld	r18, Z
    1674:	31 81       	ldd	r19, Z+1	; 0x01
    1676:	89 81       	ldd	r24, Y+1	; 0x01
    1678:	9a 81       	ldd	r25, Y+2	; 0x02
    167a:	82 0f       	add	r24, r18
    167c:	93 1f       	adc	r25, r19
    167e:	89 83       	std	Y+1, r24	; 0x01
    1680:	9a 83       	std	Y+2, r25	; 0x02
				count++;
    1682:	8b 81       	ldd	r24, Y+3	; 0x03
    1684:	9c 81       	ldd	r25, Y+4	; 0x04
    1686:	01 96       	adiw	r24, 0x01	; 1
    1688:	8b 83       	std	Y+3, r24	; 0x03
    168a:	9c 83       	std	Y+4, r25	; 0x04
		
			break;
		
		case BACK:
		
			for (int i = 0; i < NUM_INF_SENS_MEAS; i++)
    168c:	89 85       	ldd	r24, Y+9	; 0x09
    168e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1690:	01 96       	adiw	r24, 0x01	; 1
    1692:	89 87       	std	Y+9, r24	; 0x09
    1694:	9a 87       	std	Y+10, r25	; 0x0a
    1696:	89 85       	ldd	r24, Y+9	; 0x09
    1698:	9a 85       	ldd	r25, Y+10	; 0x0a
    169a:	84 30       	cpi	r24, 0x04	; 4
    169c:	91 05       	cpc	r25, r1
    169e:	0c f3       	brlt	.-62     	; 0x1662 <calc_avg+0xd2>
			{
				sum += infrResults.back[i];
				count++;
			}
		
			break;
    16a0:	23 c0       	rjmp	.+70     	; 0x16e8 <calc_avg+0x158>
		
		case RIGHT:
		
			for (int i = 0; i < NUM_INF_SENS_MEAS; i++)
    16a2:	1b 86       	std	Y+11, r1	; 0x0b
    16a4:	1c 86       	std	Y+12, r1	; 0x0c
    16a6:	1a c0       	rjmp	.+52     	; 0x16dc <calc_avg+0x14c>
			{
				sum += infrResults.right[i];
    16a8:	8b 85       	ldd	r24, Y+11	; 0x0b
    16aa:	9c 85       	ldd	r25, Y+12	; 0x0c
    16ac:	04 96       	adiw	r24, 0x04	; 4
    16ae:	88 0f       	add	r24, r24
    16b0:	99 1f       	adc	r25, r25
    16b2:	85 5f       	subi	r24, 0xF5	; 245
    16b4:	9f 4d       	sbci	r25, 0xDF	; 223
    16b6:	fc 01       	movw	r30, r24
    16b8:	20 81       	ld	r18, Z
    16ba:	31 81       	ldd	r19, Z+1	; 0x01
    16bc:	89 81       	ldd	r24, Y+1	; 0x01
    16be:	9a 81       	ldd	r25, Y+2	; 0x02
    16c0:	82 0f       	add	r24, r18
    16c2:	93 1f       	adc	r25, r19
    16c4:	89 83       	std	Y+1, r24	; 0x01
    16c6:	9a 83       	std	Y+2, r25	; 0x02
				count++;
    16c8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ca:	9c 81       	ldd	r25, Y+4	; 0x04
    16cc:	01 96       	adiw	r24, 0x01	; 1
    16ce:	8b 83       	std	Y+3, r24	; 0x03
    16d0:	9c 83       	std	Y+4, r25	; 0x04
		
			break;
		
		case RIGHT:
		
			for (int i = 0; i < NUM_INF_SENS_MEAS; i++)
    16d2:	8b 85       	ldd	r24, Y+11	; 0x0b
    16d4:	9c 85       	ldd	r25, Y+12	; 0x0c
    16d6:	01 96       	adiw	r24, 0x01	; 1
    16d8:	8b 87       	std	Y+11, r24	; 0x0b
    16da:	9c 87       	std	Y+12, r25	; 0x0c
    16dc:	8b 85       	ldd	r24, Y+11	; 0x0b
    16de:	9c 85       	ldd	r25, Y+12	; 0x0c
    16e0:	84 30       	cpi	r24, 0x04	; 4
    16e2:	91 05       	cpc	r25, r1
    16e4:	0c f3       	brlt	.-62     	; 0x16a8 <calc_avg+0x118>
			{
				sum += infrResults.right[i];
				count++;
			}
		
			break;	
    16e6:	00 00       	nop
		
	}	
	
	return sum / count;
    16e8:	89 81       	ldd	r24, Y+1	; 0x01
    16ea:	9a 81       	ldd	r25, Y+2	; 0x02
    16ec:	2b 81       	ldd	r18, Y+3	; 0x03
    16ee:	3c 81       	ldd	r19, Y+4	; 0x04
    16f0:	b9 01       	movw	r22, r18
    16f2:	2b d1       	rcall	.+598    	; 0x194a <__divmodhi4>
    16f4:	cb 01       	movw	r24, r22
	
}
    16f6:	2f 96       	adiw	r28, 0x0f	; 15
    16f8:	cd bf       	out	0x3d, r28	; 61
    16fa:	de bf       	out	0x3e, r29	; 62
    16fc:	df 91       	pop	r29
    16fe:	cf 91       	pop	r28
    1700:	08 95       	ret

00001702 <reset_infSens>:

//resets the measurement count, called by main after a direction has been determined every 500ms
void reset_infSens()
{
    1702:	cf 93       	push	r28
    1704:	df 93       	push	r29
    1706:	cd b7       	in	r28, 0x3d	; 61
    1708:	de b7       	in	r29, 0x3e	; 62
	infrResults.lCount = 0;
    170a:	10 92 2b 20 	sts	0x202B, r1
	infrResults.rCount = 0;
    170e:	10 92 2c 20 	sts	0x202C, r1
	infrResults.fCount = 0;
    1712:	10 92 2d 20 	sts	0x202D, r1
	infrResults.bCount = 0;
    1716:	10 92 2e 20 	sts	0x202E, r1
	
}
    171a:	df 91       	pop	r29
    171c:	cf 91       	pop	r28
    171e:	08 95       	ret

00001720 <CCPIOWrite>:
    1720:	0f 93       	push	r16
    1722:	cf 93       	push	r28
    1724:	df 93       	push	r29
    1726:	1f 92       	push	r1
    1728:	cd b7       	in	r28, 0x3d	; 61
    172a:	de b7       	in	r29, 0x3e	; 62
    172c:	2f b7       	in	r18, 0x3f	; 63
    172e:	29 83       	std	Y+1, r18	; 0x01
    1730:	f8 94       	cli
    1732:	1b be       	out	0x3b, r1	; 59
    1734:	fc 01       	movw	r30, r24
    1736:	08 ed       	ldi	r16, 0xD8	; 216
    1738:	04 bf       	out	0x34, r16	; 52
    173a:	60 83       	st	Z, r22
    173c:	89 81       	ldd	r24, Y+1	; 0x01
    173e:	8f bf       	out	0x3f, r24	; 63
    1740:	0f 90       	pop	r0
    1742:	df 91       	pop	r29
    1744:	cf 91       	pop	r28
    1746:	0f 91       	pop	r16
    1748:	08 95       	ret

0000174a <SetSystemClock>:
    174a:	cf 93       	push	r28
    174c:	df 93       	push	r29
    174e:	d8 2f       	mov	r29, r24
    1750:	82 30       	cpi	r24, 0x02	; 2
    1752:	59 f0       	breq	.+22     	; 0x176a <SetSystemClock+0x20>
    1754:	28 f4       	brcc	.+10     	; 0x1760 <SetSystemClock+0x16>
    1756:	88 23       	and	r24, r24
    1758:	71 f0       	breq	.+28     	; 0x1776 <SetSystemClock+0x2c>
    175a:	81 30       	cpi	r24, 0x01	; 1
    175c:	21 f5       	brne	.+72     	; 0x17a6 <SetSystemClock+0x5c>
    175e:	0d c0       	rjmp	.+26     	; 0x177a <SetSystemClock+0x30>
    1760:	83 30       	cpi	r24, 0x03	; 3
    1762:	29 f0       	breq	.+10     	; 0x176e <SetSystemClock+0x24>
    1764:	84 30       	cpi	r24, 0x04	; 4
    1766:	f9 f4       	brne	.+62     	; 0x17a6 <SetSystemClock+0x5c>
    1768:	04 c0       	rjmp	.+8      	; 0x1772 <SetSystemClock+0x28>
    176a:	c4 e0       	ldi	r28, 0x04	; 4
    176c:	07 c0       	rjmp	.+14     	; 0x177c <SetSystemClock+0x32>
    176e:	c8 e0       	ldi	r28, 0x08	; 8
    1770:	05 c0       	rjmp	.+10     	; 0x177c <SetSystemClock+0x32>
    1772:	c0 e1       	ldi	r28, 0x10	; 16
    1774:	03 c0       	rjmp	.+6      	; 0x177c <SetSystemClock+0x32>
    1776:	c1 e0       	ldi	r28, 0x01	; 1
    1778:	01 c0       	rjmp	.+2      	; 0x177c <SetSystemClock+0x32>
    177a:	c2 e0       	ldi	r28, 0x02	; 2
    177c:	e0 e5       	ldi	r30, 0x50	; 80
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	80 81       	ld	r24, Z
    1782:	8c 2b       	or	r24, r28
    1784:	80 83       	st	Z, r24
    1786:	64 2b       	or	r22, r20
    1788:	81 e4       	ldi	r24, 0x41	; 65
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	c9 df       	rcall	.-110    	; 0x1720 <CCPIOWrite>
    178e:	e1 e5       	ldi	r30, 0x51	; 81
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	90 81       	ld	r25, Z
    1794:	9c 23       	and	r25, r28
    1796:	e9 f3       	breq	.-6      	; 0x1792 <SetSystemClock+0x48>
    1798:	6d 2f       	mov	r22, r29
    179a:	80 e4       	ldi	r24, 0x40	; 64
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	c0 df       	rcall	.-128    	; 0x1720 <CCPIOWrite>
    17a0:	21 e0       	ldi	r18, 0x01	; 1
    17a2:	30 e0       	ldi	r19, 0x00	; 0
    17a4:	02 c0       	rjmp	.+4      	; 0x17aa <SetSystemClock+0x60>
    17a6:	2f ef       	ldi	r18, 0xFF	; 255
    17a8:	3f ef       	ldi	r19, 0xFF	; 255
    17aa:	82 2f       	mov	r24, r18
    17ac:	93 2f       	mov	r25, r19
    17ae:	df 91       	pop	r29
    17b0:	cf 91       	pop	r28
    17b2:	08 95       	ret

000017b4 <GetSystemClocks>:
    17b4:	cf 93       	push	r28
    17b6:	df 93       	push	r29
    17b8:	fc 01       	movw	r30, r24
    17ba:	eb 01       	movw	r28, r22
    17bc:	80 91 40 00 	lds	r24, 0x0040
    17c0:	87 70       	andi	r24, 0x07	; 7
    17c2:	82 30       	cpi	r24, 0x02	; 2
    17c4:	71 f0       	breq	.+28     	; 0x17e2 <GetSystemClocks+0x2e>
    17c6:	38 f4       	brcc	.+14     	; 0x17d6 <GetSystemClocks+0x22>
    17c8:	88 23       	and	r24, r24
    17ca:	09 f4       	brne	.+2      	; 0x17ce <GetSystemClocks+0x1a>
    17cc:	42 c0       	rjmp	.+132    	; 0x1852 <GetSystemClocks+0x9e>
    17ce:	81 30       	cpi	r24, 0x01	; 1
    17d0:	09 f0       	breq	.+2      	; 0x17d4 <GetSystemClocks+0x20>
    17d2:	b4 c0       	rjmp	.+360    	; 0x193c <GetSystemClocks+0x188>
    17d4:	0f c0       	rjmp	.+30     	; 0x17f4 <GetSystemClocks+0x40>
    17d6:	83 30       	cpi	r24, 0x03	; 3
    17d8:	b1 f0       	breq	.+44     	; 0x1806 <GetSystemClocks+0x52>
    17da:	84 30       	cpi	r24, 0x04	; 4
    17dc:	09 f0       	breq	.+2      	; 0x17e0 <GetSystemClocks+0x2c>
    17de:	ae c0       	rjmp	.+348    	; 0x193c <GetSystemClocks+0x188>
    17e0:	1b c0       	rjmp	.+54     	; 0x1818 <GetSystemClocks+0x64>
    17e2:	80 e0       	ldi	r24, 0x00	; 0
    17e4:	9d e7       	ldi	r25, 0x7D	; 125
    17e6:	a0 e0       	ldi	r26, 0x00	; 0
    17e8:	b0 e0       	ldi	r27, 0x00	; 0
    17ea:	80 83       	st	Z, r24
    17ec:	91 83       	std	Z+1, r25	; 0x01
    17ee:	a2 83       	std	Z+2, r26	; 0x02
    17f0:	b3 83       	std	Z+3, r27	; 0x03
    17f2:	37 c0       	rjmp	.+110    	; 0x1862 <GetSystemClocks+0xae>
    17f4:	80 e0       	ldi	r24, 0x00	; 0
    17f6:	98 e4       	ldi	r25, 0x48	; 72
    17f8:	a8 ee       	ldi	r26, 0xE8	; 232
    17fa:	b1 e0       	ldi	r27, 0x01	; 1
    17fc:	80 83       	st	Z, r24
    17fe:	91 83       	std	Z+1, r25	; 0x01
    1800:	a2 83       	std	Z+2, r26	; 0x02
    1802:	b3 83       	std	Z+3, r27	; 0x03
    1804:	2e c0       	rjmp	.+92     	; 0x1862 <GetSystemClocks+0xae>
    1806:	80 e0       	ldi	r24, 0x00	; 0
    1808:	94 e2       	ldi	r25, 0x24	; 36
    180a:	a4 ef       	ldi	r26, 0xF4	; 244
    180c:	b0 e0       	ldi	r27, 0x00	; 0
    180e:	80 83       	st	Z, r24
    1810:	91 83       	std	Z+1, r25	; 0x01
    1812:	a2 83       	std	Z+2, r26	; 0x02
    1814:	b3 83       	std	Z+3, r27	; 0x03
    1816:	25 c0       	rjmp	.+74     	; 0x1862 <GetSystemClocks+0xae>
    1818:	25 e5       	ldi	r18, 0x55	; 85
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	d9 01       	movw	r26, r18
    181e:	8c 91       	ld	r24, X
    1820:	80 e8       	ldi	r24, 0x80	; 128
    1822:	94 e8       	ldi	r25, 0x84	; 132
    1824:	ae e1       	ldi	r26, 0x1E	; 30
    1826:	b0 e0       	ldi	r27, 0x00	; 0
    1828:	80 83       	st	Z, r24
    182a:	91 83       	std	Z+1, r25	; 0x01
    182c:	a2 83       	std	Z+2, r26	; 0x02
    182e:	b3 83       	std	Z+3, r27	; 0x03
    1830:	d9 01       	movw	r26, r18
    1832:	8c 91       	ld	r24, X
    1834:	a8 2f       	mov	r26, r24
    1836:	af 71       	andi	r26, 0x1F	; 31
    1838:	09 f4       	brne	.+2      	; 0x183c <GetSystemClocks+0x88>
    183a:	a1 e0       	ldi	r26, 0x01	; 1
    183c:	b0 e0       	ldi	r27, 0x00	; 0
    183e:	20 e8       	ldi	r18, 0x80	; 128
    1840:	34 e8       	ldi	r19, 0x84	; 132
    1842:	4e e1       	ldi	r20, 0x1E	; 30
    1844:	50 e0       	ldi	r21, 0x00	; 0
    1846:	b6 d0       	rcall	.+364    	; 0x19b4 <__muluhisi3>
    1848:	60 83       	st	Z, r22
    184a:	71 83       	std	Z+1, r23	; 0x01
    184c:	82 83       	std	Z+2, r24	; 0x02
    184e:	93 83       	std	Z+3, r25	; 0x03
    1850:	08 c0       	rjmp	.+16     	; 0x1862 <GetSystemClocks+0xae>
    1852:	80 e8       	ldi	r24, 0x80	; 128
    1854:	94 e8       	ldi	r25, 0x84	; 132
    1856:	ae e1       	ldi	r26, 0x1E	; 30
    1858:	b0 e0       	ldi	r27, 0x00	; 0
    185a:	80 83       	st	Z, r24
    185c:	91 83       	std	Z+1, r25	; 0x01
    185e:	a2 83       	std	Z+2, r26	; 0x02
    1860:	b3 83       	std	Z+3, r27	; 0x03
    1862:	80 91 41 00 	lds	r24, 0x0041
    1866:	8c 77       	andi	r24, 0x7C	; 124
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	96 95       	lsr	r25
    186c:	87 95       	ror	r24
    186e:	96 95       	lsr	r25
    1870:	87 95       	ror	r24
    1872:	89 30       	cpi	r24, 0x09	; 9
    1874:	91 05       	cpc	r25, r1
    1876:	59 f1       	breq	.+86     	; 0x18ce <GetSystemClocks+0x11a>
    1878:	6c f4       	brge	.+26     	; 0x1894 <GetSystemClocks+0xe0>
    187a:	83 30       	cpi	r24, 0x03	; 3
    187c:	91 05       	cpc	r25, r1
    187e:	c1 f0       	breq	.+48     	; 0x18b0 <GetSystemClocks+0xfc>
    1880:	1c f4       	brge	.+6      	; 0x1888 <GetSystemClocks+0xd4>
    1882:	01 97       	sbiw	r24, 0x01	; 1
    1884:	81 f4       	brne	.+32     	; 0x18a6 <GetSystemClocks+0xf2>
    1886:	37 c0       	rjmp	.+110    	; 0x18f6 <GetSystemClocks+0x142>
    1888:	85 30       	cpi	r24, 0x05	; 5
    188a:	91 05       	cpc	r25, r1
    188c:	b1 f0       	breq	.+44     	; 0x18ba <GetSystemClocks+0x106>
    188e:	07 97       	sbiw	r24, 0x07	; 7
    1890:	51 f4       	brne	.+20     	; 0x18a6 <GetSystemClocks+0xf2>
    1892:	18 c0       	rjmp	.+48     	; 0x18c4 <GetSystemClocks+0x110>
    1894:	8d 30       	cpi	r24, 0x0D	; 13
    1896:	91 05       	cpc	r25, r1
    1898:	21 f1       	breq	.+72     	; 0x18e2 <GetSystemClocks+0x12e>
    189a:	1c f4       	brge	.+6      	; 0x18a2 <GetSystemClocks+0xee>
    189c:	0b 97       	sbiw	r24, 0x0b	; 11
    189e:	19 f4       	brne	.+6      	; 0x18a6 <GetSystemClocks+0xf2>
    18a0:	1b c0       	rjmp	.+54     	; 0x18d8 <GetSystemClocks+0x124>
    18a2:	0f 97       	sbiw	r24, 0x0f	; 15
    18a4:	19 f1       	breq	.+70     	; 0x18ec <GetSystemClocks+0x138>
    18a6:	21 e0       	ldi	r18, 0x01	; 1
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	40 e0       	ldi	r20, 0x00	; 0
    18ac:	50 e0       	ldi	r21, 0x00	; 0
    18ae:	27 c0       	rjmp	.+78     	; 0x18fe <GetSystemClocks+0x14a>
    18b0:	24 e0       	ldi	r18, 0x04	; 4
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	40 e0       	ldi	r20, 0x00	; 0
    18b6:	50 e0       	ldi	r21, 0x00	; 0
    18b8:	22 c0       	rjmp	.+68     	; 0x18fe <GetSystemClocks+0x14a>
    18ba:	28 e0       	ldi	r18, 0x08	; 8
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	40 e0       	ldi	r20, 0x00	; 0
    18c0:	50 e0       	ldi	r21, 0x00	; 0
    18c2:	1d c0       	rjmp	.+58     	; 0x18fe <GetSystemClocks+0x14a>
    18c4:	20 e1       	ldi	r18, 0x10	; 16
    18c6:	30 e0       	ldi	r19, 0x00	; 0
    18c8:	40 e0       	ldi	r20, 0x00	; 0
    18ca:	50 e0       	ldi	r21, 0x00	; 0
    18cc:	18 c0       	rjmp	.+48     	; 0x18fe <GetSystemClocks+0x14a>
    18ce:	20 e2       	ldi	r18, 0x20	; 32
    18d0:	30 e0       	ldi	r19, 0x00	; 0
    18d2:	40 e0       	ldi	r20, 0x00	; 0
    18d4:	50 e0       	ldi	r21, 0x00	; 0
    18d6:	13 c0       	rjmp	.+38     	; 0x18fe <GetSystemClocks+0x14a>
    18d8:	20 e4       	ldi	r18, 0x40	; 64
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	40 e0       	ldi	r20, 0x00	; 0
    18de:	50 e0       	ldi	r21, 0x00	; 0
    18e0:	0e c0       	rjmp	.+28     	; 0x18fe <GetSystemClocks+0x14a>
    18e2:	20 e8       	ldi	r18, 0x80	; 128
    18e4:	30 e0       	ldi	r19, 0x00	; 0
    18e6:	40 e0       	ldi	r20, 0x00	; 0
    18e8:	50 e0       	ldi	r21, 0x00	; 0
    18ea:	09 c0       	rjmp	.+18     	; 0x18fe <GetSystemClocks+0x14a>
    18ec:	20 e0       	ldi	r18, 0x00	; 0
    18ee:	31 e0       	ldi	r19, 0x01	; 1
    18f0:	40 e0       	ldi	r20, 0x00	; 0
    18f2:	50 e0       	ldi	r21, 0x00	; 0
    18f4:	04 c0       	rjmp	.+8      	; 0x18fe <GetSystemClocks+0x14a>
    18f6:	22 e0       	ldi	r18, 0x02	; 2
    18f8:	30 e0       	ldi	r19, 0x00	; 0
    18fa:	40 e0       	ldi	r20, 0x00	; 0
    18fc:	50 e0       	ldi	r21, 0x00	; 0
    18fe:	80 91 41 00 	lds	r24, 0x0041
    1902:	81 ff       	sbrs	r24, 1
    1904:	09 c0       	rjmp	.+18     	; 0x1918 <GetSystemClocks+0x164>
    1906:	22 0f       	add	r18, r18
    1908:	33 1f       	adc	r19, r19
    190a:	44 1f       	adc	r20, r20
    190c:	55 1f       	adc	r21, r21
    190e:	22 0f       	add	r18, r18
    1910:	33 1f       	adc	r19, r19
    1912:	44 1f       	adc	r20, r20
    1914:	55 1f       	adc	r21, r21
    1916:	06 c0       	rjmp	.+12     	; 0x1924 <GetSystemClocks+0x170>
    1918:	80 ff       	sbrs	r24, 0
    191a:	04 c0       	rjmp	.+8      	; 0x1924 <GetSystemClocks+0x170>
    191c:	22 0f       	add	r18, r18
    191e:	33 1f       	adc	r19, r19
    1920:	44 1f       	adc	r20, r20
    1922:	55 1f       	adc	r21, r21
    1924:	60 81       	ld	r22, Z
    1926:	71 81       	ldd	r23, Z+1	; 0x01
    1928:	82 81       	ldd	r24, Z+2	; 0x02
    192a:	93 81       	ldd	r25, Z+3	; 0x03
    192c:	21 d0       	rcall	.+66     	; 0x1970 <__udivmodsi4>
    192e:	28 83       	st	Y, r18
    1930:	39 83       	std	Y+1, r19	; 0x01
    1932:	4a 83       	std	Y+2, r20	; 0x02
    1934:	5b 83       	std	Y+3, r21	; 0x03
    1936:	21 e0       	ldi	r18, 0x01	; 1
    1938:	30 e0       	ldi	r19, 0x00	; 0
    193a:	02 c0       	rjmp	.+4      	; 0x1940 <GetSystemClocks+0x18c>
    193c:	2f ef       	ldi	r18, 0xFF	; 255
    193e:	3f ef       	ldi	r19, 0xFF	; 255
    1940:	82 2f       	mov	r24, r18
    1942:	93 2f       	mov	r25, r19
    1944:	df 91       	pop	r29
    1946:	cf 91       	pop	r28
    1948:	08 95       	ret

0000194a <__divmodhi4>:
    194a:	97 fb       	bst	r25, 7
    194c:	07 2e       	mov	r0, r23
    194e:	16 f4       	brtc	.+4      	; 0x1954 <__divmodhi4+0xa>
    1950:	00 94       	com	r0
    1952:	06 d0       	rcall	.+12     	; 0x1960 <__divmodhi4_neg1>
    1954:	77 fd       	sbrc	r23, 7
    1956:	08 d0       	rcall	.+16     	; 0x1968 <__divmodhi4_neg2>
    1958:	37 d0       	rcall	.+110    	; 0x19c8 <__udivmodhi4>
    195a:	07 fc       	sbrc	r0, 7
    195c:	05 d0       	rcall	.+10     	; 0x1968 <__divmodhi4_neg2>
    195e:	3e f4       	brtc	.+14     	; 0x196e <__divmodhi4_exit>

00001960 <__divmodhi4_neg1>:
    1960:	90 95       	com	r25
    1962:	81 95       	neg	r24
    1964:	9f 4f       	sbci	r25, 0xFF	; 255
    1966:	08 95       	ret

00001968 <__divmodhi4_neg2>:
    1968:	70 95       	com	r23
    196a:	61 95       	neg	r22
    196c:	7f 4f       	sbci	r23, 0xFF	; 255

0000196e <__divmodhi4_exit>:
    196e:	08 95       	ret

00001970 <__udivmodsi4>:
    1970:	a1 e2       	ldi	r26, 0x21	; 33
    1972:	1a 2e       	mov	r1, r26
    1974:	aa 1b       	sub	r26, r26
    1976:	bb 1b       	sub	r27, r27
    1978:	fd 01       	movw	r30, r26
    197a:	0d c0       	rjmp	.+26     	; 0x1996 <__udivmodsi4_ep>

0000197c <__udivmodsi4_loop>:
    197c:	aa 1f       	adc	r26, r26
    197e:	bb 1f       	adc	r27, r27
    1980:	ee 1f       	adc	r30, r30
    1982:	ff 1f       	adc	r31, r31
    1984:	a2 17       	cp	r26, r18
    1986:	b3 07       	cpc	r27, r19
    1988:	e4 07       	cpc	r30, r20
    198a:	f5 07       	cpc	r31, r21
    198c:	20 f0       	brcs	.+8      	; 0x1996 <__udivmodsi4_ep>
    198e:	a2 1b       	sub	r26, r18
    1990:	b3 0b       	sbc	r27, r19
    1992:	e4 0b       	sbc	r30, r20
    1994:	f5 0b       	sbc	r31, r21

00001996 <__udivmodsi4_ep>:
    1996:	66 1f       	adc	r22, r22
    1998:	77 1f       	adc	r23, r23
    199a:	88 1f       	adc	r24, r24
    199c:	99 1f       	adc	r25, r25
    199e:	1a 94       	dec	r1
    19a0:	69 f7       	brne	.-38     	; 0x197c <__udivmodsi4_loop>
    19a2:	60 95       	com	r22
    19a4:	70 95       	com	r23
    19a6:	80 95       	com	r24
    19a8:	90 95       	com	r25
    19aa:	9b 01       	movw	r18, r22
    19ac:	ac 01       	movw	r20, r24
    19ae:	bd 01       	movw	r22, r26
    19b0:	cf 01       	movw	r24, r30
    19b2:	08 95       	ret

000019b4 <__muluhisi3>:
    19b4:	1d d0       	rcall	.+58     	; 0x19f0 <__umulhisi3>
    19b6:	a5 9f       	mul	r26, r21
    19b8:	90 0d       	add	r25, r0
    19ba:	b4 9f       	mul	r27, r20
    19bc:	90 0d       	add	r25, r0
    19be:	a4 9f       	mul	r26, r20
    19c0:	80 0d       	add	r24, r0
    19c2:	91 1d       	adc	r25, r1
    19c4:	11 24       	eor	r1, r1
    19c6:	08 95       	ret

000019c8 <__udivmodhi4>:
    19c8:	aa 1b       	sub	r26, r26
    19ca:	bb 1b       	sub	r27, r27
    19cc:	51 e1       	ldi	r21, 0x11	; 17
    19ce:	07 c0       	rjmp	.+14     	; 0x19de <__udivmodhi4_ep>

000019d0 <__udivmodhi4_loop>:
    19d0:	aa 1f       	adc	r26, r26
    19d2:	bb 1f       	adc	r27, r27
    19d4:	a6 17       	cp	r26, r22
    19d6:	b7 07       	cpc	r27, r23
    19d8:	10 f0       	brcs	.+4      	; 0x19de <__udivmodhi4_ep>
    19da:	a6 1b       	sub	r26, r22
    19dc:	b7 0b       	sbc	r27, r23

000019de <__udivmodhi4_ep>:
    19de:	88 1f       	adc	r24, r24
    19e0:	99 1f       	adc	r25, r25
    19e2:	5a 95       	dec	r21
    19e4:	a9 f7       	brne	.-22     	; 0x19d0 <__udivmodhi4_loop>
    19e6:	80 95       	com	r24
    19e8:	90 95       	com	r25
    19ea:	bc 01       	movw	r22, r24
    19ec:	cd 01       	movw	r24, r26
    19ee:	08 95       	ret

000019f0 <__umulhisi3>:
    19f0:	a2 9f       	mul	r26, r18
    19f2:	b0 01       	movw	r22, r0
    19f4:	b3 9f       	mul	r27, r19
    19f6:	c0 01       	movw	r24, r0
    19f8:	a3 9f       	mul	r26, r19
    19fa:	70 0d       	add	r23, r0
    19fc:	81 1d       	adc	r24, r1
    19fe:	11 24       	eor	r1, r1
    1a00:	91 1d       	adc	r25, r1
    1a02:	b2 9f       	mul	r27, r18
    1a04:	70 0d       	add	r23, r0
    1a06:	81 1d       	adc	r24, r1
    1a08:	11 24       	eor	r1, r1
    1a0a:	91 1d       	adc	r25, r1
    1a0c:	08 95       	ret

00001a0e <_exit>:
    1a0e:	f8 94       	cli

00001a10 <__stop_program>:
    1a10:	ff cf       	rjmp	.-2      	; 0x1a10 <__stop_program>
