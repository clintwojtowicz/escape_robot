
escape_robot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000019ce  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000003e  00802000  00802000  00001a42  2**0
                  ALLOC
  2 .comment      0000005f  00000000  00000000  00001a42  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000238  00000000  00000000  00001aa1  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00001e51  00000000  00000000  00001cd9  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000888  00000000  00000000  00003b2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000176b  00000000  00000000  000043b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000008b0  00000000  00000000  00005b20  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000efd  00000000  00000000  000063d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00001475  00000000  00000000  000072cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000001c8  00000000  00000000  00008742  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	f9 c0       	rjmp	.+498    	; 0x1f4 <__ctors_end>
       2:	00 00       	nop
       4:	0e c1       	rjmp	.+540    	; 0x222 <__bad_interrupt>
       6:	00 00       	nop
       8:	0c c1       	rjmp	.+536    	; 0x222 <__bad_interrupt>
       a:	00 00       	nop
       c:	0a c1       	rjmp	.+532    	; 0x222 <__bad_interrupt>
       e:	00 00       	nop
      10:	08 c1       	rjmp	.+528    	; 0x222 <__bad_interrupt>
      12:	00 00       	nop
      14:	06 c1       	rjmp	.+524    	; 0x222 <__bad_interrupt>
      16:	00 00       	nop
      18:	04 c1       	rjmp	.+520    	; 0x222 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	02 c1       	rjmp	.+516    	; 0x222 <__bad_interrupt>
      1e:	00 00       	nop
      20:	00 c1       	rjmp	.+512    	; 0x222 <__bad_interrupt>
      22:	00 00       	nop
      24:	fe c0       	rjmp	.+508    	; 0x222 <__bad_interrupt>
      26:	00 00       	nop
      28:	fc c0       	rjmp	.+504    	; 0x222 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	fa c0       	rjmp	.+500    	; 0x222 <__bad_interrupt>
      2e:	00 00       	nop
      30:	f8 c0       	rjmp	.+496    	; 0x222 <__bad_interrupt>
      32:	00 00       	nop
      34:	f6 c0       	rjmp	.+492    	; 0x222 <__bad_interrupt>
      36:	00 00       	nop
      38:	f4 c0       	rjmp	.+488    	; 0x222 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	f2 c0       	rjmp	.+484    	; 0x222 <__bad_interrupt>
      3e:	00 00       	nop
      40:	f0 c0       	rjmp	.+480    	; 0x222 <__bad_interrupt>
      42:	00 00       	nop
      44:	ee c0       	rjmp	.+476    	; 0x222 <__bad_interrupt>
      46:	00 00       	nop
      48:	ec c0       	rjmp	.+472    	; 0x222 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	ea c0       	rjmp	.+468    	; 0x222 <__bad_interrupt>
      4e:	00 00       	nop
      50:	d3 c6       	rjmp	.+3494   	; 0xdf8 <__vector_20>
      52:	00 00       	nop
      54:	e6 c0       	rjmp	.+460    	; 0x222 <__bad_interrupt>
      56:	00 00       	nop
      58:	e4 c0       	rjmp	.+456    	; 0x222 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	e2 c0       	rjmp	.+452    	; 0x222 <__bad_interrupt>
      5e:	00 00       	nop
      60:	e0 c0       	rjmp	.+448    	; 0x222 <__bad_interrupt>
      62:	00 00       	nop
      64:	de c0       	rjmp	.+444    	; 0x222 <__bad_interrupt>
      66:	00 00       	nop
      68:	dc c0       	rjmp	.+440    	; 0x222 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	da c0       	rjmp	.+436    	; 0x222 <__bad_interrupt>
      6e:	00 00       	nop
      70:	d8 c0       	rjmp	.+432    	; 0x222 <__bad_interrupt>
      72:	00 00       	nop
      74:	d6 c0       	rjmp	.+428    	; 0x222 <__bad_interrupt>
      76:	00 00       	nop
      78:	d4 c0       	rjmp	.+424    	; 0x222 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	d2 c0       	rjmp	.+420    	; 0x222 <__bad_interrupt>
      7e:	00 00       	nop
      80:	d0 c0       	rjmp	.+416    	; 0x222 <__bad_interrupt>
      82:	00 00       	nop
      84:	ce c0       	rjmp	.+412    	; 0x222 <__bad_interrupt>
      86:	00 00       	nop
      88:	cc c0       	rjmp	.+408    	; 0x222 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	ca c0       	rjmp	.+404    	; 0x222 <__bad_interrupt>
      8e:	00 00       	nop
      90:	c8 c0       	rjmp	.+400    	; 0x222 <__bad_interrupt>
      92:	00 00       	nop
      94:	c6 c0       	rjmp	.+396    	; 0x222 <__bad_interrupt>
      96:	00 00       	nop
      98:	c4 c0       	rjmp	.+392    	; 0x222 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	17 c1       	rjmp	.+558    	; 0x2cc <__vector_39>
      9e:	00 00       	nop
      a0:	6a c1       	rjmp	.+724    	; 0x376 <__vector_40>
      a2:	00 00       	nop
      a4:	be c1       	rjmp	.+892    	; 0x422 <__vector_41>
      a6:	00 00       	nop
      a8:	12 c2       	rjmp	.+1060   	; 0x4ce <__vector_42>
      aa:	00 00       	nop
      ac:	ba c0       	rjmp	.+372    	; 0x222 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	b8 c0       	rjmp	.+368    	; 0x222 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	b6 c0       	rjmp	.+364    	; 0x222 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	b4 c0       	rjmp	.+360    	; 0x222 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	b2 c0       	rjmp	.+356    	; 0x222 <__bad_interrupt>
      be:	00 00       	nop
      c0:	b0 c0       	rjmp	.+352    	; 0x222 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	ae c0       	rjmp	.+348    	; 0x222 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	ac c0       	rjmp	.+344    	; 0x222 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	aa c0       	rjmp	.+340    	; 0x222 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	a8 c0       	rjmp	.+336    	; 0x222 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	5a c4       	rjmp	.+2228   	; 0x98a <__vector_53>
      d6:	00 00       	nop
      d8:	a4 c0       	rjmp	.+328    	; 0x222 <__bad_interrupt>
      da:	00 00       	nop
      dc:	a2 c0       	rjmp	.+324    	; 0x222 <__bad_interrupt>
      de:	00 00       	nop
      e0:	a0 c0       	rjmp	.+320    	; 0x222 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	9e c0       	rjmp	.+316    	; 0x222 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	9c c0       	rjmp	.+312    	; 0x222 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	9a c0       	rjmp	.+308    	; 0x222 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	98 c0       	rjmp	.+304    	; 0x222 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	96 c0       	rjmp	.+300    	; 0x222 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	94 c0       	rjmp	.+296    	; 0x222 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	92 c0       	rjmp	.+292    	; 0x222 <__bad_interrupt>
      fe:	00 00       	nop
     100:	90 c0       	rjmp	.+288    	; 0x222 <__bad_interrupt>
     102:	00 00       	nop
     104:	8e c0       	rjmp	.+284    	; 0x222 <__bad_interrupt>
     106:	00 00       	nop
     108:	8c c0       	rjmp	.+280    	; 0x222 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	8a c0       	rjmp	.+276    	; 0x222 <__bad_interrupt>
     10e:	00 00       	nop
     110:	88 c0       	rjmp	.+272    	; 0x222 <__bad_interrupt>
     112:	00 00       	nop
     114:	86 c0       	rjmp	.+268    	; 0x222 <__bad_interrupt>
     116:	00 00       	nop
     118:	84 c0       	rjmp	.+264    	; 0x222 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	82 c0       	rjmp	.+260    	; 0x222 <__bad_interrupt>
     11e:	00 00       	nop
     120:	80 c0       	rjmp	.+256    	; 0x222 <__bad_interrupt>
     122:	00 00       	nop
     124:	7e c0       	rjmp	.+252    	; 0x222 <__bad_interrupt>
     126:	00 00       	nop
     128:	7c c0       	rjmp	.+248    	; 0x222 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	7a c0       	rjmp	.+244    	; 0x222 <__bad_interrupt>
     12e:	00 00       	nop
     130:	78 c0       	rjmp	.+240    	; 0x222 <__bad_interrupt>
     132:	00 00       	nop
     134:	0c 94 87 09 	jmp	0x130e	; 0x130e <__vector_77>
     138:	74 c0       	rjmp	.+232    	; 0x222 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	0c 94 c6 09 	jmp	0x138c	; 0x138c <__vector_79>
     140:	0c 94 05 0a 	jmp	0x140a	; 0x140a <__vector_80>
     144:	0c 94 44 0a 	jmp	0x1488	; 0x1488 <__vector_81>
     148:	0c 94 83 0a 	jmp	0x1506	; 0x1506 <__vector_82>
     14c:	0c 94 31 09 	jmp	0x1262	; 0x1262 <__vector_83>
     150:	68 c0       	rjmp	.+208    	; 0x222 <__bad_interrupt>
     152:	00 00       	nop
     154:	66 c0       	rjmp	.+204    	; 0x222 <__bad_interrupt>
     156:	00 00       	nop
     158:	64 c0       	rjmp	.+200    	; 0x222 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	62 c0       	rjmp	.+196    	; 0x222 <__bad_interrupt>
     15e:	00 00       	nop
     160:	60 c0       	rjmp	.+192    	; 0x222 <__bad_interrupt>
     162:	00 00       	nop
     164:	5e c0       	rjmp	.+188    	; 0x222 <__bad_interrupt>
     166:	00 00       	nop
     168:	5c c0       	rjmp	.+184    	; 0x222 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	5a c0       	rjmp	.+180    	; 0x222 <__bad_interrupt>
     16e:	00 00       	nop
     170:	58 c0       	rjmp	.+176    	; 0x222 <__bad_interrupt>
     172:	00 00       	nop
     174:	56 c0       	rjmp	.+172    	; 0x222 <__bad_interrupt>
     176:	00 00       	nop
     178:	54 c0       	rjmp	.+168    	; 0x222 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	52 c0       	rjmp	.+164    	; 0x222 <__bad_interrupt>
     17e:	00 00       	nop
     180:	50 c0       	rjmp	.+160    	; 0x222 <__bad_interrupt>
     182:	00 00       	nop
     184:	4e c0       	rjmp	.+156    	; 0x222 <__bad_interrupt>
     186:	00 00       	nop
     188:	53 c2       	rjmp	.+1190   	; 0x630 <__vector_98>
     18a:	00 00       	nop
     18c:	4a c0       	rjmp	.+148    	; 0x222 <__bad_interrupt>
     18e:	00 00       	nop
     190:	48 c0       	rjmp	.+144    	; 0x222 <__bad_interrupt>
     192:	00 00       	nop
     194:	46 c0       	rjmp	.+140    	; 0x222 <__bad_interrupt>
     196:	00 00       	nop
     198:	44 c0       	rjmp	.+136    	; 0x222 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	42 c0       	rjmp	.+132    	; 0x222 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	40 c0       	rjmp	.+128    	; 0x222 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	3e c0       	rjmp	.+124    	; 0x222 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	3c c0       	rjmp	.+120    	; 0x222 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	3a c0       	rjmp	.+116    	; 0x222 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	38 c0       	rjmp	.+112    	; 0x222 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	36 c0       	rjmp	.+108    	; 0x222 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	34 c0       	rjmp	.+104    	; 0x222 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	32 c0       	rjmp	.+100    	; 0x222 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	30 c0       	rjmp	.+96     	; 0x222 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	2e c0       	rjmp	.+92     	; 0x222 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	10 c3       	rjmp	.+1568   	; 0x7ea <__vector_114>
     1ca:	00 00       	nop
     1cc:	2a c0       	rjmp	.+84     	; 0x222 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	28 c0       	rjmp	.+80     	; 0x222 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	26 c0       	rjmp	.+76     	; 0x222 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	24 c0       	rjmp	.+72     	; 0x222 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	22 c0       	rjmp	.+68     	; 0x222 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	20 c0       	rjmp	.+64     	; 0x222 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	1e c0       	rjmp	.+60     	; 0x222 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	1c c0       	rjmp	.+56     	; 0x222 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	1a c0       	rjmp	.+52     	; 0x222 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	18 c0       	rjmp	.+48     	; 0x222 <__bad_interrupt>
	...

000001f4 <__ctors_end>:
     1f4:	11 24       	eor	r1, r1
     1f6:	1f be       	out	0x3f, r1	; 63
     1f8:	cf ef       	ldi	r28, 0xFF	; 255
     1fa:	cd bf       	out	0x3d, r28	; 61
     1fc:	df e3       	ldi	r29, 0x3F	; 63
     1fe:	de bf       	out	0x3e, r29	; 62
     200:	00 e0       	ldi	r16, 0x00	; 0
     202:	0c bf       	out	0x3c, r16	; 60
     204:	18 be       	out	0x38, r1	; 56
     206:	19 be       	out	0x39, r1	; 57
     208:	1a be       	out	0x3a, r1	; 58
     20a:	1b be       	out	0x3b, r1	; 59

0000020c <__do_clear_bss>:
     20c:	20 e2       	ldi	r18, 0x20	; 32
     20e:	a0 e0       	ldi	r26, 0x00	; 0
     210:	b0 e2       	ldi	r27, 0x20	; 32
     212:	01 c0       	rjmp	.+2      	; 0x216 <.do_clear_bss_start>

00000214 <.do_clear_bss_loop>:
     214:	1d 92       	st	X+, r1

00000216 <.do_clear_bss_start>:
     216:	ae 33       	cpi	r26, 0x3E	; 62
     218:	b2 07       	cpc	r27, r18
     21a:	e1 f7       	brne	.-8      	; 0x214 <.do_clear_bss_loop>
     21c:	4f d7       	rcall	.+3742   	; 0x10bc <main>
     21e:	0c 94 e5 0c 	jmp	0x19ca	; 0x19ca <_exit>

00000222 <__bad_interrupt>:
     222:	ee ce       	rjmp	.-548    	; 0x0 <__vectors>

00000224 <setup_ADCB>:
extern struct semaphore_t semaphores;
extern uint16_t threat_distance[4];
extern struct infrResults_t infrResults;

void setup_ADCB()
{
     224:	cf 93       	push	r28
     226:	df 93       	push	r29
     228:	cd b7       	in	r28, 0x3d	; 61
     22a:	de b7       	in	r29, 0x3e	; 62
	//set ADCB for channels 0-3 and enable (0xC1)
	ADCB_CTRLA = 0x01;
     22c:	80 e4       	ldi	r24, 0x40	; 64
     22e:	92 e0       	ldi	r25, 0x02	; 2
     230:	21 e0       	ldi	r18, 0x01	; 1
     232:	fc 01       	movw	r30, r24
     234:	20 83       	st	Z, r18
	
	//set voltage reference to 2.5v (AREFA)
	ADCB_REFCTRL = 0x20;
     236:	82 e4       	ldi	r24, 0x42	; 66
     238:	92 e0       	ldi	r25, 0x02	; 2
     23a:	20 e2       	ldi	r18, 0x20	; 32
     23c:	fc 01       	movw	r30, r24
     23e:	20 83       	st	Z, r18
	
	//set resolution to 12 bits
	ADCB_CTRLB = ADC_RESOLUTION_12BIT_gc;
     240:	81 e4       	ldi	r24, 0x41	; 65
     242:	92 e0       	ldi	r25, 0x02	; 2
     244:	fc 01       	movw	r30, r24
     246:	10 82       	st	Z, r1
	
	//set interrupt for on complete and med level priority
	ADCB_CH0_INTCTRL = 0x02;
     248:	82 e6       	ldi	r24, 0x62	; 98
     24a:	92 e0       	ldi	r25, 0x02	; 2
     24c:	22 e0       	ldi	r18, 0x02	; 2
     24e:	fc 01       	movw	r30, r24
     250:	20 83       	st	Z, r18
	ADCB_CH1_INTCTRL = 0x02;
     252:	8a e6       	ldi	r24, 0x6A	; 106
     254:	92 e0       	ldi	r25, 0x02	; 2
     256:	22 e0       	ldi	r18, 0x02	; 2
     258:	fc 01       	movw	r30, r24
     25a:	20 83       	st	Z, r18
	ADCB_CH2_INTCTRL = 0x02;
     25c:	82 e7       	ldi	r24, 0x72	; 114
     25e:	92 e0       	ldi	r25, 0x02	; 2
     260:	22 e0       	ldi	r18, 0x02	; 2
     262:	fc 01       	movw	r30, r24
     264:	20 83       	st	Z, r18
	ADCB_CH3_INTCTRL = 0x02;
     266:	8a e7       	ldi	r24, 0x7A	; 122
     268:	92 e0       	ldi	r25, 0x02	; 2
     26a:	22 e0       	ldi	r18, 0x02	; 2
     26c:	fc 01       	movw	r30, r24
     26e:	20 83       	st	Z, r18
	
	//set pre-scaler to divide by 4 (this was 512 for previous exp but 4 provides sufficient time and accuracy)
	ADCB_PRESCALER = ADC_PRESCALER_DIV4_gc;
     270:	84 e4       	ldi	r24, 0x44	; 68
     272:	92 e0       	ldi	r25, 0x02	; 2
     274:	fc 01       	movw	r30, r24
     276:	10 82       	st	Z, r1
	
	//enable pins 0 to 3 for ADC conversion, set mux channels to those pins
	ADCB.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN0_gc;
     278:	80 e4       	ldi	r24, 0x40	; 64
     27a:	92 e0       	ldi	r25, 0x02	; 2
     27c:	fc 01       	movw	r30, r24
     27e:	11 a2       	std	Z+33, r1	; 0x21
	ADCB.CH1.MUXCTRL = ADC_CH_MUXPOS_PIN1_gc;
     280:	80 e4       	ldi	r24, 0x40	; 64
     282:	92 e0       	ldi	r25, 0x02	; 2
     284:	28 e0       	ldi	r18, 0x08	; 8
     286:	fc 01       	movw	r30, r24
     288:	21 a7       	std	Z+41, r18	; 0x29
	ADCB.CH2.MUXCTRL = ADC_CH_MUXPOS_PIN2_gc;
     28a:	80 e4       	ldi	r24, 0x40	; 64
     28c:	92 e0       	ldi	r25, 0x02	; 2
     28e:	20 e1       	ldi	r18, 0x10	; 16
     290:	fc 01       	movw	r30, r24
     292:	21 ab       	std	Z+49, r18	; 0x31
	ADCB.CH3.MUXCTRL = ADC_CH_MUXPOS_PIN3_gc;
     294:	80 e4       	ldi	r24, 0x40	; 64
     296:	92 e0       	ldi	r25, 0x02	; 2
     298:	28 e1       	ldi	r18, 0x18	; 24
     29a:	fc 01       	movw	r30, r24
     29c:	21 af       	std	Z+57, r18	; 0x39
	
	//set the input mode
	ADCB.CH0.CTRL = ADC_CH_INPUTMODE_SINGLEENDED_gc | ADC_CH_GAIN_1X_gc;
     29e:	80 e4       	ldi	r24, 0x40	; 64
     2a0:	92 e0       	ldi	r25, 0x02	; 2
     2a2:	21 e0       	ldi	r18, 0x01	; 1
     2a4:	fc 01       	movw	r30, r24
     2a6:	20 a3       	std	Z+32, r18	; 0x20
	ADCB.CH1.CTRL = ADC_CH_INPUTMODE_SINGLEENDED_gc | ADC_CH_GAIN_1X_gc;
     2a8:	80 e4       	ldi	r24, 0x40	; 64
     2aa:	92 e0       	ldi	r25, 0x02	; 2
     2ac:	21 e0       	ldi	r18, 0x01	; 1
     2ae:	fc 01       	movw	r30, r24
     2b0:	20 a7       	std	Z+40, r18	; 0x28
	ADCB.CH2.CTRL = ADC_CH_INPUTMODE_SINGLEENDED_gc | ADC_CH_GAIN_1X_gc;
     2b2:	80 e4       	ldi	r24, 0x40	; 64
     2b4:	92 e0       	ldi	r25, 0x02	; 2
     2b6:	21 e0       	ldi	r18, 0x01	; 1
     2b8:	fc 01       	movw	r30, r24
     2ba:	20 ab       	std	Z+48, r18	; 0x30
	ADCB.CH3.CTRL = ADC_CH_INPUTMODE_SINGLEENDED_gc | ADC_CH_GAIN_1X_gc;
     2bc:	80 e4       	ldi	r24, 0x40	; 64
     2be:	92 e0       	ldi	r25, 0x02	; 2
     2c0:	21 e0       	ldi	r18, 0x01	; 1
     2c2:	fc 01       	movw	r30, r24
     2c4:	20 af       	std	Z+56, r18	; 0x38

	//results are contained in: ADCA.CHx.RES
	
}
     2c6:	df 91       	pop	r29
     2c8:	cf 91       	pop	r28
     2ca:	08 95       	ret

000002cc <__vector_39>:

//////////	Interrupts for ADC conversion completion, see sensors.c for a timing diagram

ISR(ADCB_CH0_vect)
{
     2cc:	1f 92       	push	r1
     2ce:	0f 92       	push	r0
     2d0:	00 90 3f 00 	lds	r0, 0x003F
     2d4:	0f 92       	push	r0
     2d6:	11 24       	eor	r1, r1
     2d8:	00 90 38 00 	lds	r0, 0x0038
     2dc:	0f 92       	push	r0
     2de:	10 92 38 00 	sts	0x0038, r1
     2e2:	00 90 3a 00 	lds	r0, 0x003A
     2e6:	0f 92       	push	r0
     2e8:	10 92 3a 00 	sts	0x003A, r1
     2ec:	00 90 3b 00 	lds	r0, 0x003B
     2f0:	0f 92       	push	r0
     2f2:	10 92 3b 00 	sts	0x003B, r1
     2f6:	2f 93       	push	r18
     2f8:	3f 93       	push	r19
     2fa:	8f 93       	push	r24
     2fc:	9f 93       	push	r25
     2fe:	ef 93       	push	r30
     300:	ff 93       	push	r31
     302:	cf 93       	push	r28
     304:	df 93       	push	r29
     306:	cd b7       	in	r28, 0x3d	; 61
     308:	de b7       	in	r29, 0x3e	; 62
	if (infrResults.lCount < NUM_INF_SENS_MEAS)
     30a:	80 91 2b 20 	lds	r24, 0x202B
     30e:	84 30       	cpi	r24, 0x04	; 4
     310:	b0 f4       	brcc	.+44     	; 0x33e <__vector_39+0x72>
	{
		infrResults.left[infrResults.lCount] = ADCB_CH0_RES;
     312:	80 91 2b 20 	lds	r24, 0x202B
     316:	88 2f       	mov	r24, r24
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	24 e6       	ldi	r18, 0x64	; 100
     31c:	32 e0       	ldi	r19, 0x02	; 2
     31e:	f9 01       	movw	r30, r18
     320:	20 81       	ld	r18, Z
     322:	31 81       	ldd	r19, Z+1	; 0x01
     324:	88 0f       	add	r24, r24
     326:	99 1f       	adc	r25, r25
     328:	85 5f       	subi	r24, 0xF5	; 245
     32a:	9f 4d       	sbci	r25, 0xDF	; 223
     32c:	fc 01       	movw	r30, r24
     32e:	20 83       	st	Z, r18
     330:	31 83       	std	Z+1, r19	; 0x01
		infrResults.lCount++;
     332:	80 91 2b 20 	lds	r24, 0x202B
     336:	8f 5f       	subi	r24, 0xFF	; 255
     338:	80 93 2b 20 	sts	0x202B, r24
     33c:	05 c0       	rjmp	.+10     	; 0x348 <__vector_39+0x7c>
	}
	else
	{
		semaphores.left_meas_done = 1;
     33e:	80 91 2f 20 	lds	r24, 0x202F
     342:	82 60       	ori	r24, 0x02	; 2
     344:	80 93 2f 20 	sts	0x202F, r24
	}
	
	
}
     348:	df 91       	pop	r29
     34a:	cf 91       	pop	r28
     34c:	ff 91       	pop	r31
     34e:	ef 91       	pop	r30
     350:	9f 91       	pop	r25
     352:	8f 91       	pop	r24
     354:	3f 91       	pop	r19
     356:	2f 91       	pop	r18
     358:	0f 90       	pop	r0
     35a:	00 92 3b 00 	sts	0x003B, r0
     35e:	0f 90       	pop	r0
     360:	00 92 3a 00 	sts	0x003A, r0
     364:	0f 90       	pop	r0
     366:	00 92 38 00 	sts	0x0038, r0
     36a:	0f 90       	pop	r0
     36c:	00 92 3f 00 	sts	0x003F, r0
     370:	0f 90       	pop	r0
     372:	1f 90       	pop	r1
     374:	18 95       	reti

00000376 <__vector_40>:

ISR(ADCB_CH1_vect)
{
     376:	1f 92       	push	r1
     378:	0f 92       	push	r0
     37a:	00 90 3f 00 	lds	r0, 0x003F
     37e:	0f 92       	push	r0
     380:	11 24       	eor	r1, r1
     382:	00 90 38 00 	lds	r0, 0x0038
     386:	0f 92       	push	r0
     388:	10 92 38 00 	sts	0x0038, r1
     38c:	00 90 3a 00 	lds	r0, 0x003A
     390:	0f 92       	push	r0
     392:	10 92 3a 00 	sts	0x003A, r1
     396:	00 90 3b 00 	lds	r0, 0x003B
     39a:	0f 92       	push	r0
     39c:	10 92 3b 00 	sts	0x003B, r1
     3a0:	2f 93       	push	r18
     3a2:	3f 93       	push	r19
     3a4:	8f 93       	push	r24
     3a6:	9f 93       	push	r25
     3a8:	ef 93       	push	r30
     3aa:	ff 93       	push	r31
     3ac:	cf 93       	push	r28
     3ae:	df 93       	push	r29
     3b0:	cd b7       	in	r28, 0x3d	; 61
     3b2:	de b7       	in	r29, 0x3e	; 62
	if (infrResults.fCount < NUM_INF_SENS_MEAS)
     3b4:	80 91 2d 20 	lds	r24, 0x202D
     3b8:	84 30       	cpi	r24, 0x04	; 4
     3ba:	b8 f4       	brcc	.+46     	; 0x3ea <__vector_40+0x74>
	{
		infrResults.front[infrResults.fCount] = ADCB_CH1_RES;
     3bc:	80 91 2d 20 	lds	r24, 0x202D
     3c0:	88 2f       	mov	r24, r24
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	2c e6       	ldi	r18, 0x6C	; 108
     3c6:	32 e0       	ldi	r19, 0x02	; 2
     3c8:	f9 01       	movw	r30, r18
     3ca:	20 81       	ld	r18, Z
     3cc:	31 81       	ldd	r19, Z+1	; 0x01
     3ce:	08 96       	adiw	r24, 0x08	; 8
     3d0:	88 0f       	add	r24, r24
     3d2:	99 1f       	adc	r25, r25
     3d4:	85 5f       	subi	r24, 0xF5	; 245
     3d6:	9f 4d       	sbci	r25, 0xDF	; 223
     3d8:	fc 01       	movw	r30, r24
     3da:	20 83       	st	Z, r18
     3dc:	31 83       	std	Z+1, r19	; 0x01
		infrResults.fCount++;
     3de:	80 91 2d 20 	lds	r24, 0x202D
     3e2:	8f 5f       	subi	r24, 0xFF	; 255
     3e4:	80 93 2d 20 	sts	0x202D, r24
     3e8:	05 c0       	rjmp	.+10     	; 0x3f4 <__vector_40+0x7e>
	}
	else
	{
		semaphores.front_meas_done = 1;
     3ea:	80 91 2f 20 	lds	r24, 0x202F
     3ee:	88 60       	ori	r24, 0x08	; 8
     3f0:	80 93 2f 20 	sts	0x202F, r24
	}
	
}
     3f4:	df 91       	pop	r29
     3f6:	cf 91       	pop	r28
     3f8:	ff 91       	pop	r31
     3fa:	ef 91       	pop	r30
     3fc:	9f 91       	pop	r25
     3fe:	8f 91       	pop	r24
     400:	3f 91       	pop	r19
     402:	2f 91       	pop	r18
     404:	0f 90       	pop	r0
     406:	00 92 3b 00 	sts	0x003B, r0
     40a:	0f 90       	pop	r0
     40c:	00 92 3a 00 	sts	0x003A, r0
     410:	0f 90       	pop	r0
     412:	00 92 38 00 	sts	0x0038, r0
     416:	0f 90       	pop	r0
     418:	00 92 3f 00 	sts	0x003F, r0
     41c:	0f 90       	pop	r0
     41e:	1f 90       	pop	r1
     420:	18 95       	reti

00000422 <__vector_41>:

ISR(ADCB_CH2_vect)
{
     422:	1f 92       	push	r1
     424:	0f 92       	push	r0
     426:	00 90 3f 00 	lds	r0, 0x003F
     42a:	0f 92       	push	r0
     42c:	11 24       	eor	r1, r1
     42e:	00 90 38 00 	lds	r0, 0x0038
     432:	0f 92       	push	r0
     434:	10 92 38 00 	sts	0x0038, r1
     438:	00 90 3a 00 	lds	r0, 0x003A
     43c:	0f 92       	push	r0
     43e:	10 92 3a 00 	sts	0x003A, r1
     442:	00 90 3b 00 	lds	r0, 0x003B
     446:	0f 92       	push	r0
     448:	10 92 3b 00 	sts	0x003B, r1
     44c:	2f 93       	push	r18
     44e:	3f 93       	push	r19
     450:	8f 93       	push	r24
     452:	9f 93       	push	r25
     454:	ef 93       	push	r30
     456:	ff 93       	push	r31
     458:	cf 93       	push	r28
     45a:	df 93       	push	r29
     45c:	cd b7       	in	r28, 0x3d	; 61
     45e:	de b7       	in	r29, 0x3e	; 62
	//record results for back conversion
	if (infrResults.bCount < NUM_INF_SENS_MEAS)
     460:	80 91 2e 20 	lds	r24, 0x202E
     464:	84 30       	cpi	r24, 0x04	; 4
     466:	b8 f4       	brcc	.+46     	; 0x496 <__vector_41+0x74>
	{
		infrResults.back[infrResults.bCount] = ADCB_CH2_RES;
     468:	80 91 2e 20 	lds	r24, 0x202E
     46c:	88 2f       	mov	r24, r24
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	24 e7       	ldi	r18, 0x74	; 116
     472:	32 e0       	ldi	r19, 0x02	; 2
     474:	f9 01       	movw	r30, r18
     476:	20 81       	ld	r18, Z
     478:	31 81       	ldd	r19, Z+1	; 0x01
     47a:	0c 96       	adiw	r24, 0x0c	; 12
     47c:	88 0f       	add	r24, r24
     47e:	99 1f       	adc	r25, r25
     480:	85 5f       	subi	r24, 0xF5	; 245
     482:	9f 4d       	sbci	r25, 0xDF	; 223
     484:	fc 01       	movw	r30, r24
     486:	20 83       	st	Z, r18
     488:	31 83       	std	Z+1, r19	; 0x01
		infrResults.bCount++;
     48a:	80 91 2e 20 	lds	r24, 0x202E
     48e:	8f 5f       	subi	r24, 0xFF	; 255
     490:	80 93 2e 20 	sts	0x202E, r24
     494:	05 c0       	rjmp	.+10     	; 0x4a0 <__vector_41+0x7e>
	}
	else
	{
		semaphores.back_meas_done = 1;
     496:	80 91 2f 20 	lds	r24, 0x202F
     49a:	80 61       	ori	r24, 0x10	; 16
     49c:	80 93 2f 20 	sts	0x202F, r24
	}
		
}
     4a0:	df 91       	pop	r29
     4a2:	cf 91       	pop	r28
     4a4:	ff 91       	pop	r31
     4a6:	ef 91       	pop	r30
     4a8:	9f 91       	pop	r25
     4aa:	8f 91       	pop	r24
     4ac:	3f 91       	pop	r19
     4ae:	2f 91       	pop	r18
     4b0:	0f 90       	pop	r0
     4b2:	00 92 3b 00 	sts	0x003B, r0
     4b6:	0f 90       	pop	r0
     4b8:	00 92 3a 00 	sts	0x003A, r0
     4bc:	0f 90       	pop	r0
     4be:	00 92 38 00 	sts	0x0038, r0
     4c2:	0f 90       	pop	r0
     4c4:	00 92 3f 00 	sts	0x003F, r0
     4c8:	0f 90       	pop	r0
     4ca:	1f 90       	pop	r1
     4cc:	18 95       	reti

000004ce <__vector_42>:

ISR(ADCB_CH3_vect)
{
     4ce:	1f 92       	push	r1
     4d0:	0f 92       	push	r0
     4d2:	00 90 3f 00 	lds	r0, 0x003F
     4d6:	0f 92       	push	r0
     4d8:	11 24       	eor	r1, r1
     4da:	00 90 38 00 	lds	r0, 0x0038
     4de:	0f 92       	push	r0
     4e0:	10 92 38 00 	sts	0x0038, r1
     4e4:	00 90 3a 00 	lds	r0, 0x003A
     4e8:	0f 92       	push	r0
     4ea:	10 92 3a 00 	sts	0x003A, r1
     4ee:	00 90 3b 00 	lds	r0, 0x003B
     4f2:	0f 92       	push	r0
     4f4:	10 92 3b 00 	sts	0x003B, r1
     4f8:	2f 93       	push	r18
     4fa:	3f 93       	push	r19
     4fc:	8f 93       	push	r24
     4fe:	9f 93       	push	r25
     500:	ef 93       	push	r30
     502:	ff 93       	push	r31
     504:	cf 93       	push	r28
     506:	df 93       	push	r29
     508:	cd b7       	in	r28, 0x3d	; 61
     50a:	de b7       	in	r29, 0x3e	; 62
	if (infrResults.rCount < NUM_INF_SENS_MEAS)
     50c:	80 91 2c 20 	lds	r24, 0x202C
     510:	84 30       	cpi	r24, 0x04	; 4
     512:	b8 f4       	brcc	.+46     	; 0x542 <__vector_42+0x74>
	{
		infrResults.right[infrResults.rCount] = ADCB_CH3_RES;
     514:	80 91 2c 20 	lds	r24, 0x202C
     518:	88 2f       	mov	r24, r24
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	2c e7       	ldi	r18, 0x7C	; 124
     51e:	32 e0       	ldi	r19, 0x02	; 2
     520:	f9 01       	movw	r30, r18
     522:	20 81       	ld	r18, Z
     524:	31 81       	ldd	r19, Z+1	; 0x01
     526:	04 96       	adiw	r24, 0x04	; 4
     528:	88 0f       	add	r24, r24
     52a:	99 1f       	adc	r25, r25
     52c:	85 5f       	subi	r24, 0xF5	; 245
     52e:	9f 4d       	sbci	r25, 0xDF	; 223
     530:	fc 01       	movw	r30, r24
     532:	20 83       	st	Z, r18
     534:	31 83       	std	Z+1, r19	; 0x01
		infrResults.rCount++;
     536:	80 91 2c 20 	lds	r24, 0x202C
     53a:	8f 5f       	subi	r24, 0xFF	; 255
     53c:	80 93 2c 20 	sts	0x202C, r24
     540:	05 c0       	rjmp	.+10     	; 0x54c <__vector_42+0x7e>
	}
	else
	{
		semaphores.right_meas_done = 1;
     542:	80 91 2f 20 	lds	r24, 0x202F
     546:	84 60       	ori	r24, 0x04	; 4
     548:	80 93 2f 20 	sts	0x202F, r24
	}
	
     54c:	df 91       	pop	r29
     54e:	cf 91       	pop	r28
     550:	ff 91       	pop	r31
     552:	ef 91       	pop	r30
     554:	9f 91       	pop	r25
     556:	8f 91       	pop	r24
     558:	3f 91       	pop	r19
     55a:	2f 91       	pop	r18
     55c:	0f 90       	pop	r0
     55e:	00 92 3b 00 	sts	0x003B, r0
     562:	0f 90       	pop	r0
     564:	00 92 3a 00 	sts	0x003A, r0
     568:	0f 90       	pop	r0
     56a:	00 92 38 00 	sts	0x0038, r0
     56e:	0f 90       	pop	r0
     570:	00 92 3f 00 	sts	0x003F, r0
     574:	0f 90       	pop	r0
     576:	1f 90       	pop	r1
     578:	18 95       	reti

0000057a <setup_gpio>:
extern struct semaphore_t semaphores;
extern struct motorControl_t motorControl;
extern uint8_t state;

void setup_gpio()
{
     57a:	cf 93       	push	r28
     57c:	df 93       	push	r29
     57e:	cd b7       	in	r28, 0x3d	; 61
     580:	de b7       	in	r29, 0x3e	; 62
	//setup port B for input so infrared sensors can send their reaadings for ADC conversion
	PORTB_DIR = 0x00;
     582:	80 e2       	ldi	r24, 0x20	; 32
     584:	96 e0       	ldi	r25, 0x06	; 6
     586:	fc 01       	movw	r30, r24
     588:	10 82       	st	Z, r1
	
	//setup LEDs for debugging
	LED_PORT.DIR = 0xff;
     58a:	80 ee       	ldi	r24, 0xE0	; 224
     58c:	96 e0       	ldi	r25, 0x06	; 6
     58e:	2f ef       	ldi	r18, 0xFF	; 255
     590:	fc 01       	movw	r30, r24
     592:	20 83       	st	Z, r18
	LED_PORT.OUT = 0x00;
     594:	80 ee       	ldi	r24, 0xE0	; 224
     596:	96 e0       	ldi	r25, 0x06	; 6
     598:	fc 01       	movw	r30, r24
     59a:	14 82       	std	Z+4, r1	; 0x04
	
	//port D is going to be used to control 
	//the motors' direction (hook up to phase pins on H-Bridge)
	PORTD_DIR = 0x0f;
     59c:	80 e6       	ldi	r24, 0x60	; 96
     59e:	96 e0       	ldi	r25, 0x06	; 6
     5a0:	2f e0       	ldi	r18, 0x0F	; 15
     5a2:	fc 01       	movw	r30, r24
     5a4:	20 83       	st	Z, r18
	
	//turn on port E is used for PWM motor speed control, hook up to enable pins on H-bridge
	PORTE_DIR = 0xff;
     5a6:	80 e8       	ldi	r24, 0x80	; 128
     5a8:	96 e0       	ldi	r25, 0x06	; 6
     5aa:	2f ef       	ldi	r18, 0xFF	; 255
     5ac:	fc 01       	movw	r30, r24
     5ae:	20 83       	st	Z, r18
	
}
     5b0:	df 91       	pop	r29
     5b2:	cf 91       	pop	r28
     5b4:	08 95       	ret

000005b6 <setup_btn_interrupt>:

void setup_btn_interrupt()
{
     5b6:	cf 93       	push	r28
     5b8:	df 93       	push	r29
     5ba:	cd b7       	in	r28, 0x3d	; 61
     5bc:	de b7       	in	r29, 0x3e	; 62
	//set port j for input from the buttons
	PORTJ_DIRSET = 0x00;
     5be:	81 e0       	ldi	r24, 0x01	; 1
     5c0:	97 e0       	ldi	r25, 0x07	; 7
     5c2:	fc 01       	movw	r30, r24
     5c4:	10 82       	st	Z, r1
	
	//set interrupt for buttons 1 to 8
	PORTJ_INT0MASK = BUTTON_1 | BUTTON_2 | BUTTON_3 | BUTTON_4 | BUTTON_5 | BUTTON_6 | BUTTON_7 | BUTTON_8;
     5c6:	8a e0       	ldi	r24, 0x0A	; 10
     5c8:	97 e0       	ldi	r25, 0x07	; 7
     5ca:	2f ef       	ldi	r18, 0xFF	; 255
     5cc:	fc 01       	movw	r30, r24
     5ce:	20 83       	st	Z, r18
	
	//set buttons as a medium level interrupt
	PORTJ_INTCTRL = PMIC_MEDLVLEX_bm;
     5d0:	89 e0       	ldi	r24, 0x09	; 9
     5d2:	97 e0       	ldi	r25, 0x07	; 7
     5d4:	22 e0       	ldi	r18, 0x02	; 2
     5d6:	fc 01       	movw	r30, r24
     5d8:	20 83       	st	Z, r18
	
	//setup interrupt to fire on rising edge of button push
	PORTJ_PIN0CTRL = 0x01;
     5da:	80 e1       	ldi	r24, 0x10	; 16
     5dc:	97 e0       	ldi	r25, 0x07	; 7
     5de:	21 e0       	ldi	r18, 0x01	; 1
     5e0:	fc 01       	movw	r30, r24
     5e2:	20 83       	st	Z, r18
	PORTJ_PIN1CTRL = 0x01;
     5e4:	81 e1       	ldi	r24, 0x11	; 17
     5e6:	97 e0       	ldi	r25, 0x07	; 7
     5e8:	21 e0       	ldi	r18, 0x01	; 1
     5ea:	fc 01       	movw	r30, r24
     5ec:	20 83       	st	Z, r18
	PORTJ_PIN2CTRL = 0x01;
     5ee:	82 e1       	ldi	r24, 0x12	; 18
     5f0:	97 e0       	ldi	r25, 0x07	; 7
     5f2:	21 e0       	ldi	r18, 0x01	; 1
     5f4:	fc 01       	movw	r30, r24
     5f6:	20 83       	st	Z, r18
	PORTJ_PIN3CTRL = 0x01;
     5f8:	83 e1       	ldi	r24, 0x13	; 19
     5fa:	97 e0       	ldi	r25, 0x07	; 7
     5fc:	21 e0       	ldi	r18, 0x01	; 1
     5fe:	fc 01       	movw	r30, r24
     600:	20 83       	st	Z, r18
	PORTJ_PIN4CTRL = 0x01;
     602:	84 e1       	ldi	r24, 0x14	; 20
     604:	97 e0       	ldi	r25, 0x07	; 7
     606:	21 e0       	ldi	r18, 0x01	; 1
     608:	fc 01       	movw	r30, r24
     60a:	20 83       	st	Z, r18
	PORTJ_PIN5CTRL = 0x01;
     60c:	85 e1       	ldi	r24, 0x15	; 21
     60e:	97 e0       	ldi	r25, 0x07	; 7
     610:	21 e0       	ldi	r18, 0x01	; 1
     612:	fc 01       	movw	r30, r24
     614:	20 83       	st	Z, r18
	PORTJ_PIN6CTRL = 0x01;
     616:	86 e1       	ldi	r24, 0x16	; 22
     618:	97 e0       	ldi	r25, 0x07	; 7
     61a:	21 e0       	ldi	r18, 0x01	; 1
     61c:	fc 01       	movw	r30, r24
     61e:	20 83       	st	Z, r18
	PORTJ_PIN7CTRL = 0x01;
     620:	87 e1       	ldi	r24, 0x17	; 23
     622:	97 e0       	ldi	r25, 0x07	; 7
     624:	21 e0       	ldi	r18, 0x01	; 1
     626:	fc 01       	movw	r30, r24
     628:	20 83       	st	Z, r18
	
}
     62a:	df 91       	pop	r29
     62c:	cf 91       	pop	r28
     62e:	08 95       	ret

00000630 <__vector_98>:

//interrupt for handling button presses
ISR(PORTJ_INT0_vect)
{
     630:	1f 92       	push	r1
     632:	0f 92       	push	r0
     634:	00 90 3f 00 	lds	r0, 0x003F
     638:	0f 92       	push	r0
     63a:	11 24       	eor	r1, r1
     63c:	00 90 38 00 	lds	r0, 0x0038
     640:	0f 92       	push	r0
     642:	10 92 38 00 	sts	0x0038, r1
     646:	00 90 3a 00 	lds	r0, 0x003A
     64a:	0f 92       	push	r0
     64c:	10 92 3a 00 	sts	0x003A, r1
     650:	00 90 3b 00 	lds	r0, 0x003B
     654:	0f 92       	push	r0
     656:	10 92 3b 00 	sts	0x003B, r1
     65a:	2f 93       	push	r18
     65c:	3f 93       	push	r19
     65e:	8f 93       	push	r24
     660:	9f 93       	push	r25
     662:	ef 93       	push	r30
     664:	ff 93       	push	r31
     666:	cf 93       	push	r28
     668:	df 93       	push	r29
     66a:	cd b7       	in	r28, 0x3d	; 61
     66c:	de b7       	in	r29, 0x3e	; 62
	LED_PORT.OUT ^= 0x80;	//toggle msb for debugging
     66e:	80 ee       	ldi	r24, 0xE0	; 224
     670:	96 e0       	ldi	r25, 0x06	; 6
     672:	20 ee       	ldi	r18, 0xE0	; 224
     674:	36 e0       	ldi	r19, 0x06	; 6
     676:	f9 01       	movw	r30, r18
     678:	34 81       	ldd	r19, Z+4	; 0x04
     67a:	20 e8       	ldi	r18, 0x80	; 128
     67c:	23 27       	eor	r18, r19
     67e:	fc 01       	movw	r30, r24
     680:	24 83       	std	Z+4, r18	; 0x04
	
	//use portj's input (i.e. which button is pressed) to figure out what to do
	switch(PORTJ_IN)
     682:	88 e0       	ldi	r24, 0x08	; 8
     684:	97 e0       	ldi	r25, 0x07	; 7
     686:	fc 01       	movw	r30, r24
     688:	80 81       	ld	r24, Z
     68a:	88 2f       	mov	r24, r24
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	88 30       	cpi	r24, 0x08	; 8
     690:	91 05       	cpc	r25, r1
     692:	09 f4       	brne	.+2      	; 0x696 <__vector_98+0x66>
     694:	42 c0       	rjmp	.+132    	; 0x71a <__vector_98+0xea>
     696:	89 30       	cpi	r24, 0x09	; 9
     698:	91 05       	cpc	r25, r1
     69a:	54 f4       	brge	.+20     	; 0x6b0 <__vector_98+0x80>
     69c:	82 30       	cpi	r24, 0x02	; 2
     69e:	91 05       	cpc	r25, r1
     6a0:	29 f1       	breq	.+74     	; 0x6ec <__vector_98+0xbc>
     6a2:	84 30       	cpi	r24, 0x04	; 4
     6a4:	91 05       	cpc	r25, r1
     6a6:	71 f1       	breq	.+92     	; 0x704 <__vector_98+0xd4>
     6a8:	81 30       	cpi	r24, 0x01	; 1
     6aa:	91 05       	cpc	r25, r1
     6ac:	a9 f0       	breq	.+42     	; 0x6d8 <__vector_98+0xa8>
		
			break;
		
		default:
		//no valid button pressed do nothing
		break;
     6ae:	70 c0       	rjmp	.+224    	; 0x790 <__vector_98+0x160>
ISR(PORTJ_INT0_vect)
{
	LED_PORT.OUT ^= 0x80;	//toggle msb for debugging
	
	//use portj's input (i.e. which button is pressed) to figure out what to do
	switch(PORTJ_IN)
     6b0:	80 32       	cpi	r24, 0x20	; 32
     6b2:	91 05       	cpc	r25, r1
     6b4:	09 f4       	brne	.+2      	; 0x6b8 <__vector_98+0x88>
     6b6:	51 c0       	rjmp	.+162    	; 0x75a <__vector_98+0x12a>
     6b8:	81 32       	cpi	r24, 0x21	; 33
     6ba:	91 05       	cpc	r25, r1
     6bc:	24 f4       	brge	.+8      	; 0x6c6 <__vector_98+0x96>
     6be:	80 31       	cpi	r24, 0x10	; 16
     6c0:	91 05       	cpc	r25, r1
     6c2:	b9 f1       	breq	.+110    	; 0x732 <__vector_98+0x102>
		
			break;
		
		default:
		//no valid button pressed do nothing
		break;
     6c4:	65 c0       	rjmp	.+202    	; 0x790 <__vector_98+0x160>
ISR(PORTJ_INT0_vect)
{
	LED_PORT.OUT ^= 0x80;	//toggle msb for debugging
	
	//use portj's input (i.e. which button is pressed) to figure out what to do
	switch(PORTJ_IN)
     6c6:	80 34       	cpi	r24, 0x40	; 64
     6c8:	91 05       	cpc	r25, r1
     6ca:	09 f4       	brne	.+2      	; 0x6ce <__vector_98+0x9e>
     6cc:	5a c0       	rjmp	.+180    	; 0x782 <__vector_98+0x152>
     6ce:	80 38       	cpi	r24, 0x80	; 128
     6d0:	91 05       	cpc	r25, r1
     6d2:	09 f4       	brne	.+2      	; 0x6d6 <__vector_98+0xa6>
     6d4:	59 c0       	rjmp	.+178    	; 0x788 <__vector_98+0x158>
		
			break;
		
		default:
		//no valid button pressed do nothing
		break;
     6d6:	5c c0       	rjmp	.+184    	; 0x790 <__vector_98+0x160>
	//use portj's input (i.e. which button is pressed) to figure out what to do
	switch(PORTJ_IN)
	{
		case (BUTTON_1):
			//set speed to 0
			motorControl.target_speed_ticks = 0;
     6d8:	10 92 33 20 	sts	0x2033, r1
     6dc:	10 92 34 20 	sts	0x2034, r1
			semaphores.change_speed = 1;
     6e0:	80 91 2f 20 	lds	r24, 0x202F
     6e4:	80 62       	ori	r24, 0x20	; 32
     6e6:	80 93 2f 20 	sts	0x202F, r24
		
			break;
     6ea:	52 c0       	rjmp	.+164    	; 0x790 <__vector_98+0x160>
		
		case (BUTTON_2):
			//change speed to fast
			motorControl.target_speed_ticks = MOTOR_FAST_TICKS;
     6ec:	88 e2       	ldi	r24, 0x28	; 40
     6ee:	93 e2       	ldi	r25, 0x23	; 35
     6f0:	80 93 33 20 	sts	0x2033, r24
     6f4:	90 93 34 20 	sts	0x2034, r25
			semaphores.change_speed = 1;
     6f8:	80 91 2f 20 	lds	r24, 0x202F
     6fc:	80 62       	ori	r24, 0x20	; 32
     6fe:	80 93 2f 20 	sts	0x202F, r24
		
			break;
     702:	46 c0       	rjmp	.+140    	; 0x790 <__vector_98+0x160>
		
		case (BUTTON_3):
			//change motor to left
			motorControl.direction = LEFT;
     704:	80 91 35 20 	lds	r24, 0x2035
     708:	8f 78       	andi	r24, 0x8F	; 143
     70a:	80 93 35 20 	sts	0x2035, r24
			semaphores.change_direction = 1;
     70e:	80 91 2f 20 	lds	r24, 0x202F
     712:	80 64       	ori	r24, 0x40	; 64
     714:	80 93 2f 20 	sts	0x202F, r24
		
			break;
     718:	3b c0       	rjmp	.+118    	; 0x790 <__vector_98+0x160>
		
		case (BUTTON_4):
			//change motor to forward
			motorControl.direction = FORWARD;
     71a:	80 91 35 20 	lds	r24, 0x2035
     71e:	8f 78       	andi	r24, 0x8F	; 143
     720:	80 61       	ori	r24, 0x10	; 16
     722:	80 93 35 20 	sts	0x2035, r24
			semaphores.change_direction = 1;
     726:	80 91 2f 20 	lds	r24, 0x202F
     72a:	80 64       	ori	r24, 0x40	; 64
     72c:	80 93 2f 20 	sts	0x202F, r24
		
			break;
     730:	2f c0       	rjmp	.+94     	; 0x790 <__vector_98+0x160>
		
		case(BUTTON_5):
			if (state == TESTING)
     732:	80 91 0a 20 	lds	r24, 0x200A
     736:	83 30       	cpi	r24, 0x03	; 3
     738:	61 f4       	brne	.+24     	; 0x752 <__vector_98+0x122>
			{
				//change motor to backwards
				motorControl.direction = BACKWARD;
     73a:	80 91 35 20 	lds	r24, 0x2035
     73e:	8f 78       	andi	r24, 0x8F	; 143
     740:	80 62       	ori	r24, 0x20	; 32
     742:	80 93 35 20 	sts	0x2035, r24
				semaphores.change_direction = 1;
     746:	80 91 2f 20 	lds	r24, 0x202F
     74a:	80 64       	ori	r24, 0x40	; 64
     74c:	80 93 2f 20 	sts	0x202F, r24
			else
			{
				state = SPINNING;
			}
		
			break;
     750:	1f c0       	rjmp	.+62     	; 0x790 <__vector_98+0x160>
				motorControl.direction = BACKWARD;
				semaphores.change_direction = 1;
			}
			else
			{
				state = SPINNING;
     752:	82 e0       	ldi	r24, 0x02	; 2
     754:	80 93 0a 20 	sts	0x200A, r24
			}
		
			break;
     758:	1b c0       	rjmp	.+54     	; 0x790 <__vector_98+0x160>
		
		case(BUTTON_6):
			if (state == TESTING)
     75a:	80 91 0a 20 	lds	r24, 0x200A
     75e:	83 30       	cpi	r24, 0x03	; 3
     760:	61 f4       	brne	.+24     	; 0x77a <__vector_98+0x14a>
			{
				//change motor to right
				motorControl.direction = RIGHT;
     762:	80 91 35 20 	lds	r24, 0x2035
     766:	8f 78       	andi	r24, 0x8F	; 143
     768:	80 63       	ori	r24, 0x30	; 48
     76a:	80 93 35 20 	sts	0x2035, r24
				semaphores.change_direction = 1;
     76e:	80 91 2f 20 	lds	r24, 0x202F
     772:	80 64       	ori	r24, 0x40	; 64
     774:	80 93 2f 20 	sts	0x202F, r24
			else
			{
				state = TRAPPED;
			}
		
			break;
     778:	0b c0       	rjmp	.+22     	; 0x790 <__vector_98+0x160>
				motorControl.direction = RIGHT;
				semaphores.change_direction = 1;
			}
			else
			{
				state = TRAPPED;
     77a:	81 e0       	ldi	r24, 0x01	; 1
     77c:	80 93 0a 20 	sts	0x200A, r24
			}
		
			break;
     780:	07 c0       	rjmp	.+14     	; 0x790 <__vector_98+0x160>
		
		case(BUTTON_7):
			state = ESCAPING;
     782:	10 92 0a 20 	sts	0x200A, r1
		
			break;
     786:	04 c0       	rjmp	.+8      	; 0x790 <__vector_98+0x160>
		
		case(BUTTON_8):
			//set state to testing
			state = TESTING;
     788:	83 e0       	ldi	r24, 0x03	; 3
     78a:	80 93 0a 20 	sts	0x200A, r24
		
			break;
     78e:	00 00       	nop
		//no valid button pressed do nothing
		break;
		
	}
	
}
     790:	df 91       	pop	r29
     792:	cf 91       	pop	r28
     794:	ff 91       	pop	r31
     796:	ef 91       	pop	r30
     798:	9f 91       	pop	r25
     79a:	8f 91       	pop	r24
     79c:	3f 91       	pop	r19
     79e:	2f 91       	pop	r18
     7a0:	0f 90       	pop	r0
     7a2:	00 92 3b 00 	sts	0x003B, r0
     7a6:	0f 90       	pop	r0
     7a8:	00 92 3a 00 	sts	0x003A, r0
     7ac:	0f 90       	pop	r0
     7ae:	00 92 38 00 	sts	0x0038, r0
     7b2:	0f 90       	pop	r0
     7b4:	00 92 3f 00 	sts	0x003F, r0
     7b8:	0f 90       	pop	r0
     7ba:	1f 90       	pop	r1
     7bc:	18 95       	reti

000007be <setup_F1_LEDTimer>:

void setup_F1_LEDTimer()
{
     7be:	cf 93       	push	r28
     7c0:	df 93       	push	r29
     7c2:	cd b7       	in	r28, 0x3d	; 61
     7c4:	de b7       	in	r29, 0x3e	; 62
	//setup period for timer to 50000 ticks (assuming 32MHz clock and 64 prescale, this is 100ms)
	TCF1_PER = 0;
     7c6:	86 e6       	ldi	r24, 0x66	; 102
     7c8:	9b e0       	ldi	r25, 0x0B	; 11
     7ca:	fc 01       	movw	r30, r24
     7cc:	10 82       	st	Z, r1
     7ce:	11 82       	std	Z+1, r1	; 0x01

	//set prescaler for counter to 64 counts per 1 tick
	TCF1_CTRLA = 0x05;
     7d0:	80 e4       	ldi	r24, 0x40	; 64
     7d2:	9b e0       	ldi	r25, 0x0B	; 11
     7d4:	25 e0       	ldi	r18, 0x05	; 5
     7d6:	fc 01       	movw	r30, r24
     7d8:	20 83       	st	Z, r18

	//set interrupt priority to low
	TCF1_INTCTRLA = 0x01;
     7da:	86 e4       	ldi	r24, 0x46	; 70
     7dc:	9b e0       	ldi	r25, 0x0B	; 11
     7de:	21 e0       	ldi	r18, 0x01	; 1
     7e0:	fc 01       	movw	r30, r24
     7e2:	20 83       	st	Z, r18
	
}
     7e4:	df 91       	pop	r29
     7e6:	cf 91       	pop	r28
     7e8:	08 95       	ret

000007ea <__vector_114>:

ISR(TCF1_OVF_vect)
{
     7ea:	1f 92       	push	r1
     7ec:	0f 92       	push	r0
     7ee:	00 90 3f 00 	lds	r0, 0x003F
     7f2:	0f 92       	push	r0
     7f4:	11 24       	eor	r1, r1
     7f6:	00 90 38 00 	lds	r0, 0x0038
     7fa:	0f 92       	push	r0
     7fc:	10 92 38 00 	sts	0x0038, r1
     800:	00 90 3a 00 	lds	r0, 0x003A
     804:	0f 92       	push	r0
     806:	10 92 3a 00 	sts	0x003A, r1
     80a:	8f 93       	push	r24
     80c:	cf 93       	push	r28
     80e:	df 93       	push	r29
     810:	cd b7       	in	r28, 0x3d	; 61
     812:	de b7       	in	r29, 0x3e	; 62
	semaphores.led_toggle = 1;
     814:	80 91 30 20 	lds	r24, 0x2030
     818:	81 60       	ori	r24, 0x01	; 1
     81a:	80 93 30 20 	sts	0x2030, r24
}
     81e:	df 91       	pop	r29
     820:	cf 91       	pop	r28
     822:	8f 91       	pop	r24
     824:	0f 90       	pop	r0
     826:	00 92 3a 00 	sts	0x003A, r0
     82a:	0f 90       	pop	r0
     82c:	00 92 38 00 	sts	0x0038, r0
     830:	0f 90       	pop	r0
     832:	00 92 3f 00 	sts	0x003F, r0
     836:	0f 90       	pop	r0
     838:	1f 90       	pop	r1
     83a:	18 95       	reti

0000083c <next_spin_led>:

void next_spin_led()
{
     83c:	cf 93       	push	r28
     83e:	df 93       	push	r29
     840:	cd b7       	in	r28, 0x3d	; 61
     842:	de b7       	in	r29, 0x3e	; 62
	if (LED_PORT.OUT == 0x00) LED_PORT.OUT = 0x01;
     844:	80 ee       	ldi	r24, 0xE0	; 224
     846:	96 e0       	ldi	r25, 0x06	; 6
     848:	fc 01       	movw	r30, r24
     84a:	84 81       	ldd	r24, Z+4	; 0x04
     84c:	88 23       	and	r24, r24
     84e:	31 f4       	brne	.+12     	; 0x85c <next_spin_led+0x20>
     850:	80 ee       	ldi	r24, 0xE0	; 224
     852:	96 e0       	ldi	r25, 0x06	; 6
     854:	21 e0       	ldi	r18, 0x01	; 1
     856:	fc 01       	movw	r30, r24
     858:	24 83       	std	Z+4, r18	; 0x04
     85a:	09 c0       	rjmp	.+18     	; 0x86e <next_spin_led+0x32>
	else LED_PORT.OUT *= 2;	
     85c:	80 ee       	ldi	r24, 0xE0	; 224
     85e:	96 e0       	ldi	r25, 0x06	; 6
     860:	20 ee       	ldi	r18, 0xE0	; 224
     862:	36 e0       	ldi	r19, 0x06	; 6
     864:	f9 01       	movw	r30, r18
     866:	24 81       	ldd	r18, Z+4	; 0x04
     868:	22 0f       	add	r18, r18
     86a:	fc 01       	movw	r30, r24
     86c:	24 83       	std	Z+4, r18	; 0x04
}
     86e:	df 91       	pop	r29
     870:	cf 91       	pop	r28
     872:	08 95       	ret

00000874 <set_LEDTimer>:

void set_LEDTimer(uint16_t ticks)
{
     874:	cf 93       	push	r28
     876:	df 93       	push	r29
     878:	1f 92       	push	r1
     87a:	1f 92       	push	r1
     87c:	cd b7       	in	r28, 0x3d	; 61
     87e:	de b7       	in	r29, 0x3e	; 62
     880:	89 83       	std	Y+1, r24	; 0x01
     882:	9a 83       	std	Y+2, r25	; 0x02
	TCF1_PER = ticks;
     884:	86 e6       	ldi	r24, 0x66	; 102
     886:	9b e0       	ldi	r25, 0x0B	; 11
     888:	29 81       	ldd	r18, Y+1	; 0x01
     88a:	3a 81       	ldd	r19, Y+2	; 0x02
     88c:	fc 01       	movw	r30, r24
     88e:	20 83       	st	Z, r18
     890:	31 83       	std	Z+1, r19	; 0x01
}
     892:	0f 90       	pop	r0
     894:	0f 90       	pop	r0
     896:	df 91       	pop	r29
     898:	cf 91       	pop	r28
     89a:	08 95       	ret

0000089c <initialize_motorControl>:
	TCE0_CCA = desired_speed;
	TCE0_CCB = desired_speed;
	TCE0_CCC = desired_speed;
	TCE0_CCD = desired_speed;
	
}
     89c:	cf 93       	push	r28
     89e:	df 93       	push	r29
     8a0:	cd b7       	in	r28, 0x3d	; 61
     8a2:	de b7       	in	r29, 0x3e	; 62
     8a4:	10 92 31 20 	sts	0x2031, r1
     8a8:	10 92 32 20 	sts	0x2032, r1
     8ac:	10 92 33 20 	sts	0x2033, r1
     8b0:	10 92 34 20 	sts	0x2034, r1
     8b4:	80 91 35 20 	lds	r24, 0x2035
     8b8:	8e 7f       	andi	r24, 0xFE	; 254
     8ba:	80 93 35 20 	sts	0x2035, r24
     8be:	80 91 35 20 	lds	r24, 0x2035
     8c2:	8d 7f       	andi	r24, 0xFD	; 253
     8c4:	80 93 35 20 	sts	0x2035, r24
     8c8:	80 91 35 20 	lds	r24, 0x2035
     8cc:	8b 7f       	andi	r24, 0xFB	; 251
     8ce:	80 93 35 20 	sts	0x2035, r24
     8d2:	80 91 35 20 	lds	r24, 0x2035
     8d6:	87 7f       	andi	r24, 0xF7	; 247
     8d8:	80 93 35 20 	sts	0x2035, r24
     8dc:	80 91 35 20 	lds	r24, 0x2035
     8e0:	8f 78       	andi	r24, 0x8F	; 143
     8e2:	80 61       	ori	r24, 0x10	; 16
     8e4:	80 93 35 20 	sts	0x2035, r24
     8e8:	84 e6       	ldi	r24, 0x64	; 100
     8ea:	96 e0       	ldi	r25, 0x06	; 6
     8ec:	2f e0       	ldi	r18, 0x0F	; 15
     8ee:	fc 01       	movw	r30, r24
     8f0:	20 83       	st	Z, r18
     8f2:	df 91       	pop	r29
     8f4:	cf 91       	pop	r28
     8f6:	08 95       	ret

000008f8 <setup_E0_motorControl>:
     8f8:	cf 93       	push	r28
     8fa:	df 93       	push	r29
     8fc:	cd b7       	in	r28, 0x3d	; 61
     8fe:	de b7       	in	r29, 0x3e	; 62
     900:	86 e2       	ldi	r24, 0x26	; 38
     902:	9a e0       	ldi	r25, 0x0A	; 10
     904:	20 e1       	ldi	r18, 0x10	; 16
     906:	37 e2       	ldi	r19, 0x27	; 39
     908:	fc 01       	movw	r30, r24
     90a:	20 83       	st	Z, r18
     90c:	31 83       	std	Z+1, r19	; 0x01
     90e:	80 e0       	ldi	r24, 0x00	; 0
     910:	9a e0       	ldi	r25, 0x0A	; 10
     912:	25 e0       	ldi	r18, 0x05	; 5
     914:	fc 01       	movw	r30, r24
     916:	20 83       	st	Z, r18
     918:	81 e0       	ldi	r24, 0x01	; 1
     91a:	9a e0       	ldi	r25, 0x0A	; 10
     91c:	23 ef       	ldi	r18, 0xF3	; 243
     91e:	fc 01       	movw	r30, r24
     920:	20 83       	st	Z, r18
     922:	88 e2       	ldi	r24, 0x28	; 40
     924:	9a e0       	ldi	r25, 0x0A	; 10
     926:	fc 01       	movw	r30, r24
     928:	10 82       	st	Z, r1
     92a:	11 82       	std	Z+1, r1	; 0x01
     92c:	8a e2       	ldi	r24, 0x2A	; 42
     92e:	9a e0       	ldi	r25, 0x0A	; 10
     930:	fc 01       	movw	r30, r24
     932:	10 82       	st	Z, r1
     934:	11 82       	std	Z+1, r1	; 0x01
     936:	8c e2       	ldi	r24, 0x2C	; 44
     938:	9a e0       	ldi	r25, 0x0A	; 10
     93a:	fc 01       	movw	r30, r24
     93c:	10 82       	st	Z, r1
     93e:	11 82       	std	Z+1, r1	; 0x01
     940:	8e e2       	ldi	r24, 0x2E	; 46
     942:	9a e0       	ldi	r25, 0x0A	; 10
     944:	fc 01       	movw	r30, r24
     946:	10 82       	st	Z, r1
     948:	11 82       	std	Z+1, r1	; 0x01
     94a:	82 e0       	ldi	r24, 0x02	; 2
     94c:	9a e0       	ldi	r25, 0x0A	; 10
     94e:	2f e0       	ldi	r18, 0x0F	; 15
     950:	fc 01       	movw	r30, r24
     952:	20 83       	st	Z, r18
     954:	df 91       	pop	r29
     956:	cf 91       	pop	r28
     958:	08 95       	ret

0000095a <setup_E1_motorRamp>:
     95a:	cf 93       	push	r28
     95c:	df 93       	push	r29
     95e:	cd b7       	in	r28, 0x3d	; 61
     960:	de b7       	in	r29, 0x3e	; 62
     962:	86 e6       	ldi	r24, 0x66	; 102
     964:	9a e0       	ldi	r25, 0x0A	; 10
     966:	20 e2       	ldi	r18, 0x20	; 32
     968:	3e e4       	ldi	r19, 0x4E	; 78
     96a:	fc 01       	movw	r30, r24
     96c:	20 83       	st	Z, r18
     96e:	31 83       	std	Z+1, r19	; 0x01
     970:	80 e4       	ldi	r24, 0x40	; 64
     972:	9a e0       	ldi	r25, 0x0A	; 10
     974:	25 e0       	ldi	r18, 0x05	; 5
     976:	fc 01       	movw	r30, r24
     978:	20 83       	st	Z, r18
     97a:	86 e4       	ldi	r24, 0x46	; 70
     97c:	9a e0       	ldi	r25, 0x0A	; 10
     97e:	21 e0       	ldi	r18, 0x01	; 1
     980:	fc 01       	movw	r30, r24
     982:	20 83       	st	Z, r18
     984:	df 91       	pop	r29
     986:	cf 91       	pop	r28
     988:	08 95       	ret

0000098a <__vector_53>:
     98a:	1f 92       	push	r1
     98c:	0f 92       	push	r0
     98e:	00 90 3f 00 	lds	r0, 0x003F
     992:	0f 92       	push	r0
     994:	11 24       	eor	r1, r1
     996:	00 90 38 00 	lds	r0, 0x0038
     99a:	0f 92       	push	r0
     99c:	10 92 38 00 	sts	0x0038, r1
     9a0:	00 90 3a 00 	lds	r0, 0x003A
     9a4:	0f 92       	push	r0
     9a6:	10 92 3a 00 	sts	0x003A, r1
     9aa:	8f 93       	push	r24
     9ac:	cf 93       	push	r28
     9ae:	df 93       	push	r29
     9b0:	cd b7       	in	r28, 0x3d	; 61
     9b2:	de b7       	in	r29, 0x3e	; 62
     9b4:	80 91 35 20 	lds	r24, 0x2035
     9b8:	80 68       	ori	r24, 0x80	; 128
     9ba:	80 93 35 20 	sts	0x2035, r24
     9be:	df 91       	pop	r29
     9c0:	cf 91       	pop	r28
     9c2:	8f 91       	pop	r24
     9c4:	0f 90       	pop	r0
     9c6:	00 92 3a 00 	sts	0x003A, r0
     9ca:	0f 90       	pop	r0
     9cc:	00 92 38 00 	sts	0x0038, r0
     9d0:	0f 90       	pop	r0
     9d2:	00 92 3f 00 	sts	0x003F, r0
     9d6:	0f 90       	pop	r0
     9d8:	1f 90       	pop	r1
     9da:	18 95       	reti

000009dc <set_direction>:
     9dc:	cf 93       	push	r28
     9de:	df 93       	push	r29
     9e0:	1f 92       	push	r1
     9e2:	cd b7       	in	r28, 0x3d	; 61
     9e4:	de b7       	in	r29, 0x3e	; 62
     9e6:	89 83       	std	Y+1, r24	; 0x01
     9e8:	80 91 31 20 	lds	r24, 0x2031
     9ec:	90 91 32 20 	lds	r25, 0x2032
     9f0:	80 93 33 20 	sts	0x2033, r24
     9f4:	90 93 34 20 	sts	0x2034, r25
     9f8:	80 e0       	ldi	r24, 0x00	; 0
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	68 d0       	rcall	.+208    	; 0xace <set_speed_with_ramp>
     9fe:	89 81       	ldd	r24, Y+1	; 0x01
     a00:	88 2f       	mov	r24, r24
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	82 30       	cpi	r24, 0x02	; 2
     a06:	91 05       	cpc	r25, r1
     a08:	51 f1       	breq	.+84     	; 0xa5e <set_direction+0x82>
     a0a:	83 30       	cpi	r24, 0x03	; 3
     a0c:	91 05       	cpc	r25, r1
     a0e:	34 f4       	brge	.+12     	; 0xa1c <set_direction+0x40>
     a10:	00 97       	sbiw	r24, 0x00	; 0
     a12:	71 f0       	breq	.+28     	; 0xa30 <set_direction+0x54>
     a14:	81 30       	cpi	r24, 0x01	; 1
     a16:	91 05       	cpc	r25, r1
     a18:	b1 f0       	breq	.+44     	; 0xa46 <set_direction+0x6a>
     a1a:	50 c0       	rjmp	.+160    	; 0xabc <set_direction+0xe0>
     a1c:	84 30       	cpi	r24, 0x04	; 4
     a1e:	91 05       	cpc	r25, r1
     a20:	a9 f1       	breq	.+106    	; 0xa8c <set_direction+0xb0>
     a22:	84 30       	cpi	r24, 0x04	; 4
     a24:	91 05       	cpc	r25, r1
     a26:	34 f1       	brlt	.+76     	; 0xa74 <set_direction+0x98>
     a28:	85 30       	cpi	r24, 0x05	; 5
     a2a:	91 05       	cpc	r25, r1
     a2c:	d9 f1       	breq	.+118    	; 0xaa4 <set_direction+0xc8>
     a2e:	46 c0       	rjmp	.+140    	; 0xabc <set_direction+0xe0>
     a30:	84 e6       	ldi	r24, 0x64	; 100
     a32:	96 e0       	ldi	r25, 0x06	; 6
     a34:	2a e0       	ldi	r18, 0x0A	; 10
     a36:	fc 01       	movw	r30, r24
     a38:	20 83       	st	Z, r18
     a3a:	80 91 35 20 	lds	r24, 0x2035
     a3e:	8f 78       	andi	r24, 0x8F	; 143
     a40:	80 93 35 20 	sts	0x2035, r24
     a44:	3b c0       	rjmp	.+118    	; 0xabc <set_direction+0xe0>
     a46:	84 e6       	ldi	r24, 0x64	; 100
     a48:	96 e0       	ldi	r25, 0x06	; 6
     a4a:	2f e0       	ldi	r18, 0x0F	; 15
     a4c:	fc 01       	movw	r30, r24
     a4e:	20 83       	st	Z, r18
     a50:	80 91 35 20 	lds	r24, 0x2035
     a54:	8f 78       	andi	r24, 0x8F	; 143
     a56:	80 61       	ori	r24, 0x10	; 16
     a58:	80 93 35 20 	sts	0x2035, r24
     a5c:	2f c0       	rjmp	.+94     	; 0xabc <set_direction+0xe0>
     a5e:	84 e6       	ldi	r24, 0x64	; 100
     a60:	96 e0       	ldi	r25, 0x06	; 6
     a62:	fc 01       	movw	r30, r24
     a64:	10 82       	st	Z, r1
     a66:	80 91 35 20 	lds	r24, 0x2035
     a6a:	8f 78       	andi	r24, 0x8F	; 143
     a6c:	80 62       	ori	r24, 0x20	; 32
     a6e:	80 93 35 20 	sts	0x2035, r24
     a72:	24 c0       	rjmp	.+72     	; 0xabc <set_direction+0xe0>
     a74:	84 e6       	ldi	r24, 0x64	; 100
     a76:	96 e0       	ldi	r25, 0x06	; 6
     a78:	25 e0       	ldi	r18, 0x05	; 5
     a7a:	fc 01       	movw	r30, r24
     a7c:	20 83       	st	Z, r18
     a7e:	80 91 35 20 	lds	r24, 0x2035
     a82:	8f 78       	andi	r24, 0x8F	; 143
     a84:	80 63       	ori	r24, 0x30	; 48
     a86:	80 93 35 20 	sts	0x2035, r24
     a8a:	18 c0       	rjmp	.+48     	; 0xabc <set_direction+0xe0>
     a8c:	84 e6       	ldi	r24, 0x64	; 100
     a8e:	96 e0       	ldi	r25, 0x06	; 6
     a90:	23 e0       	ldi	r18, 0x03	; 3
     a92:	fc 01       	movw	r30, r24
     a94:	20 83       	st	Z, r18
     a96:	80 91 35 20 	lds	r24, 0x2035
     a9a:	8f 78       	andi	r24, 0x8F	; 143
     a9c:	80 64       	ori	r24, 0x40	; 64
     a9e:	80 93 35 20 	sts	0x2035, r24
     aa2:	0c c0       	rjmp	.+24     	; 0xabc <set_direction+0xe0>
     aa4:	84 e6       	ldi	r24, 0x64	; 100
     aa6:	96 e0       	ldi	r25, 0x06	; 6
     aa8:	2c e0       	ldi	r18, 0x0C	; 12
     aaa:	fc 01       	movw	r30, r24
     aac:	20 83       	st	Z, r18
     aae:	80 91 35 20 	lds	r24, 0x2035
     ab2:	8f 78       	andi	r24, 0x8F	; 143
     ab4:	80 65       	ori	r24, 0x50	; 80
     ab6:	80 93 35 20 	sts	0x2035, r24
     aba:	00 00       	nop
     abc:	80 91 33 20 	lds	r24, 0x2033
     ac0:	90 91 34 20 	lds	r25, 0x2034
     ac4:	04 d0       	rcall	.+8      	; 0xace <set_speed_with_ramp>
     ac6:	0f 90       	pop	r0
     ac8:	df 91       	pop	r29
     aca:	cf 91       	pop	r28
     acc:	08 95       	ret

00000ace <set_speed_with_ramp>:
     ace:	cf 93       	push	r28
     ad0:	df 93       	push	r29
     ad2:	00 d0       	rcall	.+0      	; 0xad4 <set_speed_with_ramp+0x6>
     ad4:	1f 92       	push	r1
     ad6:	cd b7       	in	r28, 0x3d	; 61
     ad8:	de b7       	in	r29, 0x3e	; 62
     ada:	8b 83       	std	Y+3, r24	; 0x03
     adc:	9c 83       	std	Y+4, r25	; 0x04
     ade:	20 91 31 20 	lds	r18, 0x2031
     ae2:	30 91 32 20 	lds	r19, 0x2032
     ae6:	8b 81       	ldd	r24, Y+3	; 0x03
     ae8:	9c 81       	ldd	r25, Y+4	; 0x04
     aea:	82 17       	cp	r24, r18
     aec:	93 07       	cpc	r25, r19
     aee:	08 f0       	brcs	.+2      	; 0xaf2 <set_speed_with_ramp+0x24>
     af0:	75 c0       	rjmp	.+234    	; 0xbdc <set_speed_with_ramp+0x10e>
     af2:	38 c0       	rjmp	.+112    	; 0xb64 <set_speed_with_ramp+0x96>
     af4:	80 91 35 20 	lds	r24, 0x2035
     af8:	80 78       	andi	r24, 0x80	; 128
     afa:	88 23       	and	r24, r24
     afc:	99 f1       	breq	.+102    	; 0xb64 <set_speed_with_ramp+0x96>
     afe:	80 91 31 20 	lds	r24, 0x2031
     b02:	90 91 32 20 	lds	r25, 0x2032
     b06:	84 5f       	subi	r24, 0xF4	; 244
     b08:	91 40       	sbci	r25, 0x01	; 1
     b0a:	80 93 31 20 	sts	0x2031, r24
     b0e:	90 93 32 20 	sts	0x2032, r25
     b12:	88 e2       	ldi	r24, 0x28	; 40
     b14:	9a e0       	ldi	r25, 0x0A	; 10
     b16:	20 91 31 20 	lds	r18, 0x2031
     b1a:	30 91 32 20 	lds	r19, 0x2032
     b1e:	fc 01       	movw	r30, r24
     b20:	20 83       	st	Z, r18
     b22:	31 83       	std	Z+1, r19	; 0x01
     b24:	8a e2       	ldi	r24, 0x2A	; 42
     b26:	9a e0       	ldi	r25, 0x0A	; 10
     b28:	20 91 31 20 	lds	r18, 0x2031
     b2c:	30 91 32 20 	lds	r19, 0x2032
     b30:	fc 01       	movw	r30, r24
     b32:	20 83       	st	Z, r18
     b34:	31 83       	std	Z+1, r19	; 0x01
     b36:	8c e2       	ldi	r24, 0x2C	; 44
     b38:	9a e0       	ldi	r25, 0x0A	; 10
     b3a:	20 91 31 20 	lds	r18, 0x2031
     b3e:	30 91 32 20 	lds	r19, 0x2032
     b42:	fc 01       	movw	r30, r24
     b44:	20 83       	st	Z, r18
     b46:	31 83       	std	Z+1, r19	; 0x01
     b48:	8e e2       	ldi	r24, 0x2E	; 46
     b4a:	9a e0       	ldi	r25, 0x0A	; 10
     b4c:	20 91 31 20 	lds	r18, 0x2031
     b50:	30 91 32 20 	lds	r19, 0x2032
     b54:	fc 01       	movw	r30, r24
     b56:	20 83       	st	Z, r18
     b58:	31 83       	std	Z+1, r19	; 0x01
     b5a:	80 91 35 20 	lds	r24, 0x2035
     b5e:	8f 77       	andi	r24, 0x7F	; 127
     b60:	80 93 35 20 	sts	0x2035, r24
     b64:	20 91 31 20 	lds	r18, 0x2031
     b68:	30 91 32 20 	lds	r19, 0x2032
     b6c:	8b 81       	ldd	r24, Y+3	; 0x03
     b6e:	9c 81       	ldd	r25, Y+4	; 0x04
     b70:	82 17       	cp	r24, r18
     b72:	93 07       	cpc	r25, r19
     b74:	08 f4       	brcc	.+2      	; 0xb78 <set_speed_with_ramp+0xaa>
     b76:	be cf       	rjmp	.-132    	; 0xaf4 <set_speed_with_ramp+0x26>
     b78:	80 91 31 20 	lds	r24, 0x2031
     b7c:	90 91 32 20 	lds	r25, 0x2032
     b80:	84 3f       	cpi	r24, 0xF4	; 244
     b82:	f1 e0       	ldi	r31, 0x01	; 1
     b84:	9f 07       	cpc	r25, r31
     b86:	08 f0       	brcs	.+2      	; 0xb8a <set_speed_with_ramp+0xbc>
     b88:	1b c1       	rjmp	.+566    	; 0xdc0 <set_speed_with_ramp+0x2f2>
     b8a:	10 92 31 20 	sts	0x2031, r1
     b8e:	10 92 32 20 	sts	0x2032, r1
     b92:	88 e2       	ldi	r24, 0x28	; 40
     b94:	9a e0       	ldi	r25, 0x0A	; 10
     b96:	20 91 31 20 	lds	r18, 0x2031
     b9a:	30 91 32 20 	lds	r19, 0x2032
     b9e:	fc 01       	movw	r30, r24
     ba0:	20 83       	st	Z, r18
     ba2:	31 83       	std	Z+1, r19	; 0x01
     ba4:	8a e2       	ldi	r24, 0x2A	; 42
     ba6:	9a e0       	ldi	r25, 0x0A	; 10
     ba8:	20 91 31 20 	lds	r18, 0x2031
     bac:	30 91 32 20 	lds	r19, 0x2032
     bb0:	fc 01       	movw	r30, r24
     bb2:	20 83       	st	Z, r18
     bb4:	31 83       	std	Z+1, r19	; 0x01
     bb6:	8c e2       	ldi	r24, 0x2C	; 44
     bb8:	9a e0       	ldi	r25, 0x0A	; 10
     bba:	20 91 31 20 	lds	r18, 0x2031
     bbe:	30 91 32 20 	lds	r19, 0x2032
     bc2:	fc 01       	movw	r30, r24
     bc4:	20 83       	st	Z, r18
     bc6:	31 83       	std	Z+1, r19	; 0x01
     bc8:	8e e2       	ldi	r24, 0x2E	; 46
     bca:	9a e0       	ldi	r25, 0x0A	; 10
     bcc:	20 91 31 20 	lds	r18, 0x2031
     bd0:	30 91 32 20 	lds	r19, 0x2032
     bd4:	fc 01       	movw	r30, r24
     bd6:	20 83       	st	Z, r18
     bd8:	31 83       	std	Z+1, r19	; 0x01
     bda:	f2 c0       	rjmp	.+484    	; 0xdc0 <set_speed_with_ramp+0x2f2>
     bdc:	80 91 31 20 	lds	r24, 0x2031
     be0:	90 91 32 20 	lds	r25, 0x2032
     be4:	89 83       	std	Y+1, r24	; 0x01
     be6:	9a 83       	std	Y+2, r25	; 0x02
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <set_speed_with_ramp+0x1aa>
     bea:	80 91 31 20 	lds	r24, 0x2031
     bee:	90 91 32 20 	lds	r25, 0x2032
     bf2:	80 34       	cpi	r24, 0x40	; 64
     bf4:	ff e1       	ldi	r31, 0x1F	; 31
     bf6:	9f 07       	cpc	r25, r31
     bf8:	c8 f4       	brcc	.+50     	; 0xc2c <set_speed_with_ramp+0x15e>
     bfa:	80 e4       	ldi	r24, 0x40	; 64
     bfc:	9f e1       	ldi	r25, 0x1F	; 31
     bfe:	80 93 31 20 	sts	0x2031, r24
     c02:	90 93 32 20 	sts	0x2032, r25
     c06:	88 e2       	ldi	r24, 0x28	; 40
     c08:	9a e0       	ldi	r25, 0x0A	; 10
     c0a:	20 91 31 20 	lds	r18, 0x2031
     c0e:	30 91 32 20 	lds	r19, 0x2032
     c12:	fc 01       	movw	r30, r24
     c14:	20 83       	st	Z, r18
     c16:	31 83       	std	Z+1, r19	; 0x01
     c18:	8c e2       	ldi	r24, 0x2C	; 44
     c1a:	9a e0       	ldi	r25, 0x0A	; 10
     c1c:	20 91 31 20 	lds	r18, 0x2031
     c20:	30 91 32 20 	lds	r19, 0x2032
     c24:	fc 01       	movw	r30, r24
     c26:	20 83       	st	Z, r18
     c28:	31 83       	std	Z+1, r19	; 0x01
     c2a:	26 c0       	rjmp	.+76     	; 0xc78 <set_speed_with_ramp+0x1aa>
     c2c:	80 91 35 20 	lds	r24, 0x2035
     c30:	80 78       	andi	r24, 0x80	; 128
     c32:	88 23       	and	r24, r24
     c34:	09 f1       	breq	.+66     	; 0xc78 <set_speed_with_ramp+0x1aa>
     c36:	80 91 31 20 	lds	r24, 0x2031
     c3a:	90 91 32 20 	lds	r25, 0x2032
     c3e:	8c 50       	subi	r24, 0x0C	; 12
     c40:	9e 4f       	sbci	r25, 0xFE	; 254
     c42:	80 93 31 20 	sts	0x2031, r24
     c46:	90 93 32 20 	sts	0x2032, r25
     c4a:	88 e2       	ldi	r24, 0x28	; 40
     c4c:	9a e0       	ldi	r25, 0x0A	; 10
     c4e:	20 91 31 20 	lds	r18, 0x2031
     c52:	30 91 32 20 	lds	r19, 0x2032
     c56:	fc 01       	movw	r30, r24
     c58:	20 83       	st	Z, r18
     c5a:	31 83       	std	Z+1, r19	; 0x01
     c5c:	8c e2       	ldi	r24, 0x2C	; 44
     c5e:	9a e0       	ldi	r25, 0x0A	; 10
     c60:	20 91 31 20 	lds	r18, 0x2031
     c64:	30 91 32 20 	lds	r19, 0x2032
     c68:	fc 01       	movw	r30, r24
     c6a:	20 83       	st	Z, r18
     c6c:	31 83       	std	Z+1, r19	; 0x01
     c6e:	80 91 35 20 	lds	r24, 0x2035
     c72:	8f 77       	andi	r24, 0x7F	; 127
     c74:	80 93 35 20 	sts	0x2035, r24
     c78:	20 91 31 20 	lds	r18, 0x2031
     c7c:	30 91 32 20 	lds	r19, 0x2032
     c80:	8b 81       	ldd	r24, Y+3	; 0x03
     c82:	9c 81       	ldd	r25, Y+4	; 0x04
     c84:	28 17       	cp	r18, r24
     c86:	39 07       	cpc	r19, r25
     c88:	08 f4       	brcc	.+2      	; 0xc8c <set_speed_with_ramp+0x1be>
     c8a:	af cf       	rjmp	.-162    	; 0xbea <set_speed_with_ramp+0x11c>
     c8c:	20 91 31 20 	lds	r18, 0x2031
     c90:	30 91 32 20 	lds	r19, 0x2032
     c94:	8b 81       	ldd	r24, Y+3	; 0x03
     c96:	9c 81       	ldd	r25, Y+4	; 0x04
     c98:	82 17       	cp	r24, r18
     c9a:	93 07       	cpc	r25, r19
     c9c:	c0 f4       	brcc	.+48     	; 0xcce <set_speed_with_ramp+0x200>
     c9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ca0:	9c 81       	ldd	r25, Y+4	; 0x04
     ca2:	80 93 31 20 	sts	0x2031, r24
     ca6:	90 93 32 20 	sts	0x2032, r25
     caa:	88 e2       	ldi	r24, 0x28	; 40
     cac:	9a e0       	ldi	r25, 0x0A	; 10
     cae:	20 91 31 20 	lds	r18, 0x2031
     cb2:	30 91 32 20 	lds	r19, 0x2032
     cb6:	fc 01       	movw	r30, r24
     cb8:	20 83       	st	Z, r18
     cba:	31 83       	std	Z+1, r19	; 0x01
     cbc:	8c e2       	ldi	r24, 0x2C	; 44
     cbe:	9a e0       	ldi	r25, 0x0A	; 10
     cc0:	20 91 31 20 	lds	r18, 0x2031
     cc4:	30 91 32 20 	lds	r19, 0x2032
     cc8:	fc 01       	movw	r30, r24
     cca:	20 83       	st	Z, r18
     ccc:	31 83       	std	Z+1, r19	; 0x01
     cce:	89 81       	ldd	r24, Y+1	; 0x01
     cd0:	9a 81       	ldd	r25, Y+2	; 0x02
     cd2:	80 93 31 20 	sts	0x2031, r24
     cd6:	90 93 32 20 	sts	0x2032, r25
     cda:	47 c0       	rjmp	.+142    	; 0xd6a <set_speed_with_ramp+0x29c>
     cdc:	80 91 31 20 	lds	r24, 0x2031
     ce0:	90 91 32 20 	lds	r25, 0x2032
     ce4:	80 34       	cpi	r24, 0x40	; 64
     ce6:	ff e1       	ldi	r31, 0x1F	; 31
     ce8:	9f 07       	cpc	r25, r31
     cea:	c8 f4       	brcc	.+50     	; 0xd1e <set_speed_with_ramp+0x250>
     cec:	80 e4       	ldi	r24, 0x40	; 64
     cee:	9f e1       	ldi	r25, 0x1F	; 31
     cf0:	80 93 31 20 	sts	0x2031, r24
     cf4:	90 93 32 20 	sts	0x2032, r25
     cf8:	8a e2       	ldi	r24, 0x2A	; 42
     cfa:	9a e0       	ldi	r25, 0x0A	; 10
     cfc:	20 91 31 20 	lds	r18, 0x2031
     d00:	30 91 32 20 	lds	r19, 0x2032
     d04:	fc 01       	movw	r30, r24
     d06:	20 83       	st	Z, r18
     d08:	31 83       	std	Z+1, r19	; 0x01
     d0a:	8e e2       	ldi	r24, 0x2E	; 46
     d0c:	9a e0       	ldi	r25, 0x0A	; 10
     d0e:	20 91 31 20 	lds	r18, 0x2031
     d12:	30 91 32 20 	lds	r19, 0x2032
     d16:	fc 01       	movw	r30, r24
     d18:	20 83       	st	Z, r18
     d1a:	31 83       	std	Z+1, r19	; 0x01
     d1c:	26 c0       	rjmp	.+76     	; 0xd6a <set_speed_with_ramp+0x29c>
     d1e:	80 91 35 20 	lds	r24, 0x2035
     d22:	80 78       	andi	r24, 0x80	; 128
     d24:	88 23       	and	r24, r24
     d26:	09 f1       	breq	.+66     	; 0xd6a <set_speed_with_ramp+0x29c>
     d28:	80 91 31 20 	lds	r24, 0x2031
     d2c:	90 91 32 20 	lds	r25, 0x2032
     d30:	8c 50       	subi	r24, 0x0C	; 12
     d32:	9e 4f       	sbci	r25, 0xFE	; 254
     d34:	80 93 31 20 	sts	0x2031, r24
     d38:	90 93 32 20 	sts	0x2032, r25
     d3c:	8a e2       	ldi	r24, 0x2A	; 42
     d3e:	9a e0       	ldi	r25, 0x0A	; 10
     d40:	20 91 31 20 	lds	r18, 0x2031
     d44:	30 91 32 20 	lds	r19, 0x2032
     d48:	fc 01       	movw	r30, r24
     d4a:	20 83       	st	Z, r18
     d4c:	31 83       	std	Z+1, r19	; 0x01
     d4e:	8e e2       	ldi	r24, 0x2E	; 46
     d50:	9a e0       	ldi	r25, 0x0A	; 10
     d52:	20 91 31 20 	lds	r18, 0x2031
     d56:	30 91 32 20 	lds	r19, 0x2032
     d5a:	fc 01       	movw	r30, r24
     d5c:	20 83       	st	Z, r18
     d5e:	31 83       	std	Z+1, r19	; 0x01
     d60:	80 91 35 20 	lds	r24, 0x2035
     d64:	8f 77       	andi	r24, 0x7F	; 127
     d66:	80 93 35 20 	sts	0x2035, r24
     d6a:	20 91 31 20 	lds	r18, 0x2031
     d6e:	30 91 32 20 	lds	r19, 0x2032
     d72:	8b 81       	ldd	r24, Y+3	; 0x03
     d74:	9c 81       	ldd	r25, Y+4	; 0x04
     d76:	28 17       	cp	r18, r24
     d78:	39 07       	cpc	r19, r25
     d7a:	08 f4       	brcc	.+2      	; 0xd7e <set_speed_with_ramp+0x2b0>
     d7c:	af cf       	rjmp	.-162    	; 0xcdc <set_speed_with_ramp+0x20e>
     d7e:	20 91 31 20 	lds	r18, 0x2031
     d82:	30 91 32 20 	lds	r19, 0x2032
     d86:	8b 81       	ldd	r24, Y+3	; 0x03
     d88:	9c 81       	ldd	r25, Y+4	; 0x04
     d8a:	82 17       	cp	r24, r18
     d8c:	93 07       	cpc	r25, r19
     d8e:	c0 f4       	brcc	.+48     	; 0xdc0 <set_speed_with_ramp+0x2f2>
     d90:	8b 81       	ldd	r24, Y+3	; 0x03
     d92:	9c 81       	ldd	r25, Y+4	; 0x04
     d94:	80 93 31 20 	sts	0x2031, r24
     d98:	90 93 32 20 	sts	0x2032, r25
     d9c:	8a e2       	ldi	r24, 0x2A	; 42
     d9e:	9a e0       	ldi	r25, 0x0A	; 10
     da0:	20 91 31 20 	lds	r18, 0x2031
     da4:	30 91 32 20 	lds	r19, 0x2032
     da8:	fc 01       	movw	r30, r24
     daa:	20 83       	st	Z, r18
     dac:	31 83       	std	Z+1, r19	; 0x01
     dae:	8e e2       	ldi	r24, 0x2E	; 46
     db0:	9a e0       	ldi	r25, 0x0A	; 10
     db2:	20 91 31 20 	lds	r18, 0x2031
     db6:	30 91 32 20 	lds	r19, 0x2032
     dba:	fc 01       	movw	r30, r24
     dbc:	20 83       	st	Z, r18
     dbe:	31 83       	std	Z+1, r19	; 0x01
     dc0:	24 96       	adiw	r28, 0x04	; 4
     dc2:	cd bf       	out	0x3d, r28	; 61
     dc4:	de bf       	out	0x3e, r29	; 62
     dc6:	df 91       	pop	r29
     dc8:	cf 91       	pop	r28
     dca:	08 95       	ret

00000dcc <setup_C1_spinTimer>:


//spin timer is used to determine how long robot should spin while in spinning state
void setup_C1_spinTimer()
{
     dcc:	cf 93       	push	r28
     dce:	df 93       	push	r29
     dd0:	cd b7       	in	r28, 0x3d	; 61
     dd2:	de b7       	in	r29, 0x3e	; 62
	//setup period for timer to 0, but it will be 62500 ticks when used (assuming 32MHz clocks, this is 2s with 1024 prescale)
	TCC1_PER = 0;
     dd4:	86 e6       	ldi	r24, 0x66	; 102
     dd6:	98 e0       	ldi	r25, 0x08	; 8
     dd8:	fc 01       	movw	r30, r24
     dda:	10 82       	st	Z, r1
     ddc:	11 82       	std	Z+1, r1	; 0x01

	//set prescaler for counter to 1024 counts per 1 tick
	TCC1_CTRLA = 0x07;
     dde:	80 e4       	ldi	r24, 0x40	; 64
     de0:	98 e0       	ldi	r25, 0x08	; 8
     de2:	27 e0       	ldi	r18, 0x07	; 7
     de4:	fc 01       	movw	r30, r24
     de6:	20 83       	st	Z, r18

	//set interrupt priority to low
	TCC1_INTCTRLA = 0x01;
     de8:	86 e4       	ldi	r24, 0x46	; 70
     dea:	98 e0       	ldi	r25, 0x08	; 8
     dec:	21 e0       	ldi	r18, 0x01	; 1
     dee:	fc 01       	movw	r30, r24
     df0:	20 83       	st	Z, r18
	
}
     df2:	df 91       	pop	r29
     df4:	cf 91       	pop	r28
     df6:	08 95       	ret

00000df8 <__vector_20>:

//called when spin timer overflows
ISR(TCC1_OVF_vect)
{
     df8:	1f 92       	push	r1
     dfa:	0f 92       	push	r0
     dfc:	00 90 3f 00 	lds	r0, 0x003F
     e00:	0f 92       	push	r0
     e02:	11 24       	eor	r1, r1
     e04:	00 90 38 00 	lds	r0, 0x0038
     e08:	0f 92       	push	r0
     e0a:	10 92 38 00 	sts	0x0038, r1
     e0e:	00 90 3a 00 	lds	r0, 0x003A
     e12:	0f 92       	push	r0
     e14:	10 92 3a 00 	sts	0x003A, r1
     e18:	8f 93       	push	r24
     e1a:	cf 93       	push	r28
     e1c:	df 93       	push	r29
     e1e:	cd b7       	in	r28, 0x3d	; 61
     e20:	de b7       	in	r29, 0x3e	; 62
	semaphores.spin_complete = 1;	
     e22:	80 91 2f 20 	lds	r24, 0x202F
     e26:	80 68       	ori	r24, 0x80	; 128
     e28:	80 93 2f 20 	sts	0x202F, r24
}
     e2c:	df 91       	pop	r29
     e2e:	cf 91       	pop	r28
     e30:	8f 91       	pop	r24
     e32:	0f 90       	pop	r0
     e34:	00 92 3a 00 	sts	0x003A, r0
     e38:	0f 90       	pop	r0
     e3a:	00 92 38 00 	sts	0x0038, r0
     e3e:	0f 90       	pop	r0
     e40:	00 92 3f 00 	sts	0x003F, r0
     e44:	0f 90       	pop	r0
     e46:	1f 90       	pop	r1
     e48:	18 95       	reti

00000e4a <set_spinTimer>:

void set_spinTimer(uint16_t ticks)
{
     e4a:	cf 93       	push	r28
     e4c:	df 93       	push	r29
     e4e:	1f 92       	push	r1
     e50:	1f 92       	push	r1
     e52:	cd b7       	in	r28, 0x3d	; 61
     e54:	de b7       	in	r29, 0x3e	; 62
     e56:	89 83       	std	Y+1, r24	; 0x01
     e58:	9a 83       	std	Y+2, r25	; 0x02
	TCC1_PER = ticks;
     e5a:	86 e6       	ldi	r24, 0x66	; 102
     e5c:	98 e0       	ldi	r25, 0x08	; 8
     e5e:	29 81       	ldd	r18, Y+1	; 0x01
     e60:	3a 81       	ldd	r19, Y+2	; 0x02
     e62:	fc 01       	movw	r30, r24
     e64:	20 83       	st	Z, r18
     e66:	31 83       	std	Z+1, r19	; 0x01
}
     e68:	0f 90       	pop	r0
     e6a:	0f 90       	pop	r0
     e6c:	df 91       	pop	r29
     e6e:	cf 91       	pop	r28
     e70:	08 95       	ret

00000e72 <initialize_semaphores>:

struct semaphore_t;
extern struct semaphore_t semaphores;

void initialize_semaphores()
{
     e72:	cf 93       	push	r28
     e74:	df 93       	push	r29
     e76:	cd b7       	in	r28, 0x3d	; 61
     e78:	de b7       	in	r29, 0x3e	; 62
	semaphores.left_meas_done = 0;
     e7a:	80 91 2f 20 	lds	r24, 0x202F
     e7e:	8d 7f       	andi	r24, 0xFD	; 253
     e80:	80 93 2f 20 	sts	0x202F, r24
	semaphores.right_meas_done = 0;
     e84:	80 91 2f 20 	lds	r24, 0x202F
     e88:	8b 7f       	andi	r24, 0xFB	; 251
     e8a:	80 93 2f 20 	sts	0x202F, r24
	semaphores.front_meas_done = 0;
     e8e:	80 91 2f 20 	lds	r24, 0x202F
     e92:	87 7f       	andi	r24, 0xF7	; 247
     e94:	80 93 2f 20 	sts	0x202F, r24
	semaphores.back_meas_done = 0;
     e98:	80 91 2f 20 	lds	r24, 0x202F
     e9c:	8f 7e       	andi	r24, 0xEF	; 239
     e9e:	80 93 2f 20 	sts	0x202F, r24
	
	semaphores.change_speed = 0;
     ea2:	80 91 2f 20 	lds	r24, 0x202F
     ea6:	8f 7d       	andi	r24, 0xDF	; 223
     ea8:	80 93 2f 20 	sts	0x202F, r24
	semaphores.change_direction = 0;
     eac:	80 91 2f 20 	lds	r24, 0x202F
     eb0:	8f 7b       	andi	r24, 0xBF	; 191
     eb2:	80 93 2f 20 	sts	0x202F, r24
	
	semaphores.spin_complete = 0;
     eb6:	80 91 2f 20 	lds	r24, 0x202F
     eba:	8f 77       	andi	r24, 0x7F	; 127
     ebc:	80 93 2f 20 	sts	0x202F, r24
	semaphores.led_toggle = 0;
     ec0:	80 91 30 20 	lds	r24, 0x2030
     ec4:	8e 7f       	andi	r24, 0xFE	; 254
     ec6:	80 93 30 20 	sts	0x2030, r24
	
}
     eca:	df 91       	pop	r29
     ecc:	cf 91       	pop	r28
     ece:	08 95       	ret

00000ed0 <clear_meas_sems>:

void clear_meas_sems()
{
     ed0:	cf 93       	push	r28
     ed2:	df 93       	push	r29
     ed4:	cd b7       	in	r28, 0x3d	; 61
     ed6:	de b7       	in	r29, 0x3e	; 62
	semaphores.left_meas_done = 0;
     ed8:	80 91 2f 20 	lds	r24, 0x202F
     edc:	8d 7f       	andi	r24, 0xFD	; 253
     ede:	80 93 2f 20 	sts	0x202F, r24
	semaphores.right_meas_done = 0;
     ee2:	80 91 2f 20 	lds	r24, 0x202F
     ee6:	8b 7f       	andi	r24, 0xFB	; 251
     ee8:	80 93 2f 20 	sts	0x202F, r24
	semaphores.front_meas_done = 0;
     eec:	80 91 2f 20 	lds	r24, 0x202F
     ef0:	87 7f       	andi	r24, 0xF7	; 247
     ef2:	80 93 2f 20 	sts	0x202F, r24
	semaphores.back_meas_done = 0;
     ef6:	80 91 2f 20 	lds	r24, 0x202F
     efa:	8f 7e       	andi	r24, 0xEF	; 239
     efc:	80 93 2f 20 	sts	0x202F, r24
	
	
}
     f00:	df 91       	pop	r29
     f02:	cf 91       	pop	r28
     f04:	08 95       	ret

00000f06 <set_Clock_32MHz>:
void move_away_from_threat();
uint8_t check_for_trapped();


void set_Clock_32MHz()
{
     f06:	cf 93       	push	r28
     f08:	df 93       	push	r29
     f0a:	cd b7       	in	r28, 0x3d	; 61
     f0c:	de b7       	in	r29, 0x3e	; 62
	SetSystemClock(CLK_SCLKSEL_RC32M_gc, CLK_PSADIV_1_gc, CLK_PSBCDIV_1_1_gc);
     f0e:	40 e0       	ldi	r20, 0x00	; 0
     f10:	50 e0       	ldi	r21, 0x00	; 0
     f12:	60 e0       	ldi	r22, 0x00	; 0
     f14:	70 e0       	ldi	r23, 0x00	; 0
     f16:	81 e0       	ldi	r24, 0x01	; 1
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	1c d4       	rcall	.+2104   	; 0x1754 <SetSystemClock>
	GetSystemClocks(&sClk, &pClk);
     f1c:	6a e3       	ldi	r22, 0x3A	; 58
     f1e:	70 e2       	ldi	r23, 0x20	; 32
     f20:	86 e3       	ldi	r24, 0x36	; 54
     f22:	90 e2       	ldi	r25, 0x20	; 32
     f24:	4c d4       	rcall	.+2200   	; 0x17be <GetSystemClocks>
}
     f26:	df 91       	pop	r29
     f28:	cf 91       	pop	r28
     f2a:	08 95       	ret

00000f2c <determine_threat_order>:

void determine_threat_order()
{
     f2c:	cf 93       	push	r28
     f2e:	df 93       	push	r29
     f30:	00 d0       	rcall	.+0      	; 0xf32 <determine_threat_order+0x6>
     f32:	00 d0       	rcall	.+0      	; 0xf34 <determine_threat_order+0x8>
     f34:	cd b7       	in	r28, 0x3d	; 61
     f36:	de b7       	in	r29, 0x3e	; 62
	uint16_t closestThreat_meas = 0;
     f38:	19 82       	std	Y+1, r1	; 0x01
     f3a:	1a 82       	std	Y+2, r1	; 0x02
	uint16_t furthestThreat_meas = 0xFFFF;
     f3c:	8f ef       	ldi	r24, 0xFF	; 255
     f3e:	9f ef       	ldi	r25, 0xFF	; 255
     f40:	8b 83       	std	Y+3, r24	; 0x03
     f42:	9c 83       	std	Y+4, r25	; 0x04
	
	//check each direction to see which distance is closest or furthest
	//note that threat distance is the value returned by the ADC from infrared sensors, high = closer,  low = further away
	for(int i = LEFT; i <= RIGHT; i++)
     f44:	1d 82       	std	Y+5, r1	; 0x05
     f46:	1e 82       	std	Y+6, r1	; 0x06
     f48:	3d c0       	rjmp	.+122    	; 0xfc4 <determine_threat_order+0x98>
	{
		//closest threat is used to decide what to move away from
		if (threat_distance[i] > closestThreat_meas )
     f4a:	8d 81       	ldd	r24, Y+5	; 0x05
     f4c:	9e 81       	ldd	r25, Y+6	; 0x06
     f4e:	88 0f       	add	r24, r24
     f50:	99 1f       	adc	r25, r25
     f52:	80 50       	subi	r24, 0x00	; 0
     f54:	90 4e       	sbci	r25, 0xE0	; 224
     f56:	fc 01       	movw	r30, r24
     f58:	20 81       	ld	r18, Z
     f5a:	31 81       	ldd	r19, Z+1	; 0x01
     f5c:	89 81       	ldd	r24, Y+1	; 0x01
     f5e:	9a 81       	ldd	r25, Y+2	; 0x02
     f60:	82 17       	cp	r24, r18
     f62:	93 07       	cpc	r25, r19
     f64:	70 f4       	brcc	.+28     	; 0xf82 <determine_threat_order+0x56>
		{
			closestThreat = (uint8_t)i;
     f66:	8d 81       	ldd	r24, Y+5	; 0x05
     f68:	80 93 08 20 	sts	0x2008, r24
			closestThreat_meas = threat_distance[i];
     f6c:	8d 81       	ldd	r24, Y+5	; 0x05
     f6e:	9e 81       	ldd	r25, Y+6	; 0x06
     f70:	88 0f       	add	r24, r24
     f72:	99 1f       	adc	r25, r25
     f74:	80 50       	subi	r24, 0x00	; 0
     f76:	90 4e       	sbci	r25, 0xE0	; 224
     f78:	fc 01       	movw	r30, r24
     f7a:	80 81       	ld	r24, Z
     f7c:	91 81       	ldd	r25, Z+1	; 0x01
     f7e:	89 83       	std	Y+1, r24	; 0x01
     f80:	9a 83       	std	Y+2, r25	; 0x02
		}
		
		//furthest threat used to decide which direction to go
		if (threat_distance[i] < furthestThreat_meas )
     f82:	8d 81       	ldd	r24, Y+5	; 0x05
     f84:	9e 81       	ldd	r25, Y+6	; 0x06
     f86:	88 0f       	add	r24, r24
     f88:	99 1f       	adc	r25, r25
     f8a:	80 50       	subi	r24, 0x00	; 0
     f8c:	90 4e       	sbci	r25, 0xE0	; 224
     f8e:	fc 01       	movw	r30, r24
     f90:	20 81       	ld	r18, Z
     f92:	31 81       	ldd	r19, Z+1	; 0x01
     f94:	8b 81       	ldd	r24, Y+3	; 0x03
     f96:	9c 81       	ldd	r25, Y+4	; 0x04
     f98:	28 17       	cp	r18, r24
     f9a:	39 07       	cpc	r19, r25
     f9c:	70 f4       	brcc	.+28     	; 0xfba <determine_threat_order+0x8e>
		{
			furthestThreat = (uint8_t)i;
     f9e:	8d 81       	ldd	r24, Y+5	; 0x05
     fa0:	80 93 09 20 	sts	0x2009, r24
			furthestThreat_meas = threat_distance[i];
     fa4:	8d 81       	ldd	r24, Y+5	; 0x05
     fa6:	9e 81       	ldd	r25, Y+6	; 0x06
     fa8:	88 0f       	add	r24, r24
     faa:	99 1f       	adc	r25, r25
     fac:	80 50       	subi	r24, 0x00	; 0
     fae:	90 4e       	sbci	r25, 0xE0	; 224
     fb0:	fc 01       	movw	r30, r24
     fb2:	80 81       	ld	r24, Z
     fb4:	91 81       	ldd	r25, Z+1	; 0x01
     fb6:	8b 83       	std	Y+3, r24	; 0x03
     fb8:	9c 83       	std	Y+4, r25	; 0x04
	uint16_t closestThreat_meas = 0;
	uint16_t furthestThreat_meas = 0xFFFF;
	
	//check each direction to see which distance is closest or furthest
	//note that threat distance is the value returned by the ADC from infrared sensors, high = closer,  low = further away
	for(int i = LEFT; i <= RIGHT; i++)
     fba:	8d 81       	ldd	r24, Y+5	; 0x05
     fbc:	9e 81       	ldd	r25, Y+6	; 0x06
     fbe:	01 96       	adiw	r24, 0x01	; 1
     fc0:	8d 83       	std	Y+5, r24	; 0x05
     fc2:	9e 83       	std	Y+6, r25	; 0x06
     fc4:	8d 81       	ldd	r24, Y+5	; 0x05
     fc6:	9e 81       	ldd	r25, Y+6	; 0x06
     fc8:	84 30       	cpi	r24, 0x04	; 4
     fca:	91 05       	cpc	r25, r1
     fcc:	0c f4       	brge	.+2      	; 0xfd0 <determine_threat_order+0xa4>
     fce:	bd cf       	rjmp	.-134    	; 0xf4a <determine_threat_order+0x1e>
			furthestThreat_meas = threat_distance[i];
		}
			
	}
			
}
     fd0:	26 96       	adiw	r28, 0x06	; 6
     fd2:	cd bf       	out	0x3d, r28	; 61
     fd4:	de bf       	out	0x3e, r29	; 62
     fd6:	df 91       	pop	r29
     fd8:	cf 91       	pop	r28
     fda:	08 95       	ret

00000fdc <move_away_from_threat>:

void move_away_from_threat()
{
     fdc:	cf 93       	push	r28
     fde:	df 93       	push	r29
     fe0:	1f 92       	push	r1
     fe2:	1f 92       	push	r1
     fe4:	cd b7       	in	r28, 0x3d	; 61
     fe6:	de b7       	in	r29, 0x3e	; 62
	//check each direction to see which distance is furthest and move towards it
	for(int i = LEFT; i <= RIGHT; i++)
     fe8:	19 82       	std	Y+1, r1	; 0x01
     fea:	1a 82       	std	Y+2, r1	; 0x02
     fec:	35 c0       	rjmp	.+106    	; 0x1058 <move_away_from_threat+0x7c>
	{
		if (i == furthestThreat)
     fee:	80 91 09 20 	lds	r24, 0x2009
     ff2:	28 2f       	mov	r18, r24
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	89 81       	ldd	r24, Y+1	; 0x01
     ff8:	9a 81       	ldd	r25, Y+2	; 0x02
     ffa:	28 17       	cp	r18, r24
     ffc:	39 07       	cpc	r19, r25
     ffe:	39 f5       	brne	.+78     	; 0x104e <move_away_from_threat+0x72>
		{
			//make sure bot is moving away from something close, otherwise just let it sit and wait
			if(threat_distance[closestThreat] > MIN_INFRARED_THREAT)
    1000:	80 91 08 20 	lds	r24, 0x2008
    1004:	88 2f       	mov	r24, r24
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	88 0f       	add	r24, r24
    100a:	99 1f       	adc	r25, r25
    100c:	80 50       	subi	r24, 0x00	; 0
    100e:	90 4e       	sbci	r25, 0xE0	; 224
    1010:	fc 01       	movw	r30, r24
    1012:	80 81       	ld	r24, Z
    1014:	91 81       	ldd	r25, Z+1	; 0x01
    1016:	81 39       	cpi	r24, 0x91	; 145
    1018:	f1 e0       	ldi	r31, 0x01	; 1
    101a:	9f 07       	cpc	r25, r31
    101c:	a8 f0       	brcs	.+42     	; 0x1048 <move_away_from_threat+0x6c>
			{
				if (motorControl.direction != furthestThreat)
    101e:	80 91 35 20 	lds	r24, 0x2035
    1022:	82 95       	swap	r24
    1024:	8f 70       	andi	r24, 0x0F	; 15
    1026:	87 70       	andi	r24, 0x07	; 7
    1028:	28 2f       	mov	r18, r24
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	80 91 09 20 	lds	r24, 0x2009
    1030:	88 2f       	mov	r24, r24
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	28 17       	cp	r18, r24
    1036:	39 07       	cpc	r19, r25
    1038:	19 f0       	breq	.+6      	; 0x1040 <move_away_from_threat+0x64>
				{
					set_direction(furthestThreat);
    103a:	80 91 09 20 	lds	r24, 0x2009
    103e:	ce dc       	rcall	.-1636   	; 0x9dc <set_direction>
				}
				set_speed_with_ramp(MOTOR_FAST_TICKS);
    1040:	88 e2       	ldi	r24, 0x28	; 40
    1042:	93 e2       	ldi	r25, 0x23	; 35
    1044:	44 dd       	rcall	.-1400   	; 0xace <set_speed_with_ramp>
    1046:	03 c0       	rjmp	.+6      	; 0x104e <move_away_from_threat+0x72>
				
			}
			else
			{
				//there is no threat within minimum threshold so just let the robot sit and wait
				set_speed_with_ramp(0);
    1048:	80 e0       	ldi	r24, 0x00	; 0
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	40 dd       	rcall	.-1408   	; 0xace <set_speed_with_ramp>
}

void move_away_from_threat()
{
	//check each direction to see which distance is furthest and move towards it
	for(int i = LEFT; i <= RIGHT; i++)
    104e:	89 81       	ldd	r24, Y+1	; 0x01
    1050:	9a 81       	ldd	r25, Y+2	; 0x02
    1052:	01 96       	adiw	r24, 0x01	; 1
    1054:	89 83       	std	Y+1, r24	; 0x01
    1056:	9a 83       	std	Y+2, r25	; 0x02
    1058:	89 81       	ldd	r24, Y+1	; 0x01
    105a:	9a 81       	ldd	r25, Y+2	; 0x02
    105c:	84 30       	cpi	r24, 0x04	; 4
    105e:	91 05       	cpc	r25, r1
    1060:	34 f2       	brlt	.-116    	; 0xfee <move_away_from_threat+0x12>
			
		}
		
	}

}
    1062:	0f 90       	pop	r0
    1064:	0f 90       	pop	r0
    1066:	df 91       	pop	r29
    1068:	cf 91       	pop	r28
    106a:	08 95       	ret

0000106c <check_for_trapped>:

uint8_t check_for_trapped()
{
    106c:	cf 93       	push	r28
    106e:	df 93       	push	r29
    1070:	1f 92       	push	r1
    1072:	1f 92       	push	r1
    1074:	cd b7       	in	r28, 0x3d	; 61
    1076:	de b7       	in	r29, 0x3e	; 62
	//check each threat distance to see if they are all above max threshold
	for(int i = LEFT; i <= RIGHT; i++)
    1078:	19 82       	std	Y+1, r1	; 0x01
    107a:	1a 82       	std	Y+2, r1	; 0x02
    107c:	14 c0       	rjmp	.+40     	; 0x10a6 <check_for_trapped+0x3a>
	{
		//if any of the measurements are less than the max threshold, it isn't trapped
		if (threat_distance[i] < TRAPPED_INFRARED) return 0;	
    107e:	89 81       	ldd	r24, Y+1	; 0x01
    1080:	9a 81       	ldd	r25, Y+2	; 0x02
    1082:	88 0f       	add	r24, r24
    1084:	99 1f       	adc	r25, r25
    1086:	80 50       	subi	r24, 0x00	; 0
    1088:	90 4e       	sbci	r25, 0xE0	; 224
    108a:	fc 01       	movw	r30, r24
    108c:	80 81       	ld	r24, Z
    108e:	91 81       	ldd	r25, Z+1	; 0x01
    1090:	88 3e       	cpi	r24, 0xE8	; 232
    1092:	f3 e0       	ldi	r31, 0x03	; 3
    1094:	9f 07       	cpc	r25, r31
    1096:	10 f4       	brcc	.+4      	; 0x109c <check_for_trapped+0x30>
    1098:	80 e0       	ldi	r24, 0x00	; 0
    109a:	0b c0       	rjmp	.+22     	; 0x10b2 <check_for_trapped+0x46>
}

uint8_t check_for_trapped()
{
	//check each threat distance to see if they are all above max threshold
	for(int i = LEFT; i <= RIGHT; i++)
    109c:	89 81       	ldd	r24, Y+1	; 0x01
    109e:	9a 81       	ldd	r25, Y+2	; 0x02
    10a0:	01 96       	adiw	r24, 0x01	; 1
    10a2:	89 83       	std	Y+1, r24	; 0x01
    10a4:	9a 83       	std	Y+2, r25	; 0x02
    10a6:	89 81       	ldd	r24, Y+1	; 0x01
    10a8:	9a 81       	ldd	r25, Y+2	; 0x02
    10aa:	84 30       	cpi	r24, 0x04	; 4
    10ac:	91 05       	cpc	r25, r1
    10ae:	3c f3       	brlt	.-50     	; 0x107e <check_for_trapped+0x12>
		//if any of the measurements are less than the max threshold, it isn't trapped
		if (threat_distance[i] < TRAPPED_INFRARED) return 0;	
	}
	
	//if the function reaches this point, each threat measurement was above the max threshold and it is trapped
	return 1;	
    10b0:	81 e0       	ldi	r24, 0x01	; 1
	
}
    10b2:	0f 90       	pop	r0
    10b4:	0f 90       	pop	r0
    10b6:	df 91       	pop	r29
    10b8:	cf 91       	pop	r28
    10ba:	08 95       	ret

000010bc <main>:


int main(void)
{
    10bc:	cf 93       	push	r28
    10be:	df 93       	push	r29
    10c0:	cd b7       	in	r28, 0x3d	; 61
    10c2:	de b7       	in	r29, 0x3e	; 62
	
	set_Clock_32MHz();
    10c4:	20 df       	rcall	.-448    	; 0xf06 <set_Clock_32MHz>
	initialize_semaphores();
    10c6:	d5 de       	rcall	.-598    	; 0xe72 <initialize_semaphores>
	initialize_motorControl();
    10c8:	e9 db       	rcall	.-2094   	; 0x89c <initialize_motorControl>
	initialize_threat_distances();
    10ca:	0a d1       	rcall	.+532    	; 0x12e0 <initialize_threat_distances>
	reset_infSens();
    10cc:	1f d3       	rcall	.+1598   	; 0x170c <reset_infSens>
	
	//clear interrupts
	cli();
    10ce:	f8 94       	cli

	setup_timer_D1();			//D1 is used to control the timing for infrared sensor measurements
    10d0:	b0 d0       	rcall	.+352    	; 0x1232 <setup_timer_D1>
	setup_gpio();				//declares polarity for gpio ports
    10d2:	53 da       	rcall	.-2906   	; 0x57a <setup_gpio>
	setup_ADCB();				//sets up pins 0-3 for use with infrared sensors
    10d4:	a7 d8       	rcall	.-3762   	; 0x224 <setup_ADCB>
	setup_E0_motorControl();	//E0 is used as PWM for controlling the motors
    10d6:	10 dc       	rcall	.-2016   	; 0x8f8 <setup_E0_motorControl>
	setup_E1_motorRamp();		//E1 is the timer that is used for ramping up/down the pulse width in E0
    10d8:	40 dc       	rcall	.-1920   	; 0x95a <setup_E1_motorRamp>
	setup_btn_interrupt();		//sets up interrupts for buttons
    10da:	6d da       	rcall	.-2854   	; 0x5b6 <setup_btn_interrupt>
	setup_C1_spinTimer();		//initialize timer used for controlling spin state
    10dc:	77 de       	rcall	.-786    	; 0xdcc <setup_C1_spinTimer>
	setup_F1_LEDTimer();		//initialize timer used for toggling the LEDs
    10de:	6f db       	rcall	.-2338   	; 0x7be <setup_F1_LEDTimer>

	
	//enable low, med, and high level interrupts
	PMIC_CTRL = PMIC_HILVLEN_bm |PMIC_MEDLVLEN_bm | PMIC_LOLVLEN_bm;
    10e0:	82 ea       	ldi	r24, 0xA2	; 162
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	27 e0       	ldi	r18, 0x07	; 7
    10e6:	fc 01       	movw	r30, r24
    10e8:	20 83       	st	Z, r18
	
	//turn interrupts back on
	sei();
    10ea:	78 94       	sei
	
	//set motors to 0 ticks to start
	set_speed_with_ramp(0);
    10ec:	80 e0       	ldi	r24, 0x00	; 0
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	ee dc       	rcall	.-1572   	; 0xace <set_speed_with_ramp>
	
	//set state to escaping to start
	state = ESCAPING;
    10f2:	10 92 0a 20 	sts	0x200A, r1

	while(1)
	{
		//escaping state
		while(state == ESCAPING)
    10f6:	32 c0       	rjmp	.+100    	; 0x115c <main+0xa0>
		{
			//check to see if all measurements are done
			if(semaphores.left_meas_done && semaphores.back_meas_done && semaphores.front_meas_done && semaphores.right_meas_done)
    10f8:	80 91 2f 20 	lds	r24, 0x202F
    10fc:	82 70       	andi	r24, 0x02	; 2
    10fe:	88 23       	and	r24, r24
    1100:	69 f1       	breq	.+90     	; 0x115c <main+0xa0>
    1102:	80 91 2f 20 	lds	r24, 0x202F
    1106:	80 71       	andi	r24, 0x10	; 16
    1108:	88 23       	and	r24, r24
    110a:	41 f1       	breq	.+80     	; 0x115c <main+0xa0>
    110c:	80 91 2f 20 	lds	r24, 0x202F
    1110:	88 70       	andi	r24, 0x08	; 8
    1112:	88 23       	and	r24, r24
    1114:	19 f1       	breq	.+70     	; 0x115c <main+0xa0>
    1116:	80 91 2f 20 	lds	r24, 0x202F
    111a:	84 70       	andi	r24, 0x04	; 4
    111c:	88 23       	and	r24, r24
    111e:	f1 f0       	breq	.+60     	; 0x115c <main+0xa0>
			{
				//toggle lowest bit on LED's so that we can see the measurement status
				//LED_PORT.OUT ^= 0x01;
				
				//calculate the average distance measured by each infrared sensor
				set_infrSens_avg_to_threatDist();
    1120:	31 d2       	rcall	.+1122   	; 0x1584 <set_infrSens_avg_to_threatDist>
				
				//check to see if the robot is trapped, i.e. all sides are above max threshold
				if(check_for_trapped())
    1122:	a4 df       	rcall	.-184    	; 0x106c <check_for_trapped>
    1124:	88 23       	and	r24, r24
    1126:	21 f0       	breq	.+8      	; 0x1130 <main+0x74>
				{
					state = TRAPPED;	//set state to trapped
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	80 93 0a 20 	sts	0x200A, r24
					break;	//break out of while loop so that trapped state can be entered
    112e:	1a c0       	rjmp	.+52     	; 0x1164 <main+0xa8>
				}
				
				determine_threat_order();
    1130:	fd de       	rcall	.-518    	; 0xf2c <determine_threat_order>
				
				move_away_from_threat();
    1132:	54 df       	rcall	.-344    	; 0xfdc <move_away_from_threat>
				
				reset_infSens();
    1134:	eb d2       	rcall	.+1494   	; 0x170c <reset_infSens>
				
				clear_meas_sems();
    1136:	cc de       	rcall	.-616    	; 0xed0 <clear_meas_sems>
				
				//show the closest threat on lowest nibble and furthest threat on upper nibble
				LED_PORT.OUT = (uint8_t)(closestThreat | (furthestThreat << 4));
    1138:	80 ee       	ldi	r24, 0xE0	; 224
    113a:	96 e0       	ldi	r25, 0x06	; 6
    113c:	20 91 09 20 	lds	r18, 0x2009
    1140:	22 2f       	mov	r18, r18
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	22 95       	swap	r18
    1146:	32 95       	swap	r19
    1148:	30 7f       	andi	r19, 0xF0	; 240
    114a:	32 27       	eor	r19, r18
    114c:	20 7f       	andi	r18, 0xF0	; 240
    114e:	32 27       	eor	r19, r18
    1150:	32 2f       	mov	r19, r18
    1152:	20 91 08 20 	lds	r18, 0x2008
    1156:	23 2b       	or	r18, r19
    1158:	fc 01       	movw	r30, r24
    115a:	24 83       	std	Z+4, r18	; 0x04
	state = ESCAPING;

	while(1)
	{
		//escaping state
		while(state == ESCAPING)
    115c:	80 91 0a 20 	lds	r24, 0x200A
    1160:	88 23       	and	r24, r24
    1162:	51 f2       	breq	.-108    	; 0x10f8 <main+0x3c>
				
			}	
			
		}	//end of escaping state while loop
		
		while(state == TESTING)
    1164:	1f c0       	rjmp	.+62     	; 0x11a4 <main+0xe8>
		{
			//check to see if change direction semaphore has been thrown by button press
			if(semaphores.change_direction)
    1166:	80 91 2f 20 	lds	r24, 0x202F
    116a:	80 74       	andi	r24, 0x40	; 64
    116c:	88 23       	and	r24, r24
    116e:	59 f0       	breq	.+22     	; 0x1186 <main+0xca>
			{
				set_direction(motorControl.direction);
    1170:	80 91 35 20 	lds	r24, 0x2035
    1174:	82 95       	swap	r24
    1176:	8f 70       	andi	r24, 0x0F	; 15
    1178:	87 70       	andi	r24, 0x07	; 7
    117a:	30 dc       	rcall	.-1952   	; 0x9dc <set_direction>
				semaphores.change_direction = 0;
    117c:	80 91 2f 20 	lds	r24, 0x202F
    1180:	8f 7b       	andi	r24, 0xBF	; 191
    1182:	80 93 2f 20 	sts	0x202F, r24
			}
			
			//check to see if change speed semaphore has been thrown by button press
			if(semaphores.change_speed)
    1186:	80 91 2f 20 	lds	r24, 0x202F
    118a:	80 72       	andi	r24, 0x20	; 32
    118c:	88 23       	and	r24, r24
    118e:	51 f0       	breq	.+20     	; 0x11a4 <main+0xe8>
			{
				set_speed_with_ramp(motorControl.target_speed_ticks);
    1190:	80 91 33 20 	lds	r24, 0x2033
    1194:	90 91 34 20 	lds	r25, 0x2034
    1198:	9a dc       	rcall	.-1740   	; 0xace <set_speed_with_ramp>
				semaphores.change_speed = 0;
    119a:	80 91 2f 20 	lds	r24, 0x202F
    119e:	8f 7d       	andi	r24, 0xDF	; 223
    11a0:	80 93 2f 20 	sts	0x202F, r24
				
			}	
			
		}	//end of escaping state while loop
		
		while(state == TESTING)
    11a4:	80 91 0a 20 	lds	r24, 0x200A
    11a8:	83 30       	cpi	r24, 0x03	; 3
    11aa:	e9 f2       	breq	.-70     	; 0x1166 <main+0xaa>
				semaphores.change_speed = 0;
			}	
			
		}	//end of testing state
		
		while(state == TRAPPED)
    11ac:	03 c0       	rjmp	.+6      	; 0x11b4 <main+0xf8>
		{		
			//set state to spinning
			state = SPINNING;
    11ae:	82 e0       	ldi	r24, 0x02	; 2
    11b0:	80 93 0a 20 	sts	0x200A, r24
				semaphores.change_speed = 0;
			}	
			
		}	//end of testing state
		
		while(state == TRAPPED)
    11b4:	80 91 0a 20 	lds	r24, 0x200A
    11b8:	81 30       	cpi	r24, 0x01	; 1
    11ba:	c9 f3       	breq	.-14     	; 0x11ae <main+0xf2>
			state = SPINNING;
			
			
		}
		
		while(state == SPINNING)
    11bc:	33 c0       	rjmp	.+102    	; 0x1224 <main+0x168>
		{
			//tell the robot to spin
			set_direction(SPIN_CC);
    11be:	84 e0       	ldi	r24, 0x04	; 4
    11c0:	0d dc       	rcall	.-2022   	; 0x9dc <set_direction>
			set_speed_with_ramp(MOTOR_FAST_TICKS);
    11c2:	88 e2       	ldi	r24, 0x28	; 40
    11c4:	93 e2       	ldi	r25, 0x23	; 35
    11c6:	83 dc       	rcall	.-1786   	; 0xace <set_speed_with_ramp>
			
			//turn on LED timer for 100ms
			set_LEDTimer(50000);
    11c8:	80 e5       	ldi	r24, 0x50	; 80
    11ca:	93 ec       	ldi	r25, 0xC3	; 195
    11cc:	53 db       	rcall	.-2394   	; 0x874 <set_LEDTimer>
			
			//turn on spinning timer so we can end the spin
			semaphores.spin_complete = 0;	//set to 0 so ISR can set it to 1
    11ce:	80 91 2f 20 	lds	r24, 0x202F
    11d2:	8f 77       	andi	r24, 0x7F	; 127
    11d4:	80 93 2f 20 	sts	0x202F, r24
			set_spinTimer(SPIN_TICKS);
    11d8:	84 e2       	ldi	r24, 0x24	; 36
    11da:	94 ef       	ldi	r25, 0xF4	; 244
    11dc:	36 de       	rcall	.-916    	; 0xe4a <set_spinTimer>
			
			//wait for the spin to finish, do LED light show while we wait
			while(!semaphores.spin_complete)
    11de:	0b c0       	rjmp	.+22     	; 0x11f6 <main+0x13a>
			{
				if(semaphores.led_toggle) 
    11e0:	80 91 30 20 	lds	r24, 0x2030
    11e4:	81 70       	andi	r24, 0x01	; 1
    11e6:	88 23       	and	r24, r24
    11e8:	31 f0       	breq	.+12     	; 0x11f6 <main+0x13a>
				{
					next_spin_led();
    11ea:	28 db       	rcall	.-2480   	; 0x83c <next_spin_led>
					semaphores.led_toggle = 0;
    11ec:	80 91 30 20 	lds	r24, 0x2030
    11f0:	8e 7f       	andi	r24, 0xFE	; 254
    11f2:	80 93 30 20 	sts	0x2030, r24
			//turn on spinning timer so we can end the spin
			semaphores.spin_complete = 0;	//set to 0 so ISR can set it to 1
			set_spinTimer(SPIN_TICKS);
			
			//wait for the spin to finish, do LED light show while we wait
			while(!semaphores.spin_complete)
    11f6:	80 91 2f 20 	lds	r24, 0x202F
    11fa:	80 78       	andi	r24, 0x80	; 128
    11fc:	88 23       	and	r24, r24
    11fe:	81 f3       	breq	.-32     	; 0x11e0 <main+0x124>
					next_spin_led();
					semaphores.led_toggle = 0;
				}
			}
			
			semaphores.spin_complete = 0;
    1200:	80 91 2f 20 	lds	r24, 0x202F
    1204:	8f 77       	andi	r24, 0x7F	; 127
    1206:	80 93 2f 20 	sts	0x202F, r24
			
			//turn off the spin timer
			set_spinTimer(0);
    120a:	80 e0       	ldi	r24, 0x00	; 0
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	1d de       	rcall	.-966    	; 0xe4a <set_spinTimer>
			//turn off LED_timer
			set_LEDTimer(0);
    1210:	80 e0       	ldi	r24, 0x00	; 0
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	2f db       	rcall	.-2466   	; 0x874 <set_LEDTimer>
			//stop spinning
			set_speed_with_ramp(0);
    1216:	80 e0       	ldi	r24, 0x00	; 0
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	59 dc       	rcall	.-1870   	; 0xace <set_speed_with_ramp>
				
			//after spin is done, return to escaping state
			//reset the sensors so they can start performing measurements
			reset_infSens();	
    121c:	77 d2       	rcall	.+1262   	; 0x170c <reset_infSens>
			clear_meas_sems();
    121e:	58 de       	rcall	.-848    	; 0xed0 <clear_meas_sems>
			state = ESCAPING;
    1220:	10 92 0a 20 	sts	0x200A, r1
			state = SPINNING;
			
			
		}
		
		while(state == SPINNING)
    1224:	80 91 0a 20 	lds	r24, 0x200A
    1228:	82 30       	cpi	r24, 0x02	; 2
    122a:	09 f4       	brne	.+2      	; 0x122e <main+0x172>
    122c:	c8 cf       	rjmp	.-112    	; 0x11be <main+0x102>
			state = ESCAPING;
			
		}	//end of spinning state
		
		
	}
    122e:	00 00       	nop
	state = ESCAPING;

	while(1)
	{
		//escaping state
		while(state == ESCAPING)
    1230:	95 cf       	rjmp	.-214    	; 0x115c <main+0xa0>

00001232 <setup_timer_D1>:
{
	TCD0_CCA = (uint16_t)(calculate_sigmoid(threat_distance[LEFT]) * MAX_TICKS_THREAT_LED * 500);
	TCD0_CCB = (uint16_t)(calculate_sigmoid(threat_distance[FRONT]) * MAX_TICKS_THREAT_LED * 500);
	TCD0_CCC = (uint16_t)(calculate_sigmoid(threat_distance[BACK]) * MAX_TICKS_THREAT_LED * 500);
	TCD0_CCD = (uint16_t)(calculate_sigmoid(threat_distance[RIGHT]) * MAX_TICKS_THREAT_LED *  500);
}
    1232:	cf 93       	push	r28
    1234:	df 93       	push	r29
    1236:	cd b7       	in	r28, 0x3d	; 61
    1238:	de b7       	in	r29, 0x3e	; 62
    123a:	86 e6       	ldi	r24, 0x66	; 102
    123c:	99 e0       	ldi	r25, 0x09	; 9
    123e:	20 e5       	ldi	r18, 0x50	; 80
    1240:	33 ec       	ldi	r19, 0xC3	; 195
    1242:	fc 01       	movw	r30, r24
    1244:	20 83       	st	Z, r18
    1246:	31 83       	std	Z+1, r19	; 0x01
    1248:	86 e4       	ldi	r24, 0x46	; 70
    124a:	99 e0       	ldi	r25, 0x09	; 9
    124c:	22 e0       	ldi	r18, 0x02	; 2
    124e:	fc 01       	movw	r30, r24
    1250:	20 83       	st	Z, r18
    1252:	80 e4       	ldi	r24, 0x40	; 64
    1254:	99 e0       	ldi	r25, 0x09	; 9
    1256:	25 e0       	ldi	r18, 0x05	; 5
    1258:	fc 01       	movw	r30, r24
    125a:	20 83       	st	Z, r18
    125c:	df 91       	pop	r29
    125e:	cf 91       	pop	r28
    1260:	08 95       	ret

00001262 <__vector_83>:
    1262:	1f 92       	push	r1
    1264:	0f 92       	push	r0
    1266:	00 90 3f 00 	lds	r0, 0x003F
    126a:	0f 92       	push	r0
    126c:	11 24       	eor	r1, r1
    126e:	00 90 38 00 	lds	r0, 0x0038
    1272:	0f 92       	push	r0
    1274:	10 92 38 00 	sts	0x0038, r1
    1278:	00 90 3a 00 	lds	r0, 0x003A
    127c:	0f 92       	push	r0
    127e:	10 92 3a 00 	sts	0x003A, r1
    1282:	00 90 3b 00 	lds	r0, 0x003B
    1286:	0f 92       	push	r0
    1288:	10 92 3b 00 	sts	0x003B, r1
    128c:	2f 93       	push	r18
    128e:	3f 93       	push	r19
    1290:	8f 93       	push	r24
    1292:	9f 93       	push	r25
    1294:	ef 93       	push	r30
    1296:	ff 93       	push	r31
    1298:	cf 93       	push	r28
    129a:	df 93       	push	r29
    129c:	cd b7       	in	r28, 0x3d	; 61
    129e:	de b7       	in	r29, 0x3e	; 62
    12a0:	80 e4       	ldi	r24, 0x40	; 64
    12a2:	92 e0       	ldi	r25, 0x02	; 2
    12a4:	20 e4       	ldi	r18, 0x40	; 64
    12a6:	32 e0       	ldi	r19, 0x02	; 2
    12a8:	f9 01       	movw	r30, r18
    12aa:	20 81       	ld	r18, Z
    12ac:	2c 63       	ori	r18, 0x3C	; 60
    12ae:	fc 01       	movw	r30, r24
    12b0:	20 83       	st	Z, r18
    12b2:	df 91       	pop	r29
    12b4:	cf 91       	pop	r28
    12b6:	ff 91       	pop	r31
    12b8:	ef 91       	pop	r30
    12ba:	9f 91       	pop	r25
    12bc:	8f 91       	pop	r24
    12be:	3f 91       	pop	r19
    12c0:	2f 91       	pop	r18
    12c2:	0f 90       	pop	r0
    12c4:	00 92 3b 00 	sts	0x003B, r0
    12c8:	0f 90       	pop	r0
    12ca:	00 92 3a 00 	sts	0x003A, r0
    12ce:	0f 90       	pop	r0
    12d0:	00 92 38 00 	sts	0x0038, r0
    12d4:	0f 90       	pop	r0
    12d6:	00 92 3f 00 	sts	0x003F, r0
    12da:	0f 90       	pop	r0
    12dc:	1f 90       	pop	r1
    12de:	18 95       	reti

000012e0 <initialize_threat_distances>:
    12e0:	cf 93       	push	r28
    12e2:	df 93       	push	r29
    12e4:	cd b7       	in	r28, 0x3d	; 61
    12e6:	de b7       	in	r29, 0x3e	; 62
    12e8:	10 92 00 20 	sts	0x2000, r1
    12ec:	10 92 01 20 	sts	0x2001, r1
    12f0:	10 92 06 20 	sts	0x2006, r1
    12f4:	10 92 07 20 	sts	0x2007, r1
    12f8:	10 92 02 20 	sts	0x2002, r1
    12fc:	10 92 03 20 	sts	0x2003, r1
    1300:	10 92 04 20 	sts	0x2004, r1
    1304:	10 92 05 20 	sts	0x2005, r1
    1308:	df 91       	pop	r29
    130a:	cf 91       	pop	r28
    130c:	08 95       	ret

0000130e <__vector_77>:

//Interrupts used for setting threat measurements from infrared sensors to lower nibble of LED port

//D0 used to control threat level LEDs (4 lsb)
ISR(TCD0_OVF_vect)
{
    130e:	1f 92       	push	r1
    1310:	0f 92       	push	r0
    1312:	00 90 3f 00 	lds	r0, 0x003F
    1316:	0f 92       	push	r0
    1318:	11 24       	eor	r1, r1
    131a:	00 90 38 00 	lds	r0, 0x0038
    131e:	0f 92       	push	r0
    1320:	10 92 38 00 	sts	0x0038, r1
    1324:	00 90 3a 00 	lds	r0, 0x003A
    1328:	0f 92       	push	r0
    132a:	10 92 3a 00 	sts	0x003A, r1
    132e:	00 90 3b 00 	lds	r0, 0x003B
    1332:	0f 92       	push	r0
    1334:	10 92 3b 00 	sts	0x003B, r1
    1338:	2f 93       	push	r18
    133a:	3f 93       	push	r19
    133c:	8f 93       	push	r24
    133e:	9f 93       	push	r25
    1340:	ef 93       	push	r30
    1342:	ff 93       	push	r31
    1344:	cf 93       	push	r28
    1346:	df 93       	push	r29
    1348:	cd b7       	in	r28, 0x3d	; 61
    134a:	de b7       	in	r29, 0x3e	; 62
	//turn on all of the LEDs used on so that CCA, CCB, CCC, CCD can turn them off
	LED_PORT.OUT |= 0x0F;
    134c:	80 ee       	ldi	r24, 0xE0	; 224
    134e:	96 e0       	ldi	r25, 0x06	; 6
    1350:	20 ee       	ldi	r18, 0xE0	; 224
    1352:	36 e0       	ldi	r19, 0x06	; 6
    1354:	f9 01       	movw	r30, r18
    1356:	24 81       	ldd	r18, Z+4	; 0x04
    1358:	2f 60       	ori	r18, 0x0F	; 15
    135a:	fc 01       	movw	r30, r24
    135c:	24 83       	std	Z+4, r18	; 0x04
}
    135e:	df 91       	pop	r29
    1360:	cf 91       	pop	r28
    1362:	ff 91       	pop	r31
    1364:	ef 91       	pop	r30
    1366:	9f 91       	pop	r25
    1368:	8f 91       	pop	r24
    136a:	3f 91       	pop	r19
    136c:	2f 91       	pop	r18
    136e:	0f 90       	pop	r0
    1370:	00 92 3b 00 	sts	0x003B, r0
    1374:	0f 90       	pop	r0
    1376:	00 92 3a 00 	sts	0x003A, r0
    137a:	0f 90       	pop	r0
    137c:	00 92 38 00 	sts	0x0038, r0
    1380:	0f 90       	pop	r0
    1382:	00 92 3f 00 	sts	0x003F, r0
    1386:	0f 90       	pop	r0
    1388:	1f 90       	pop	r1
    138a:	18 95       	reti

0000138c <__vector_79>:

ISR(TCD0_CCA_vect)
{
    138c:	1f 92       	push	r1
    138e:	0f 92       	push	r0
    1390:	00 90 3f 00 	lds	r0, 0x003F
    1394:	0f 92       	push	r0
    1396:	11 24       	eor	r1, r1
    1398:	00 90 38 00 	lds	r0, 0x0038
    139c:	0f 92       	push	r0
    139e:	10 92 38 00 	sts	0x0038, r1
    13a2:	00 90 3a 00 	lds	r0, 0x003A
    13a6:	0f 92       	push	r0
    13a8:	10 92 3a 00 	sts	0x003A, r1
    13ac:	00 90 3b 00 	lds	r0, 0x003B
    13b0:	0f 92       	push	r0
    13b2:	10 92 3b 00 	sts	0x003B, r1
    13b6:	2f 93       	push	r18
    13b8:	3f 93       	push	r19
    13ba:	8f 93       	push	r24
    13bc:	9f 93       	push	r25
    13be:	ef 93       	push	r30
    13c0:	ff 93       	push	r31
    13c2:	cf 93       	push	r28
    13c4:	df 93       	push	r29
    13c6:	cd b7       	in	r28, 0x3d	; 61
    13c8:	de b7       	in	r29, 0x3e	; 62
	//turn off left moving LED
	LED_PORT.OUT &= (~LED_THREAT_LEFT);
    13ca:	80 ee       	ldi	r24, 0xE0	; 224
    13cc:	96 e0       	ldi	r25, 0x06	; 6
    13ce:	20 ee       	ldi	r18, 0xE0	; 224
    13d0:	36 e0       	ldi	r19, 0x06	; 6
    13d2:	f9 01       	movw	r30, r18
    13d4:	24 81       	ldd	r18, Z+4	; 0x04
    13d6:	27 7f       	andi	r18, 0xF7	; 247
    13d8:	fc 01       	movw	r30, r24
    13da:	24 83       	std	Z+4, r18	; 0x04
}
    13dc:	df 91       	pop	r29
    13de:	cf 91       	pop	r28
    13e0:	ff 91       	pop	r31
    13e2:	ef 91       	pop	r30
    13e4:	9f 91       	pop	r25
    13e6:	8f 91       	pop	r24
    13e8:	3f 91       	pop	r19
    13ea:	2f 91       	pop	r18
    13ec:	0f 90       	pop	r0
    13ee:	00 92 3b 00 	sts	0x003B, r0
    13f2:	0f 90       	pop	r0
    13f4:	00 92 3a 00 	sts	0x003A, r0
    13f8:	0f 90       	pop	r0
    13fa:	00 92 38 00 	sts	0x0038, r0
    13fe:	0f 90       	pop	r0
    1400:	00 92 3f 00 	sts	0x003F, r0
    1404:	0f 90       	pop	r0
    1406:	1f 90       	pop	r1
    1408:	18 95       	reti

0000140a <__vector_80>:

ISR(TCD0_CCB_vect)
{
    140a:	1f 92       	push	r1
    140c:	0f 92       	push	r0
    140e:	00 90 3f 00 	lds	r0, 0x003F
    1412:	0f 92       	push	r0
    1414:	11 24       	eor	r1, r1
    1416:	00 90 38 00 	lds	r0, 0x0038
    141a:	0f 92       	push	r0
    141c:	10 92 38 00 	sts	0x0038, r1
    1420:	00 90 3a 00 	lds	r0, 0x003A
    1424:	0f 92       	push	r0
    1426:	10 92 3a 00 	sts	0x003A, r1
    142a:	00 90 3b 00 	lds	r0, 0x003B
    142e:	0f 92       	push	r0
    1430:	10 92 3b 00 	sts	0x003B, r1
    1434:	2f 93       	push	r18
    1436:	3f 93       	push	r19
    1438:	8f 93       	push	r24
    143a:	9f 93       	push	r25
    143c:	ef 93       	push	r30
    143e:	ff 93       	push	r31
    1440:	cf 93       	push	r28
    1442:	df 93       	push	r29
    1444:	cd b7       	in	r28, 0x3d	; 61
    1446:	de b7       	in	r29, 0x3e	; 62
	//turn off front moving LED
	LED_PORT.OUT &= (~LED_THREAT_FORWARD);
    1448:	80 ee       	ldi	r24, 0xE0	; 224
    144a:	96 e0       	ldi	r25, 0x06	; 6
    144c:	20 ee       	ldi	r18, 0xE0	; 224
    144e:	36 e0       	ldi	r19, 0x06	; 6
    1450:	f9 01       	movw	r30, r18
    1452:	24 81       	ldd	r18, Z+4	; 0x04
    1454:	2b 7f       	andi	r18, 0xFB	; 251
    1456:	fc 01       	movw	r30, r24
    1458:	24 83       	std	Z+4, r18	; 0x04
}
    145a:	df 91       	pop	r29
    145c:	cf 91       	pop	r28
    145e:	ff 91       	pop	r31
    1460:	ef 91       	pop	r30
    1462:	9f 91       	pop	r25
    1464:	8f 91       	pop	r24
    1466:	3f 91       	pop	r19
    1468:	2f 91       	pop	r18
    146a:	0f 90       	pop	r0
    146c:	00 92 3b 00 	sts	0x003B, r0
    1470:	0f 90       	pop	r0
    1472:	00 92 3a 00 	sts	0x003A, r0
    1476:	0f 90       	pop	r0
    1478:	00 92 38 00 	sts	0x0038, r0
    147c:	0f 90       	pop	r0
    147e:	00 92 3f 00 	sts	0x003F, r0
    1482:	0f 90       	pop	r0
    1484:	1f 90       	pop	r1
    1486:	18 95       	reti

00001488 <__vector_81>:

ISR(TCD0_CCC_vect)
{
    1488:	1f 92       	push	r1
    148a:	0f 92       	push	r0
    148c:	00 90 3f 00 	lds	r0, 0x003F
    1490:	0f 92       	push	r0
    1492:	11 24       	eor	r1, r1
    1494:	00 90 38 00 	lds	r0, 0x0038
    1498:	0f 92       	push	r0
    149a:	10 92 38 00 	sts	0x0038, r1
    149e:	00 90 3a 00 	lds	r0, 0x003A
    14a2:	0f 92       	push	r0
    14a4:	10 92 3a 00 	sts	0x003A, r1
    14a8:	00 90 3b 00 	lds	r0, 0x003B
    14ac:	0f 92       	push	r0
    14ae:	10 92 3b 00 	sts	0x003B, r1
    14b2:	2f 93       	push	r18
    14b4:	3f 93       	push	r19
    14b6:	8f 93       	push	r24
    14b8:	9f 93       	push	r25
    14ba:	ef 93       	push	r30
    14bc:	ff 93       	push	r31
    14be:	cf 93       	push	r28
    14c0:	df 93       	push	r29
    14c2:	cd b7       	in	r28, 0x3d	; 61
    14c4:	de b7       	in	r29, 0x3e	; 62
	//turn off back moving LED
	LED_PORT.OUT &= (~LED_THREAT_BACKWARD);
    14c6:	80 ee       	ldi	r24, 0xE0	; 224
    14c8:	96 e0       	ldi	r25, 0x06	; 6
    14ca:	20 ee       	ldi	r18, 0xE0	; 224
    14cc:	36 e0       	ldi	r19, 0x06	; 6
    14ce:	f9 01       	movw	r30, r18
    14d0:	24 81       	ldd	r18, Z+4	; 0x04
    14d2:	2d 7f       	andi	r18, 0xFD	; 253
    14d4:	fc 01       	movw	r30, r24
    14d6:	24 83       	std	Z+4, r18	; 0x04
}
    14d8:	df 91       	pop	r29
    14da:	cf 91       	pop	r28
    14dc:	ff 91       	pop	r31
    14de:	ef 91       	pop	r30
    14e0:	9f 91       	pop	r25
    14e2:	8f 91       	pop	r24
    14e4:	3f 91       	pop	r19
    14e6:	2f 91       	pop	r18
    14e8:	0f 90       	pop	r0
    14ea:	00 92 3b 00 	sts	0x003B, r0
    14ee:	0f 90       	pop	r0
    14f0:	00 92 3a 00 	sts	0x003A, r0
    14f4:	0f 90       	pop	r0
    14f6:	00 92 38 00 	sts	0x0038, r0
    14fa:	0f 90       	pop	r0
    14fc:	00 92 3f 00 	sts	0x003F, r0
    1500:	0f 90       	pop	r0
    1502:	1f 90       	pop	r1
    1504:	18 95       	reti

00001506 <__vector_82>:

ISR(TCD0_CCD_vect)
{
    1506:	1f 92       	push	r1
    1508:	0f 92       	push	r0
    150a:	00 90 3f 00 	lds	r0, 0x003F
    150e:	0f 92       	push	r0
    1510:	11 24       	eor	r1, r1
    1512:	00 90 38 00 	lds	r0, 0x0038
    1516:	0f 92       	push	r0
    1518:	10 92 38 00 	sts	0x0038, r1
    151c:	00 90 3a 00 	lds	r0, 0x003A
    1520:	0f 92       	push	r0
    1522:	10 92 3a 00 	sts	0x003A, r1
    1526:	00 90 3b 00 	lds	r0, 0x003B
    152a:	0f 92       	push	r0
    152c:	10 92 3b 00 	sts	0x003B, r1
    1530:	2f 93       	push	r18
    1532:	3f 93       	push	r19
    1534:	8f 93       	push	r24
    1536:	9f 93       	push	r25
    1538:	ef 93       	push	r30
    153a:	ff 93       	push	r31
    153c:	cf 93       	push	r28
    153e:	df 93       	push	r29
    1540:	cd b7       	in	r28, 0x3d	; 61
    1542:	de b7       	in	r29, 0x3e	; 62
	//turn off right moving LED
	LED_PORT.OUT &= (~LED_THREAT_RIGHT);
    1544:	80 ee       	ldi	r24, 0xE0	; 224
    1546:	96 e0       	ldi	r25, 0x06	; 6
    1548:	20 ee       	ldi	r18, 0xE0	; 224
    154a:	36 e0       	ldi	r19, 0x06	; 6
    154c:	f9 01       	movw	r30, r18
    154e:	24 81       	ldd	r18, Z+4	; 0x04
    1550:	2e 7f       	andi	r18, 0xFE	; 254
    1552:	fc 01       	movw	r30, r24
    1554:	24 83       	std	Z+4, r18	; 0x04
}
    1556:	df 91       	pop	r29
    1558:	cf 91       	pop	r28
    155a:	ff 91       	pop	r31
    155c:	ef 91       	pop	r30
    155e:	9f 91       	pop	r25
    1560:	8f 91       	pop	r24
    1562:	3f 91       	pop	r19
    1564:	2f 91       	pop	r18
    1566:	0f 90       	pop	r0
    1568:	00 92 3b 00 	sts	0x003B, r0
    156c:	0f 90       	pop	r0
    156e:	00 92 3a 00 	sts	0x003A, r0
    1572:	0f 90       	pop	r0
    1574:	00 92 38 00 	sts	0x0038, r0
    1578:	0f 90       	pop	r0
    157a:	00 92 3f 00 	sts	0x003F, r0
    157e:	0f 90       	pop	r0
    1580:	1f 90       	pop	r1
    1582:	18 95       	reti

00001584 <set_infrSens_avg_to_threatDist>:


//called by main to calculate the average threat distance measured by sensors every 500ms
void set_infrSens_avg_to_threatDist()
{
    1584:	cf 93       	push	r28
    1586:	df 93       	push	r29
    1588:	cd b7       	in	r28, 0x3d	; 61
    158a:	de b7       	in	r29, 0x3e	; 62
	threat_distance[LEFT] = calc_avg(LEFT);
    158c:	80 e0       	ldi	r24, 0x00	; 0
    158e:	19 d0       	rcall	.+50     	; 0x15c2 <calc_avg>
    1590:	80 93 00 20 	sts	0x2000, r24
    1594:	90 93 01 20 	sts	0x2001, r25
	threat_distance[RIGHT] = calc_avg(RIGHT);
    1598:	83 e0       	ldi	r24, 0x03	; 3
    159a:	13 d0       	rcall	.+38     	; 0x15c2 <calc_avg>
    159c:	80 93 06 20 	sts	0x2006, r24
    15a0:	90 93 07 20 	sts	0x2007, r25
	threat_distance[FRONT] = calc_avg(FRONT);
    15a4:	81 e0       	ldi	r24, 0x01	; 1
    15a6:	0d d0       	rcall	.+26     	; 0x15c2 <calc_avg>
    15a8:	80 93 02 20 	sts	0x2002, r24
    15ac:	90 93 03 20 	sts	0x2003, r25
	threat_distance[BACK] = calc_avg(BACK);
    15b0:	82 e0       	ldi	r24, 0x02	; 2
    15b2:	07 d0       	rcall	.+14     	; 0x15c2 <calc_avg>
    15b4:	80 93 04 20 	sts	0x2004, r24
    15b8:	90 93 05 20 	sts	0x2005, r25
}
    15bc:	df 91       	pop	r29
    15be:	cf 91       	pop	r28
    15c0:	08 95       	ret

000015c2 <calc_avg>:


//calculates average of sensor measurements based on the direction passed
//threat measurements are stored in arrays in infResults structure
uint16_t calc_avg(uint8_t direction)
{
    15c2:	cf 93       	push	r28
    15c4:	df 93       	push	r29
    15c6:	cd b7       	in	r28, 0x3d	; 61
    15c8:	de b7       	in	r29, 0x3e	; 62
    15ca:	2b 97       	sbiw	r28, 0x0b	; 11
    15cc:	cd bf       	out	0x3d, r28	; 61
    15ce:	de bf       	out	0x3e, r29	; 62
    15d0:	8b 87       	std	Y+11, r24	; 0x0b
	int sum = 0;
    15d2:	19 82       	std	Y+1, r1	; 0x01
    15d4:	1a 82       	std	Y+2, r1	; 0x02
	
	switch(direction)
    15d6:	8b 85       	ldd	r24, Y+11	; 0x0b
    15d8:	88 2f       	mov	r24, r24
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	81 30       	cpi	r24, 0x01	; 1
    15de:	91 05       	cpc	r25, r1
    15e0:	61 f1       	breq	.+88     	; 0x163a <calc_avg+0x78>
    15e2:	82 30       	cpi	r24, 0x02	; 2
    15e4:	91 05       	cpc	r25, r1
    15e6:	1c f4       	brge	.+6      	; 0x15ee <calc_avg+0x2c>
    15e8:	00 97       	sbiw	r24, 0x00	; 0
    15ea:	51 f0       	breq	.+20     	; 0x1600 <calc_avg+0x3e>
    15ec:	80 c0       	rjmp	.+256    	; 0x16ee <calc_avg+0x12c>
    15ee:	82 30       	cpi	r24, 0x02	; 2
    15f0:	91 05       	cpc	r25, r1
    15f2:	09 f4       	brne	.+2      	; 0x15f6 <calc_avg+0x34>
    15f4:	40 c0       	rjmp	.+128    	; 0x1676 <calc_avg+0xb4>
    15f6:	83 30       	cpi	r24, 0x03	; 3
    15f8:	91 05       	cpc	r25, r1
    15fa:	09 f4       	brne	.+2      	; 0x15fe <calc_avg+0x3c>
    15fc:	5a c0       	rjmp	.+180    	; 0x16b2 <calc_avg+0xf0>
    15fe:	77 c0       	rjmp	.+238    	; 0x16ee <calc_avg+0x12c>
	{
		case LEFT:
		
			for (int i = 0; i < NUM_INF_SENS_MEAS; i++)
    1600:	1b 82       	std	Y+3, r1	; 0x03
    1602:	1c 82       	std	Y+4, r1	; 0x04
    1604:	14 c0       	rjmp	.+40     	; 0x162e <calc_avg+0x6c>
			{
				sum += infrResults.left[i];
    1606:	8b 81       	ldd	r24, Y+3	; 0x03
    1608:	9c 81       	ldd	r25, Y+4	; 0x04
    160a:	88 0f       	add	r24, r24
    160c:	99 1f       	adc	r25, r25
    160e:	85 5f       	subi	r24, 0xF5	; 245
    1610:	9f 4d       	sbci	r25, 0xDF	; 223
    1612:	fc 01       	movw	r30, r24
    1614:	20 81       	ld	r18, Z
    1616:	31 81       	ldd	r19, Z+1	; 0x01
    1618:	89 81       	ldd	r24, Y+1	; 0x01
    161a:	9a 81       	ldd	r25, Y+2	; 0x02
    161c:	82 0f       	add	r24, r18
    161e:	93 1f       	adc	r25, r19
    1620:	89 83       	std	Y+1, r24	; 0x01
    1622:	9a 83       	std	Y+2, r25	; 0x02
	
	switch(direction)
	{
		case LEFT:
		
			for (int i = 0; i < NUM_INF_SENS_MEAS; i++)
    1624:	8b 81       	ldd	r24, Y+3	; 0x03
    1626:	9c 81       	ldd	r25, Y+4	; 0x04
    1628:	01 96       	adiw	r24, 0x01	; 1
    162a:	8b 83       	std	Y+3, r24	; 0x03
    162c:	9c 83       	std	Y+4, r25	; 0x04
    162e:	8b 81       	ldd	r24, Y+3	; 0x03
    1630:	9c 81       	ldd	r25, Y+4	; 0x04
    1632:	84 30       	cpi	r24, 0x04	; 4
    1634:	91 05       	cpc	r25, r1
    1636:	3c f3       	brlt	.-50     	; 0x1606 <calc_avg+0x44>
			{
				sum += infrResults.left[i];
			}
		
			break;
    1638:	5a c0       	rjmp	.+180    	; 0x16ee <calc_avg+0x12c>
		
		case FRONT:
		
			for (int i = 0; i < NUM_INF_SENS_MEAS; i++)
    163a:	1d 82       	std	Y+5, r1	; 0x05
    163c:	1e 82       	std	Y+6, r1	; 0x06
    163e:	15 c0       	rjmp	.+42     	; 0x166a <calc_avg+0xa8>
			{
				sum += infrResults.front[i];
    1640:	8d 81       	ldd	r24, Y+5	; 0x05
    1642:	9e 81       	ldd	r25, Y+6	; 0x06
    1644:	08 96       	adiw	r24, 0x08	; 8
    1646:	88 0f       	add	r24, r24
    1648:	99 1f       	adc	r25, r25
    164a:	85 5f       	subi	r24, 0xF5	; 245
    164c:	9f 4d       	sbci	r25, 0xDF	; 223
    164e:	fc 01       	movw	r30, r24
    1650:	20 81       	ld	r18, Z
    1652:	31 81       	ldd	r19, Z+1	; 0x01
    1654:	89 81       	ldd	r24, Y+1	; 0x01
    1656:	9a 81       	ldd	r25, Y+2	; 0x02
    1658:	82 0f       	add	r24, r18
    165a:	93 1f       	adc	r25, r19
    165c:	89 83       	std	Y+1, r24	; 0x01
    165e:	9a 83       	std	Y+2, r25	; 0x02
		
			break;
		
		case FRONT:
		
			for (int i = 0; i < NUM_INF_SENS_MEAS; i++)
    1660:	8d 81       	ldd	r24, Y+5	; 0x05
    1662:	9e 81       	ldd	r25, Y+6	; 0x06
    1664:	01 96       	adiw	r24, 0x01	; 1
    1666:	8d 83       	std	Y+5, r24	; 0x05
    1668:	9e 83       	std	Y+6, r25	; 0x06
    166a:	8d 81       	ldd	r24, Y+5	; 0x05
    166c:	9e 81       	ldd	r25, Y+6	; 0x06
    166e:	84 30       	cpi	r24, 0x04	; 4
    1670:	91 05       	cpc	r25, r1
    1672:	34 f3       	brlt	.-52     	; 0x1640 <calc_avg+0x7e>
			{
				sum += infrResults.front[i];
			}
		
			break;
    1674:	3c c0       	rjmp	.+120    	; 0x16ee <calc_avg+0x12c>
		
		case BACK:
		
			for (int i = 0; i < NUM_INF_SENS_MEAS; i++)
    1676:	1f 82       	std	Y+7, r1	; 0x07
    1678:	18 86       	std	Y+8, r1	; 0x08
    167a:	15 c0       	rjmp	.+42     	; 0x16a6 <calc_avg+0xe4>
			{
				sum += infrResults.back[i];
    167c:	8f 81       	ldd	r24, Y+7	; 0x07
    167e:	98 85       	ldd	r25, Y+8	; 0x08
    1680:	0c 96       	adiw	r24, 0x0c	; 12
    1682:	88 0f       	add	r24, r24
    1684:	99 1f       	adc	r25, r25
    1686:	85 5f       	subi	r24, 0xF5	; 245
    1688:	9f 4d       	sbci	r25, 0xDF	; 223
    168a:	fc 01       	movw	r30, r24
    168c:	20 81       	ld	r18, Z
    168e:	31 81       	ldd	r19, Z+1	; 0x01
    1690:	89 81       	ldd	r24, Y+1	; 0x01
    1692:	9a 81       	ldd	r25, Y+2	; 0x02
    1694:	82 0f       	add	r24, r18
    1696:	93 1f       	adc	r25, r19
    1698:	89 83       	std	Y+1, r24	; 0x01
    169a:	9a 83       	std	Y+2, r25	; 0x02
		
			break;
		
		case BACK:
		
			for (int i = 0; i < NUM_INF_SENS_MEAS; i++)
    169c:	8f 81       	ldd	r24, Y+7	; 0x07
    169e:	98 85       	ldd	r25, Y+8	; 0x08
    16a0:	01 96       	adiw	r24, 0x01	; 1
    16a2:	8f 83       	std	Y+7, r24	; 0x07
    16a4:	98 87       	std	Y+8, r25	; 0x08
    16a6:	8f 81       	ldd	r24, Y+7	; 0x07
    16a8:	98 85       	ldd	r25, Y+8	; 0x08
    16aa:	84 30       	cpi	r24, 0x04	; 4
    16ac:	91 05       	cpc	r25, r1
    16ae:	34 f3       	brlt	.-52     	; 0x167c <calc_avg+0xba>
			{
				sum += infrResults.back[i];
			}
		
			break;
    16b0:	1e c0       	rjmp	.+60     	; 0x16ee <calc_avg+0x12c>
		
		case RIGHT:
		
			for (int i = 0; i < NUM_INF_SENS_MEAS; i++)
    16b2:	19 86       	std	Y+9, r1	; 0x09
    16b4:	1a 86       	std	Y+10, r1	; 0x0a
    16b6:	15 c0       	rjmp	.+42     	; 0x16e2 <calc_avg+0x120>
			{
				sum += infrResults.right[i];
    16b8:	89 85       	ldd	r24, Y+9	; 0x09
    16ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    16bc:	04 96       	adiw	r24, 0x04	; 4
    16be:	88 0f       	add	r24, r24
    16c0:	99 1f       	adc	r25, r25
    16c2:	85 5f       	subi	r24, 0xF5	; 245
    16c4:	9f 4d       	sbci	r25, 0xDF	; 223
    16c6:	fc 01       	movw	r30, r24
    16c8:	20 81       	ld	r18, Z
    16ca:	31 81       	ldd	r19, Z+1	; 0x01
    16cc:	89 81       	ldd	r24, Y+1	; 0x01
    16ce:	9a 81       	ldd	r25, Y+2	; 0x02
    16d0:	82 0f       	add	r24, r18
    16d2:	93 1f       	adc	r25, r19
    16d4:	89 83       	std	Y+1, r24	; 0x01
    16d6:	9a 83       	std	Y+2, r25	; 0x02
		
			break;
		
		case RIGHT:
		
			for (int i = 0; i < NUM_INF_SENS_MEAS; i++)
    16d8:	89 85       	ldd	r24, Y+9	; 0x09
    16da:	9a 85       	ldd	r25, Y+10	; 0x0a
    16dc:	01 96       	adiw	r24, 0x01	; 1
    16de:	89 87       	std	Y+9, r24	; 0x09
    16e0:	9a 87       	std	Y+10, r25	; 0x0a
    16e2:	89 85       	ldd	r24, Y+9	; 0x09
    16e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    16e6:	84 30       	cpi	r24, 0x04	; 4
    16e8:	91 05       	cpc	r25, r1
    16ea:	34 f3       	brlt	.-52     	; 0x16b8 <calc_avg+0xf6>
			{
				sum += infrResults.right[i];
			}
		
			break;	
    16ec:	00 00       	nop
		
	}	
	
	return sum / NUM_INF_SENS_MEAS;
    16ee:	89 81       	ldd	r24, Y+1	; 0x01
    16f0:	9a 81       	ldd	r25, Y+2	; 0x02
    16f2:	99 23       	and	r25, r25
    16f4:	0c f4       	brge	.+2      	; 0x16f8 <calc_avg+0x136>
    16f6:	03 96       	adiw	r24, 0x03	; 3
    16f8:	95 95       	asr	r25
    16fa:	87 95       	ror	r24
    16fc:	95 95       	asr	r25
    16fe:	87 95       	ror	r24
	
}
    1700:	2b 96       	adiw	r28, 0x0b	; 11
    1702:	cd bf       	out	0x3d, r28	; 61
    1704:	de bf       	out	0x3e, r29	; 62
    1706:	df 91       	pop	r29
    1708:	cf 91       	pop	r28
    170a:	08 95       	ret

0000170c <reset_infSens>:

//resets the measurement count, called by main after a direction has been determined every 500ms
void reset_infSens()
{
    170c:	cf 93       	push	r28
    170e:	df 93       	push	r29
    1710:	cd b7       	in	r28, 0x3d	; 61
    1712:	de b7       	in	r29, 0x3e	; 62
	infrResults.lCount = 0;
    1714:	10 92 2b 20 	sts	0x202B, r1
	infrResults.rCount = 0;
    1718:	10 92 2c 20 	sts	0x202C, r1
	infrResults.fCount = 0;
    171c:	10 92 2d 20 	sts	0x202D, r1
	infrResults.bCount = 0;
    1720:	10 92 2e 20 	sts	0x202E, r1
	
}
    1724:	df 91       	pop	r29
    1726:	cf 91       	pop	r28
    1728:	08 95       	ret

0000172a <CCPIOWrite>:
    172a:	0f 93       	push	r16
    172c:	cf 93       	push	r28
    172e:	df 93       	push	r29
    1730:	1f 92       	push	r1
    1732:	cd b7       	in	r28, 0x3d	; 61
    1734:	de b7       	in	r29, 0x3e	; 62
    1736:	2f b7       	in	r18, 0x3f	; 63
    1738:	29 83       	std	Y+1, r18	; 0x01
    173a:	f8 94       	cli
    173c:	1b be       	out	0x3b, r1	; 59
    173e:	fc 01       	movw	r30, r24
    1740:	08 ed       	ldi	r16, 0xD8	; 216
    1742:	04 bf       	out	0x34, r16	; 52
    1744:	60 83       	st	Z, r22
    1746:	89 81       	ldd	r24, Y+1	; 0x01
    1748:	8f bf       	out	0x3f, r24	; 63
    174a:	0f 90       	pop	r0
    174c:	df 91       	pop	r29
    174e:	cf 91       	pop	r28
    1750:	0f 91       	pop	r16
    1752:	08 95       	ret

00001754 <SetSystemClock>:
    1754:	cf 93       	push	r28
    1756:	df 93       	push	r29
    1758:	d8 2f       	mov	r29, r24
    175a:	82 30       	cpi	r24, 0x02	; 2
    175c:	59 f0       	breq	.+22     	; 0x1774 <SetSystemClock+0x20>
    175e:	28 f4       	brcc	.+10     	; 0x176a <SetSystemClock+0x16>
    1760:	88 23       	and	r24, r24
    1762:	71 f0       	breq	.+28     	; 0x1780 <SetSystemClock+0x2c>
    1764:	81 30       	cpi	r24, 0x01	; 1
    1766:	21 f5       	brne	.+72     	; 0x17b0 <SetSystemClock+0x5c>
    1768:	0d c0       	rjmp	.+26     	; 0x1784 <SetSystemClock+0x30>
    176a:	83 30       	cpi	r24, 0x03	; 3
    176c:	29 f0       	breq	.+10     	; 0x1778 <SetSystemClock+0x24>
    176e:	84 30       	cpi	r24, 0x04	; 4
    1770:	f9 f4       	brne	.+62     	; 0x17b0 <SetSystemClock+0x5c>
    1772:	04 c0       	rjmp	.+8      	; 0x177c <SetSystemClock+0x28>
    1774:	c4 e0       	ldi	r28, 0x04	; 4
    1776:	07 c0       	rjmp	.+14     	; 0x1786 <SetSystemClock+0x32>
    1778:	c8 e0       	ldi	r28, 0x08	; 8
    177a:	05 c0       	rjmp	.+10     	; 0x1786 <SetSystemClock+0x32>
    177c:	c0 e1       	ldi	r28, 0x10	; 16
    177e:	03 c0       	rjmp	.+6      	; 0x1786 <SetSystemClock+0x32>
    1780:	c1 e0       	ldi	r28, 0x01	; 1
    1782:	01 c0       	rjmp	.+2      	; 0x1786 <SetSystemClock+0x32>
    1784:	c2 e0       	ldi	r28, 0x02	; 2
    1786:	e0 e5       	ldi	r30, 0x50	; 80
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	80 81       	ld	r24, Z
    178c:	8c 2b       	or	r24, r28
    178e:	80 83       	st	Z, r24
    1790:	64 2b       	or	r22, r20
    1792:	81 e4       	ldi	r24, 0x41	; 65
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	c9 df       	rcall	.-110    	; 0x172a <CCPIOWrite>
    1798:	e1 e5       	ldi	r30, 0x51	; 81
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	90 81       	ld	r25, Z
    179e:	9c 23       	and	r25, r28
    17a0:	e9 f3       	breq	.-6      	; 0x179c <SetSystemClock+0x48>
    17a2:	6d 2f       	mov	r22, r29
    17a4:	80 e4       	ldi	r24, 0x40	; 64
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	c0 df       	rcall	.-128    	; 0x172a <CCPIOWrite>
    17aa:	21 e0       	ldi	r18, 0x01	; 1
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	02 c0       	rjmp	.+4      	; 0x17b4 <SetSystemClock+0x60>
    17b0:	2f ef       	ldi	r18, 0xFF	; 255
    17b2:	3f ef       	ldi	r19, 0xFF	; 255
    17b4:	82 2f       	mov	r24, r18
    17b6:	93 2f       	mov	r25, r19
    17b8:	df 91       	pop	r29
    17ba:	cf 91       	pop	r28
    17bc:	08 95       	ret

000017be <GetSystemClocks>:
    17be:	cf 93       	push	r28
    17c0:	df 93       	push	r29
    17c2:	fc 01       	movw	r30, r24
    17c4:	eb 01       	movw	r28, r22
    17c6:	80 91 40 00 	lds	r24, 0x0040
    17ca:	87 70       	andi	r24, 0x07	; 7
    17cc:	82 30       	cpi	r24, 0x02	; 2
    17ce:	71 f0       	breq	.+28     	; 0x17ec <GetSystemClocks+0x2e>
    17d0:	38 f4       	brcc	.+14     	; 0x17e0 <GetSystemClocks+0x22>
    17d2:	88 23       	and	r24, r24
    17d4:	09 f4       	brne	.+2      	; 0x17d8 <GetSystemClocks+0x1a>
    17d6:	42 c0       	rjmp	.+132    	; 0x185c <GetSystemClocks+0x9e>
    17d8:	81 30       	cpi	r24, 0x01	; 1
    17da:	09 f0       	breq	.+2      	; 0x17de <GetSystemClocks+0x20>
    17dc:	b4 c0       	rjmp	.+360    	; 0x1946 <GetSystemClocks+0x188>
    17de:	0f c0       	rjmp	.+30     	; 0x17fe <GetSystemClocks+0x40>
    17e0:	83 30       	cpi	r24, 0x03	; 3
    17e2:	b1 f0       	breq	.+44     	; 0x1810 <GetSystemClocks+0x52>
    17e4:	84 30       	cpi	r24, 0x04	; 4
    17e6:	09 f0       	breq	.+2      	; 0x17ea <GetSystemClocks+0x2c>
    17e8:	ae c0       	rjmp	.+348    	; 0x1946 <GetSystemClocks+0x188>
    17ea:	1b c0       	rjmp	.+54     	; 0x1822 <GetSystemClocks+0x64>
    17ec:	80 e0       	ldi	r24, 0x00	; 0
    17ee:	9d e7       	ldi	r25, 0x7D	; 125
    17f0:	a0 e0       	ldi	r26, 0x00	; 0
    17f2:	b0 e0       	ldi	r27, 0x00	; 0
    17f4:	80 83       	st	Z, r24
    17f6:	91 83       	std	Z+1, r25	; 0x01
    17f8:	a2 83       	std	Z+2, r26	; 0x02
    17fa:	b3 83       	std	Z+3, r27	; 0x03
    17fc:	37 c0       	rjmp	.+110    	; 0x186c <GetSystemClocks+0xae>
    17fe:	80 e0       	ldi	r24, 0x00	; 0
    1800:	98 e4       	ldi	r25, 0x48	; 72
    1802:	a8 ee       	ldi	r26, 0xE8	; 232
    1804:	b1 e0       	ldi	r27, 0x01	; 1
    1806:	80 83       	st	Z, r24
    1808:	91 83       	std	Z+1, r25	; 0x01
    180a:	a2 83       	std	Z+2, r26	; 0x02
    180c:	b3 83       	std	Z+3, r27	; 0x03
    180e:	2e c0       	rjmp	.+92     	; 0x186c <GetSystemClocks+0xae>
    1810:	80 e0       	ldi	r24, 0x00	; 0
    1812:	94 e2       	ldi	r25, 0x24	; 36
    1814:	a4 ef       	ldi	r26, 0xF4	; 244
    1816:	b0 e0       	ldi	r27, 0x00	; 0
    1818:	80 83       	st	Z, r24
    181a:	91 83       	std	Z+1, r25	; 0x01
    181c:	a2 83       	std	Z+2, r26	; 0x02
    181e:	b3 83       	std	Z+3, r27	; 0x03
    1820:	25 c0       	rjmp	.+74     	; 0x186c <GetSystemClocks+0xae>
    1822:	25 e5       	ldi	r18, 0x55	; 85
    1824:	30 e0       	ldi	r19, 0x00	; 0
    1826:	d9 01       	movw	r26, r18
    1828:	8c 91       	ld	r24, X
    182a:	80 e8       	ldi	r24, 0x80	; 128
    182c:	94 e8       	ldi	r25, 0x84	; 132
    182e:	ae e1       	ldi	r26, 0x1E	; 30
    1830:	b0 e0       	ldi	r27, 0x00	; 0
    1832:	80 83       	st	Z, r24
    1834:	91 83       	std	Z+1, r25	; 0x01
    1836:	a2 83       	std	Z+2, r26	; 0x02
    1838:	b3 83       	std	Z+3, r27	; 0x03
    183a:	d9 01       	movw	r26, r18
    183c:	8c 91       	ld	r24, X
    183e:	a8 2f       	mov	r26, r24
    1840:	af 71       	andi	r26, 0x1F	; 31
    1842:	09 f4       	brne	.+2      	; 0x1846 <GetSystemClocks+0x88>
    1844:	a1 e0       	ldi	r26, 0x01	; 1
    1846:	b0 e0       	ldi	r27, 0x00	; 0
    1848:	20 e8       	ldi	r18, 0x80	; 128
    184a:	34 e8       	ldi	r19, 0x84	; 132
    184c:	4e e1       	ldi	r20, 0x1E	; 30
    184e:	50 e0       	ldi	r21, 0x00	; 0
    1850:	a3 d0       	rcall	.+326    	; 0x1998 <__muluhisi3>
    1852:	60 83       	st	Z, r22
    1854:	71 83       	std	Z+1, r23	; 0x01
    1856:	82 83       	std	Z+2, r24	; 0x02
    1858:	93 83       	std	Z+3, r25	; 0x03
    185a:	08 c0       	rjmp	.+16     	; 0x186c <GetSystemClocks+0xae>
    185c:	80 e8       	ldi	r24, 0x80	; 128
    185e:	94 e8       	ldi	r25, 0x84	; 132
    1860:	ae e1       	ldi	r26, 0x1E	; 30
    1862:	b0 e0       	ldi	r27, 0x00	; 0
    1864:	80 83       	st	Z, r24
    1866:	91 83       	std	Z+1, r25	; 0x01
    1868:	a2 83       	std	Z+2, r26	; 0x02
    186a:	b3 83       	std	Z+3, r27	; 0x03
    186c:	80 91 41 00 	lds	r24, 0x0041
    1870:	8c 77       	andi	r24, 0x7C	; 124
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	96 95       	lsr	r25
    1876:	87 95       	ror	r24
    1878:	96 95       	lsr	r25
    187a:	87 95       	ror	r24
    187c:	89 30       	cpi	r24, 0x09	; 9
    187e:	91 05       	cpc	r25, r1
    1880:	59 f1       	breq	.+86     	; 0x18d8 <GetSystemClocks+0x11a>
    1882:	6c f4       	brge	.+26     	; 0x189e <GetSystemClocks+0xe0>
    1884:	83 30       	cpi	r24, 0x03	; 3
    1886:	91 05       	cpc	r25, r1
    1888:	c1 f0       	breq	.+48     	; 0x18ba <GetSystemClocks+0xfc>
    188a:	1c f4       	brge	.+6      	; 0x1892 <GetSystemClocks+0xd4>
    188c:	01 97       	sbiw	r24, 0x01	; 1
    188e:	81 f4       	brne	.+32     	; 0x18b0 <GetSystemClocks+0xf2>
    1890:	37 c0       	rjmp	.+110    	; 0x1900 <GetSystemClocks+0x142>
    1892:	85 30       	cpi	r24, 0x05	; 5
    1894:	91 05       	cpc	r25, r1
    1896:	b1 f0       	breq	.+44     	; 0x18c4 <GetSystemClocks+0x106>
    1898:	07 97       	sbiw	r24, 0x07	; 7
    189a:	51 f4       	brne	.+20     	; 0x18b0 <GetSystemClocks+0xf2>
    189c:	18 c0       	rjmp	.+48     	; 0x18ce <GetSystemClocks+0x110>
    189e:	8d 30       	cpi	r24, 0x0D	; 13
    18a0:	91 05       	cpc	r25, r1
    18a2:	21 f1       	breq	.+72     	; 0x18ec <GetSystemClocks+0x12e>
    18a4:	1c f4       	brge	.+6      	; 0x18ac <GetSystemClocks+0xee>
    18a6:	0b 97       	sbiw	r24, 0x0b	; 11
    18a8:	19 f4       	brne	.+6      	; 0x18b0 <GetSystemClocks+0xf2>
    18aa:	1b c0       	rjmp	.+54     	; 0x18e2 <GetSystemClocks+0x124>
    18ac:	0f 97       	sbiw	r24, 0x0f	; 15
    18ae:	19 f1       	breq	.+70     	; 0x18f6 <GetSystemClocks+0x138>
    18b0:	21 e0       	ldi	r18, 0x01	; 1
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	40 e0       	ldi	r20, 0x00	; 0
    18b6:	50 e0       	ldi	r21, 0x00	; 0
    18b8:	27 c0       	rjmp	.+78     	; 0x1908 <GetSystemClocks+0x14a>
    18ba:	24 e0       	ldi	r18, 0x04	; 4
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	40 e0       	ldi	r20, 0x00	; 0
    18c0:	50 e0       	ldi	r21, 0x00	; 0
    18c2:	22 c0       	rjmp	.+68     	; 0x1908 <GetSystemClocks+0x14a>
    18c4:	28 e0       	ldi	r18, 0x08	; 8
    18c6:	30 e0       	ldi	r19, 0x00	; 0
    18c8:	40 e0       	ldi	r20, 0x00	; 0
    18ca:	50 e0       	ldi	r21, 0x00	; 0
    18cc:	1d c0       	rjmp	.+58     	; 0x1908 <GetSystemClocks+0x14a>
    18ce:	20 e1       	ldi	r18, 0x10	; 16
    18d0:	30 e0       	ldi	r19, 0x00	; 0
    18d2:	40 e0       	ldi	r20, 0x00	; 0
    18d4:	50 e0       	ldi	r21, 0x00	; 0
    18d6:	18 c0       	rjmp	.+48     	; 0x1908 <GetSystemClocks+0x14a>
    18d8:	20 e2       	ldi	r18, 0x20	; 32
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	40 e0       	ldi	r20, 0x00	; 0
    18de:	50 e0       	ldi	r21, 0x00	; 0
    18e0:	13 c0       	rjmp	.+38     	; 0x1908 <GetSystemClocks+0x14a>
    18e2:	20 e4       	ldi	r18, 0x40	; 64
    18e4:	30 e0       	ldi	r19, 0x00	; 0
    18e6:	40 e0       	ldi	r20, 0x00	; 0
    18e8:	50 e0       	ldi	r21, 0x00	; 0
    18ea:	0e c0       	rjmp	.+28     	; 0x1908 <GetSystemClocks+0x14a>
    18ec:	20 e8       	ldi	r18, 0x80	; 128
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	40 e0       	ldi	r20, 0x00	; 0
    18f2:	50 e0       	ldi	r21, 0x00	; 0
    18f4:	09 c0       	rjmp	.+18     	; 0x1908 <GetSystemClocks+0x14a>
    18f6:	20 e0       	ldi	r18, 0x00	; 0
    18f8:	31 e0       	ldi	r19, 0x01	; 1
    18fa:	40 e0       	ldi	r20, 0x00	; 0
    18fc:	50 e0       	ldi	r21, 0x00	; 0
    18fe:	04 c0       	rjmp	.+8      	; 0x1908 <GetSystemClocks+0x14a>
    1900:	22 e0       	ldi	r18, 0x02	; 2
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	40 e0       	ldi	r20, 0x00	; 0
    1906:	50 e0       	ldi	r21, 0x00	; 0
    1908:	80 91 41 00 	lds	r24, 0x0041
    190c:	81 ff       	sbrs	r24, 1
    190e:	09 c0       	rjmp	.+18     	; 0x1922 <GetSystemClocks+0x164>
    1910:	22 0f       	add	r18, r18
    1912:	33 1f       	adc	r19, r19
    1914:	44 1f       	adc	r20, r20
    1916:	55 1f       	adc	r21, r21
    1918:	22 0f       	add	r18, r18
    191a:	33 1f       	adc	r19, r19
    191c:	44 1f       	adc	r20, r20
    191e:	55 1f       	adc	r21, r21
    1920:	06 c0       	rjmp	.+12     	; 0x192e <GetSystemClocks+0x170>
    1922:	80 ff       	sbrs	r24, 0
    1924:	04 c0       	rjmp	.+8      	; 0x192e <GetSystemClocks+0x170>
    1926:	22 0f       	add	r18, r18
    1928:	33 1f       	adc	r19, r19
    192a:	44 1f       	adc	r20, r20
    192c:	55 1f       	adc	r21, r21
    192e:	60 81       	ld	r22, Z
    1930:	71 81       	ldd	r23, Z+1	; 0x01
    1932:	82 81       	ldd	r24, Z+2	; 0x02
    1934:	93 81       	ldd	r25, Z+3	; 0x03
    1936:	0e d0       	rcall	.+28     	; 0x1954 <__udivmodsi4>
    1938:	28 83       	st	Y, r18
    193a:	39 83       	std	Y+1, r19	; 0x01
    193c:	4a 83       	std	Y+2, r20	; 0x02
    193e:	5b 83       	std	Y+3, r21	; 0x03
    1940:	21 e0       	ldi	r18, 0x01	; 1
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	02 c0       	rjmp	.+4      	; 0x194a <GetSystemClocks+0x18c>
    1946:	2f ef       	ldi	r18, 0xFF	; 255
    1948:	3f ef       	ldi	r19, 0xFF	; 255
    194a:	82 2f       	mov	r24, r18
    194c:	93 2f       	mov	r25, r19
    194e:	df 91       	pop	r29
    1950:	cf 91       	pop	r28
    1952:	08 95       	ret

00001954 <__udivmodsi4>:
    1954:	a1 e2       	ldi	r26, 0x21	; 33
    1956:	1a 2e       	mov	r1, r26
    1958:	aa 1b       	sub	r26, r26
    195a:	bb 1b       	sub	r27, r27
    195c:	fd 01       	movw	r30, r26
    195e:	0d c0       	rjmp	.+26     	; 0x197a <__udivmodsi4_ep>

00001960 <__udivmodsi4_loop>:
    1960:	aa 1f       	adc	r26, r26
    1962:	bb 1f       	adc	r27, r27
    1964:	ee 1f       	adc	r30, r30
    1966:	ff 1f       	adc	r31, r31
    1968:	a2 17       	cp	r26, r18
    196a:	b3 07       	cpc	r27, r19
    196c:	e4 07       	cpc	r30, r20
    196e:	f5 07       	cpc	r31, r21
    1970:	20 f0       	brcs	.+8      	; 0x197a <__udivmodsi4_ep>
    1972:	a2 1b       	sub	r26, r18
    1974:	b3 0b       	sbc	r27, r19
    1976:	e4 0b       	sbc	r30, r20
    1978:	f5 0b       	sbc	r31, r21

0000197a <__udivmodsi4_ep>:
    197a:	66 1f       	adc	r22, r22
    197c:	77 1f       	adc	r23, r23
    197e:	88 1f       	adc	r24, r24
    1980:	99 1f       	adc	r25, r25
    1982:	1a 94       	dec	r1
    1984:	69 f7       	brne	.-38     	; 0x1960 <__udivmodsi4_loop>
    1986:	60 95       	com	r22
    1988:	70 95       	com	r23
    198a:	80 95       	com	r24
    198c:	90 95       	com	r25
    198e:	9b 01       	movw	r18, r22
    1990:	ac 01       	movw	r20, r24
    1992:	bd 01       	movw	r22, r26
    1994:	cf 01       	movw	r24, r30
    1996:	08 95       	ret

00001998 <__muluhisi3>:
    1998:	09 d0       	rcall	.+18     	; 0x19ac <__umulhisi3>
    199a:	a5 9f       	mul	r26, r21
    199c:	90 0d       	add	r25, r0
    199e:	b4 9f       	mul	r27, r20
    19a0:	90 0d       	add	r25, r0
    19a2:	a4 9f       	mul	r26, r20
    19a4:	80 0d       	add	r24, r0
    19a6:	91 1d       	adc	r25, r1
    19a8:	11 24       	eor	r1, r1
    19aa:	08 95       	ret

000019ac <__umulhisi3>:
    19ac:	a2 9f       	mul	r26, r18
    19ae:	b0 01       	movw	r22, r0
    19b0:	b3 9f       	mul	r27, r19
    19b2:	c0 01       	movw	r24, r0
    19b4:	a3 9f       	mul	r26, r19
    19b6:	70 0d       	add	r23, r0
    19b8:	81 1d       	adc	r24, r1
    19ba:	11 24       	eor	r1, r1
    19bc:	91 1d       	adc	r25, r1
    19be:	b2 9f       	mul	r27, r18
    19c0:	70 0d       	add	r23, r0
    19c2:	81 1d       	adc	r24, r1
    19c4:	11 24       	eor	r1, r1
    19c6:	91 1d       	adc	r25, r1
    19c8:	08 95       	ret

000019ca <_exit>:
    19ca:	f8 94       	cli

000019cc <__stop_program>:
    19cc:	ff cf       	rjmp	.-2      	; 0x19cc <__stop_program>
